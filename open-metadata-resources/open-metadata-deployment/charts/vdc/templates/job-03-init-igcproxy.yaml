# SPDX-License-Identifier: Apache-2.0
# Copyright Contributors to the Egeria project.
{{ if .Values.ibmigc.enabled }}
# Only deploy any of this if IGC is enabled
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "myapp.fullname" . }}-job-03-init-igcproxy
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    helm.sh/chart: {{ include "myapp.chart" . }}
    app.kubernetes.io/name: {{ include "myapp.name" . }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/name: {{ include "myapp.name" . }}
    spec:
{{ if (not .Values.ibmigc.internal.enabled) }}
# When re-using a pre-existing IGC environment, ensure the the IP and hostname of the external IGC resource are
# resolve-able by the containers
      hostAliases:
        - ip: {{ .Values.ibmigc.external.ip | quote }}
          hostnames:
            - {{ .Values.ibmigc.external.hostname }}
{{ end }}
      restartPolicy: OnFailure
      initContainers:
        - name: wait-for-igcproxy
          image: "{{ if (.Values.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.image.configure.repository | default .Values.imageDefaults.repository) }}{{ .Values.image.configure.repository | default .Values.imageDefaults.repository }}/{{ end }}\
                  {{ .Values.image.configure.name }}\
                  :{{ .Values.image.configure.tag | default .Values.imageDefaults.tag }}"
          imagePullPolicy: {{ .Values.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy }}
          env:
            - name: SERVICE
              value: {{ include "myapp.fullname" . }}-ibm-igc-service
{{ if .Values.kafka.internal.enabled }}
        - name: wait-for-kafka
          image: "{{ if (.Values.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.image.configure.repository | default .Values.imageDefaults.repository) }}{{ .Values.image.configure.repository | default .Values.imageDefaults.repository }}/{{ end }}\
                  {{ .Values.image.configure.name }}\
                  :{{ .Values.image.configure.tag | default .Values.imageDefaults.tag }}"
          imagePullPolicy: {{ .Values.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy }}
          env:
            - name: SERVICE
              value: {{ .Release.Name }}-cp-kafka
{{ end }}
        - name: wait-for-ibm-igc
          image: "{{ if (.Values.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.image.configure.repository | default .Values.imageDefaults.repository) }}{{ .Values.image.configure.repository | default .Values.imageDefaults.repository }}/{{ end }}\
                  {{ .Values.image.configure.name }}\
                  :{{ .Values.image.configure.tag | default .Values.imageDefaults.tag }}"
          imagePullPolicy: {{ .Values.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy }}
          command:
            - "/bin/bash"
            - "-c"
{{ if (not .Values.ibmigc.internal.enabled) }}
            - >
                until $(curl -s -f -k --connect-timeout 5 --url https://{{ .Values.ibmigc.external.hostname }}:{{ .Values.ibmigc.external.ports.https }}/ibm/iis/launchpad); do
                echo waiting for {{ .Values.ibmigc.external.hostname }}:{{ .Values.ibmigc.external.port }} to be accessible;
                sleep 2;
                done;
{{ else }}
            - >
                until $(curl -s -f -k --connect-timeout 5 --url https://{{ include "myapp.fullname" . }}-ibm-igc-service:9446/ibm/iis/launchpad); do
                echo waiting for {{ include "myapp.fullname" . }}-ibm-igc-service to be accessible;
                sleep 2;
                done;
{{ end }}
      containers:
        - name: initialize
          image: "{{ if (.Values.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.image.configure.repository | default .Values.imageDefaults.repository) }}{{ .Values.image.configure.repository | default .Values.imageDefaults.repository }}/{{ end }}\
                  {{ .Values.image.configure.name }}\
                  :{{ .Values.image.configure.tag | default .Values.imageDefaults.tag }}"
          imagePullPolicy: {{ .Values.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ include "myapp.fullname" . }}-configmap
          command:
            - "/bin/bash"
            - "-c"
            - >
                curl -f --verbose --basic admin:admin -X POST
                ${IGCPROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${EGERIA_SERVER}/server-type?typeName=IBM%20Information%20Governance%20Catalog
                &&
                curl -f --verbose --basic admin:admin -X POST
                ${IGCPROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${EGERIA_SERVER}/organization-name?name=ODPi
                &&
                curl -f --verbose --basic admin:admin -X POST
                ${IGCPROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${EGERIA_SERVER}/server-url-root?url=${IGCPROXY_ENDPOINT}
                &&
                curl -f --verbose --basic admin:admin -X POST
                --header "Content-Type: application/json"
                ${IGCPROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${EGERIA_SERVER}/event-bus
                --data '{"producer": {"bootstrap.servers":"'"${KAFKA_ENDPOINT}"'"}, "consumer": {"bootstrap.servers":"'"${KAFKA_ENDPOINT}"'"} }'
                &&
                curl -f --verbose --basic admin:admin -X POST
                --header "Content-Type: application/json"
                ${IGCPROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${EGERIA_SERVER}/local-repository/mode/ibm-igc/details
                --data '{"igcBaseURL": "'"${IBMIGC_ENDPOINT}"'", "igcAuthorization": "'"${IBMIGC_AUTH}"'"}'
                &&
                curl -f --verbose --basic admin:admin -X POST
                ${IGCPROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${EGERIA_SERVER}/cohorts/${EGERIA_COHORT}
                &&
                curl -f --verbose --basic admin:admin -X POST
                "${IGCPROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${EGERIA_SERVER}/local-repository/event-mapper-details?connectorProvider=org.odpi.openmetadata.adapters.repositoryservices.igc.eventmapper.IGCOMRSRepositoryEventMapperProvider&eventSource=${IBMIGC_KAFKA_ENDPOINT}"
                &&
                curl -f --verbose --basic admin:admin -X POST --max-time 900
                ${IGCPROXY_ENDPOINT}/open-metadata/admin-services/users/${EGERIA_USER}/servers/${EGERIA_SERVER}/instance
...
{{ end }}
