# SPDX-License-Identifier: Apache-2.0
# Copyright Contributors to the Egeria project.
{{ if .Values.ibmigc.enabled }}
# Only deploy any of this if IGC is enabled
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: {{ include "myapp.name" . }}
    helm.sh/chart: {{ include "myapp.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: ibm-igc-service
  name: {{ include "myapp.fullname" . }}-ibm-igc-service

spec:
  type: {{ .Values.service.type }}
  ports:
    - name: proxy
      port: 8080
      targetPort: 8080
      nodePort: {{ .Values.service.nodeport.igcproxy }}
{{ if .Values.ibmigc.internal.enabled }}
# Only expose web port if we are using a cluster-internal IGC
    - name: web
      port: 9446
      targetPort: 9446
      nodePort: {{ .Values.service.nodeport.ibmigc }}
{{ end }}
  selector:
    app.kubernetes.io/name: {{ include "myapp.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: ibm-igc-service
...
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  name: {{ include "myapp.fullname" . }}-ibm-igc
  labels:
    app.kubernetes.io/name: {{ include "myapp.name" . }}
    helm.sh/chart: {{ include "myapp.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: ibm-igc-service

spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "myapp.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: ibm-igc-service
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: {{ include "myapp.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: ibm-igc-service
    spec:
{{ if .Values.ibmigc.internal.enabled }}
# If we are using a cluster-internal IGC, stand up both the IGC container and the proxy, embedding the Ansible
# playbooks for loading sample metadata at runtime within the IGC container
      hostname: infosvr
      volumes:
{{ if .Values.localRepo.use }}
        - name: egeria-volume
          hostPath:
            path: {{ .Values.localRepo.location }}
            type: Directory
{{ else }}
        - name: egeria-volume
          emptyDir: {}
{{ end }}
      imagePullSecrets:
        - name: regcred
      initContainers:
        - name: init-git
          image: "{{ if (.Values.image.configure.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.configure.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.image.configure.repository | default .Values.imageDefaults.repository) }}{{ .Values.image.configure.repository | default .Values.imageDefaults.repository }}/{{ end }}\
                  {{ .Values.image.configure.name }}\
                  :{{ .Values.image.configure.tag | default .Values.imageDefaults.tag }}"
          imagePullPolicy: {{ .Values.image.configure.pullPolicy | default .Values.imageDefaults.pullPolicy }}
          command:
            - "/bin/bash"
            - "-c"
            - >
                cd /egeria &&
                git init . &&
                git remote add origin https://github.com/odpi/egeria.git &&
                git config core.sparsecheckout true &&
                echo 'open-metadata-resources/open-metadata-deployment/sample-data/*' >> .git/info/sparse-checkout &&
                git pull --depth=1 origin master
          volumeMounts:
            - mountPath: /egeria
              name: egeria-volume
      containers:
        - name: proxy
          image: "{{ if (.Values.image.egeria.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.egeria.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.image.egeria.repository | default .Values.imageDefaults.repository) }}{{ .Values.image.egeria.repository | default .Values.imageDefaults.repository }}/{{ end }}\
                  {{ .Values.image.egeria.name }}\
                  :{{ .Values.image.egeria.tag | default .Values.imageDefaults.tag }}"
          imagePullPolicy: {{ .Values.image.egeria.pullPolicy | default .Values.imageDefaults.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ include "myapp.fullname" . }}-configmap
          env:
            - name: "logging.level.org.odpi.openmetadata.adapters.repositoryservices.igc"
              value: "DEBUG"
          ports:
            - containerPort: 8080
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 6
          resources: {}
        - name: ibm-igc
          image: "{{ if (.Values.image.ibmigc.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.ibmigc.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.image.ibmigc.repository | default .Values.imageDefaults.repository) }}{{ .Values.image.ibmigc.repository | default .Values.imageDefaults.repository }}/{{ end }}\
                  {{ .Values.image.ibmigc.name }}\
                  :{{ .Values.image.ibmigc.tag | default .Values.imageDefaults.tag }}"
          imagePullPolicy: {{ .Values.image.ibmigc.pullPolicy | default .Values.imageDefaults.pullPolicy }}
          ports:
            - containerPort: 9446
            - containerPort: 52181
            - containerPort: 59092
          livenessProbe:
            httpGet:
              path: /ibm/iis/launchpad
              port: 9446
              scheme: "HTTPS"
            initialDelaySeconds: 180
            periodSeconds: 20
            failureThreshold: 12
          readinessProbe:
            httpGet:
              path: /ibm/iis/launchpad
              port: 9446
              scheme: "HTTPS"
            initialDelaySeconds: 180
            periodSeconds: 20
            timeoutSeconds: 3
            failureThreshold: 3
          resources: {}
          securityContext:
            capabilities:
              add: ["IPC_OWNER"]
          volumeMounts:
            - mountPath: /egeria
              name: egeria-volume
#      hostIPC: true   # try without this setting to reduce potential risks to host system
{{ else }}
# When re-using a pre-existing IGC environment, only run the IGC proxy here, while ensuring the IP and hostname of
# the external IGC resource are resolve-able by the proxy container
      hostAliases:
        - ip: {{ .Values.ibmigc.external.ip | quote }}
          hostnames:
            - {{ .Values.ibmigc.external.hostname }}
      containers:
        - name: proxy
          image: "{{ if (.Values.image.egeria.registry | default .Values.imageDefaults.registry) }}{{ .Values.image.egeria.registry | default .Values.imageDefaults.registry }}/{{ end }}\
                  {{ if (.Values.image.egeria.repository | default .Values.imageDefaults.repository) }}{{ .Values.image.egeria.repository | default .Values.imageDefaults.repository }}/{{ end }}\
                  {{ .Values.image.egeria.name }}\
                  :{{ .Values.image.egeria.tag | default .Values.imageDefaults.tag }}"
          imagePullPolicy: {{ .Values.image.egeria.pullPolicy | default .Values.imageDefaults.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ include "myapp.fullname" . }}-configmap
          env:
            - name: "logging.level.org.odpi.openmetadata.adapters.repositoryservices.igc"
              value: {{ .Values.logging.level }}
          ports:
            - containerPort: 8080
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 6
          resources: {}
{{ end }}

status: {}
...
{{ end }}
