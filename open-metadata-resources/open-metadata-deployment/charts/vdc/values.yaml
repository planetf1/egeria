# SPDX-License-Identifier: Apache-2.0
# Copyright Contributors to the Egeria project.
---
# Network configuration
# note that load balancer configuration tends to be cloud-specific
# So review the templates/loadbalancer* files for any
# required updates

service:
  # LoadBalancer is another option (not for IBM Cloud free cluster)
  # ClusterIP is recommended for IBMCloud - and enable ingress below
  # NodePort will work ok in other environments, including IBM ICP, but note that the ports may
  # well be non standard and services will be at http://<external address of a workernode>:<randomport>
  # Review output from 'kubectl get services' to see the external port used
  type: NodePort
  externalName: default.svc.cluster.local

  loadbalancer:
    enabled: false
    iptype: public
    publicip: <undefined>
  # Currently IBMCloud is the only supported setting, and enabled additional Ingress rules. Comment out for other platforms

  ingress:
    # Update this with your own domain
    enabled: false
    externaldomain: egeriadev.eu-gb.containers.appdomain.cloud
    cloudservice: IBMCloud

  # If type is NodePort, these are the ports we will request - but if not free, another will be allocated
  # and then things may not work externally. LoadBalancer & Ingress are recommended if possible.
  # Ports are required to be in the range 30000-32767 for IBM Cloud
  nodeport:
    egeria: 30080
    atlas: 31000
    ibmigc: 32446
    igcproxy: 30081
    gaian: 30414
    postgresql: 30432
    ui: 30443
    ranger: 32080
    rangersecure: 30182
    # Set this to address of one of the local nodes - public IP
    omrsmonitor: 31080
    externalip: 10.10.1.30
    # KAFKA is not exposed externally (issues in chart, complexity)

# Debug support for Egeria - set to true to enable JVM debug for Egeria images on port 5005
debug:
  egeriaJVM: false

# Logging level - affects all spring components by setting LOG_LEVEL_ROOT. Default to no DEBUG - Auditlog only
logging:
  level: NONE

imageDefaults:
  registry: docker.io
  repository: planetf1
  tag: latest
  pullPolicy: IfNotPresent

# The following section defines all of the DOCKER images being used by this chart. Normally they should be left as is,
# but are exposed here in case the user wishes to extend. By default, each will use the 'imageDefaults' above, but
# these can be individually overridden for each image, if desired, by providing a subkey for 'registry', 'tag' or
# 'pullPolicy' with the value to use for the override (if you want to use the public Docker registry, use
# 'docker.io/library' as the registry override).
#
#  To build from egeria source - (example)
#  mvn clean install -Ddocker -Ddocker.registry=localhost:5000 -Ddocker.repo=odpi
image:
  ranger:
    name: ranger-admin-egeriavdc

  mariadb:
    repository: library
    name: mariadb

  egeria:
    name: egeria

  gaian:
    name: gaian-egeriavdc

  atlas:
    name: apache-atlas

  kafkamonitor:
    name: kafka-monitor-egeriavdc

  postgresql:
    repository: library
    name: postgres
    tag: alpine

  omrsmonitor:
    name: omrsmonitor-egeriavdc

  # NOTE: this image is only used if the ibmigc.external is set to false; otherwise it is ignored and
  # the k8s-external, pre-existing environment defined under ibmigc... is used
  ibmigc:
    registry: "localhost:5000"
    repository: ibm
    name: infosvr
    tag: v11.7.0.2

  configure:
    name: egeria-configure

  nameOverride: ""
  fullnameOverride: ""

# Set 'use' to true to use your local repository rather than Egeria's (remote) master git repository
# (When set to true, also provide the absolute path to your local repository)
localRepo:
  use: false
  location: /some/where/egeria

# Whether to use a k8s cluster-internal Kafka or an external one -- if using internal,
# see 'cp-kafka' below for config options
kafka:
  internal:
    enabled: true
  external:
    hostname: ""
    ip: ""
    port: ""

# The demo can use an IBM IGC environment.
# Set external to "true" to use a pre-existing IBM IGC environment (outside your k8s cluster),
# in which case, also provide the hostname, IP address and port number for the domain tier
ibmigc:
  enabled: false
  cred: aXNhZG1pbjppc2FkbWlu
  internal:
    enabled: false
  external:
    hostname: ""
    ip: ""
    ports:
      https: ""
      broker: ""

# When using the k8s-internal Kafka (from Confluent), enable auto-topic creation
# (for full options, see: https://github.com/confluentinc/cp-helm-charts/tree/master/charts/cp-kafka)
cp-kafka:
  brokers: 1
  configurationOverrides:
    auto.create.topics.enable: true
  prometheus:
    jmx:
      enabled: false

# When using the k8s-internal Kafka (from Confluent), configure Zookeeper options
# (for full options, see: https://github.com/confluentinc/cp-helm-charts/tree/master/charts/cp-zookeeper)
cp-zookeeper:
  servers: 1
  prometheus:
    jmx:
      enabled: false

# For the Confluent kafka chart there are many additional components
# that we don't need -- so they are removed here
cp-schema-registry:
  enabled: false
cp-kafka-rest:
  enabled: false
cp-kafka-connect:
  enabled: false
cp-ksql-server:
  enabled: false

# Open LDAP configuration
openldap:
  adminPassword: passw0rd
  configPassword: passw0rd
  servicePort: 389
