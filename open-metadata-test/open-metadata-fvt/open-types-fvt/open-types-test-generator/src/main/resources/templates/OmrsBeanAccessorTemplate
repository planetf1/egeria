/* SPDX-License-Identifier: Apache-2.0 */
/* Copyright Contributors to the ODPi Egeria project. */

// This is a generated file - do not edit - changes should be made to the templates amd/or generator to generate this file with changes.

package org.odpi.openmetadata.fvt.opentypes.server;

import java.util.*;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
//omrs
import org.odpi.openmetadata.fvt.opentypes.common.*;
import org.odpi.openmetadata.repositoryservices.ffdc.exception.*;
import org.odpi.openmetadata.repositoryservices.rest.properties.*;
import org.odpi.openmetadata.opentypes.OpenMetadataTypesArchive;
import org.odpi.openmetadata.opentypes.OpenMetadataTypesArchiveAccessor;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.typedefs.PrimitiveDefCategory;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.typedefs.EntityDef;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.typedefs.RelationshipDef;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.EntityDetail;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstanceProperties;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Relationship;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.SequencingOrder;

// omrs bean entity specific imports
<$$$
import org.odpi.openmetadata.fvt.opentypes.entities.<$$uEntityName$$>.<$$uEntityName$$>;
import org.odpi.openmetadata.fvt.opentypes.entities.<$$uEntityName$$>.<$$uEntityName$$>References;
import org.odpi.openmetadata.fvt.opentypes.entities.<$$uEntityName$$>.<$$uEntityName$$>Mapper;
$$$>
// omrs bean relationships specific imports
import org.odpi.openmetadata.fvt.opentypes.relationships.OMRSRelationshipToLines;
<$$RELATIONSHIP$
import org.odpi.openmetadata.fvt.opentypes.relationships.<$$uRelationshipName$$>.<$$uRelationshipName$$>;
import org.odpi.openmetadata.fvt.opentypes.relationships.<$$uRelationshipName$$>.<$$uRelationshipName$$>Mapper;
$$RELATIONSHIP$>

/**
 * The OMRS API exposes concepts like Entities Relationships and ClassificationBeans, all of which have properties.
 * So the Subject Area OMAS can more easily consume this content, a subset of the OMRS content is exposed as java beans.
 * These java beans are accessed using this class.
 */

public class BeansToAccessOMRS  {

    private static final Logger log = LoggerFactory.getLogger(BeansToAccessOMRS.class);
    private static final String className = BeansToAccessOMRS.class.getName();

    // The OMRSAPIHelper allows the junits to mock out the omrs layer.
    private OMRSAPIHelper oMRSAPIHelper =new OMRSAPIHelper();

    public BeansToAccessOMRS() {
    }
    public void setOMRSAPIHelper(OMRSAPIHelper oMRSAPIHelper) {
        this.oMRSAPIHelper=oMRSAPIHelper;
    }

<$$$
    /**
     * Fetch complete definition of an <$$EntityName$$> given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the <$$lowerCasePluralEntityName$$> relationships.
     * @param userId user identity
     * @param entityGuid GUID for the entity
     * @return <$$uEntityName$$> the <$$uEntityName$$> entity with the requested GUID
     */
    public <$$uEntityName$$> get<$$uEntityName$$>(String userId,String entityGuid)
       throws UserNotAuthorizedException, RepositoryErrorException, EntityProxyOnlyException, InvalidParameterException, EntityNotKnownException
    {
        final String methodName = "get<$$uEntityName$$>";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
       //InputValidator.validateUserIdNotNull(className,methodName,userId);
       //InputValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        <$$uEntityName$$> got<$$EntityName$$> = <$$uEntityName$$>Mapper.mapOmrsEntityDetailTo<$$uEntityName$$>(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ got<$$EntityName$$> );
        }
        return got<$$EntityName$$>;

    }
    /**
     * Create new <$$EntityName$$>.
     * @param userId user identity
     * @param <$$EntityName$$> the input entity with values.
     * @return <$$uEntityName$$> the created entity.
     */

    public <$$uEntityName$$> create<$$uEntityName$$>(String userId,<$$uEntityName$$> <$$EntityName$$>)
        throws ClassificationErrorException, StatusNotSupportedException, UserNotAuthorizedException,
           FunctionNotSupportedException, InvalidParameterException, RepositoryErrorException, PropertyErrorException, TypeErrorException

    {
        final String methodName = "create<$$uEntityName$$>";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
       //InputValidator.validateUserIdNotNull(className,methodName,userId);
        EntityDetail entityDetails = <$$uEntityName$$>Mapper.map<$$uEntityName$$>ToOmrsEntityDetail(<$$EntityName$$>);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetails);

        <$$uEntityName$$> created<$$uEntityName$$> =  <$$uEntityName$$>Mapper.mapOmrsEntityDetailTo<$$uEntityName$$>(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created <$$uEntityName$$>="+ created<$$uEntityName$$> );
        }
        return created<$$uEntityName$$>;
    }
    /**
     * Update <$$EntityName$$>
     * @param userId user identity
     * @param <$$EntityName$$>   <$$EntityName$$> to update
     * @return <$$uEntityName$$> the updated <$$EntityName$$> entity
     */
    public <$$uEntityName$$> update<$$uEntityName$$>(String userId, <$$uEntityName$$> <$$EntityName$$>)
              throws UserNotAuthorizedException, EntityNotKnownException, FunctionNotSupportedException, InvalidParameterException, RepositoryErrorException, PropertyErrorException
    {

            final String methodName = "update<$$uEntityName$$>";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
           //InputValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetails = <$$uEntityName$$>Mapper.map<$$uEntityName$$>ToOmrsEntityDetail(<$$EntityName$$>);
           //InputValidator.validateGUIDNotNull(className,methodName,entityDetails.getGUID(),"guid");
            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetails);

            <$$uEntityName$$> updated<$$uEntityName$$> =  <$$uEntityName$$>Mapper.mapOmrsEntityDetailTo<$$uEntityName$$>(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated <$$uEntityName$$>="+ updated<$$uEntityName$$> );
            }
            return updated<$$uEntityName$$>;
        }

    /**
     * Delete an <$$EntityName$$> identified by its GUID. Delete is a soft delete, this means that the <$$EntityName$$> has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param userId user identity
     * @param  entityGuid GUID for the <$$EntityName$$>
     * @return <$$uEntityName$$> the deleted <$$uEntityName$$> entity
     */

    public <$$uEntityName$$> delete<$$uEntityName$$>(String userId,final String entityGuid)
       throws UserNotAuthorizedException, RepositoryErrorException, EntityNotKnownException, InvalidParameterException, FunctionNotSupportedException
    {
         final String methodName = "delete<$$uEntityName$$>";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
        //InputValidator.validateUserIdNotNull(className,methodName,userId);
        //InputValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         // get the <$$uEntityName$$> type guid
         OpenMetadataTypesArchiveAccessor archiveAccessor = OpenMetadataTypesArchiveAccessor.getInstance();
         EntityDef entityDef = archiveAccessor.getEntityDefByName("<$$uEntityName$$>");
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,"<$$uEntityName$$>",entityDef.getGUID(),entityGuid);
         <$$uEntityName$$> deleted<$$uEntityName$$> = <$$uEntityName$$>Mapper.mapOmrsEntityDetailTo<$$uEntityName$$>(deletedOmrsEntityDetail);

         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deleted<$$uEntityName$$>;

    }
    /**
     * Purge an <$$EntityName$$> identified by its GUID. Delete is a hard delete, this means that the <$$EntityName$$> is really
     * deleted .
     * @param userId user identity
     * @param  entityGuid GUID for the <$$EntityName$$>
     */
    public void purge<$$uEntityName$$>(String userId,final String entityGuid)
      throws UserNotAuthorizedException, RepositoryErrorException, EntityNotKnownException,
       InvalidParameterException, FunctionNotSupportedException,  EntityNotDeletedException
    {
        final String methodName = "purge<$$uEntityName$$>";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
        //InputValidator.validateUserIdNotNull(className,methodName,userId);
        //InputValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         // get the <$$uEntityName$$> type guid
         OpenMetadataTypesArchiveAccessor archiveAccessor = OpenMetadataTypesArchiveAccessor.getInstance();
         EntityDef entityDef = archiveAccessor.getEntityDefByName("<$$uEntityName$$>");
         oMRSAPIHelper.callOMRSPurgeEntity(userId,"<$$uEntityName$$>",entityDef.getGUID(),entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }
    /**
     * Restore an <$$uEntityName$$> identified by its GUID. Restore resurrects a soft deleted <$$uEntityName$$>. When a <$$uEntityName$$> was incorrectly deleted, the delete can be undone using the restore..
     * @param userId user identity
     * @param entityGuid GUID for the <$$uEntityName$$>
     * @return  <$$uEntityName$$> the restored <$$uEntityName$$>
     */
    public <$$uEntityName$$> restore<$$uEntityName$$>(String userId,final String entityGuid)
       throws UserNotAuthorizedException, EntityNotKnownException, EntityNotDeletedException, InvalidParameterException, RepositoryErrorException, FunctionNotSupportedException
    {
        final String methodName = "restore<$$uEntityName$$>";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
       //InputValidator.validateUserIdNotNull(className,methodName,userId);
       //InputValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");
        EntityDetail omrsEntity =  oMRSAPIHelper.callOMRSRestoreEntity(userId,entityGuid);
        <$$uEntityName$$> restored<$$uEntityName$$> =  <$$uEntityName$$>Mapper.mapOmrsEntityDetailTo<$$uEntityName$$>(omrsEntity);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return restored<$$uEntityName$$>;
    }    

    /**
     * Add classifications to the supplied <$$EntityName$$>
     * @param userId user identity
     * @param entityGuid the GUID value for <$$EntityName$$>
     * @param classifications the classifications to apply.
     * @return the <$$EntityName$$> entity that has been classified
     */
     public <$$uEntityName$$> add<$$uEntityName$$>ClassificationBeans(String userId,final String entityGuid, List<ClassificationBean> classifications)
       throws ClassificationErrorException, UserNotAuthorizedException, EntityNotKnownException, FunctionNotSupportedException,
                  InvalidParameterException, RepositoryErrorException, PropertyErrorException, EntityProxyOnlyException
     {
        final String methodName = "add<$$uEntityName$$>ClassificationBeans";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
        //InputValidator.validateUserIdNotNull(className,methodName,userId);


         for (ClassificationBean classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
            //InputValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         <$$uEntityName$$> <$$EntityName$$>ClassificationBeans = <$$uEntityName$$>Mapper.mapOmrsEntityDetailTo<$$uEntityName$$>(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified <$$uEntityName$$>=" +  <$$EntityName$$>ClassificationBeans);
         }
         return  <$$EntityName$$>ClassificationBeans;
    }

    /**
     * Updates classifications to an existing <$$EntityName$$> represented by a guid.
     * @param userId user identity
     * @param  entityGuid globally unique identifier for the <$$EntityName$$>
     * @param classificationsToUpdate List of classifications to update entity with
     * @return classification for the given <$$EntityName$$> guid
     */
    public <$$uEntityName$$> update<$$uEntityName$$>ClassificationBean(String userId, final String entityGuid, List<ClassificationBean> classificationsToUpdate)
          throws UserNotAuthorizedException, RepositoryErrorException, EntityProxyOnlyException, InvalidParameterException, EntityNotKnownException,
                ClassificationErrorException, FunctionNotSupportedException, PropertyErrorException
    {
        final String methodName = "update<$$uEntityName$$>ClassificationBeans";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
       //InputValidator.validateUserIdNotNull(className,methodName,userId);
       //InputValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationBeanNames = omrsEntityDetail.getClassifications().stream().map(x -> x.getName()).collect(Collectors.toList());
            for (ClassificationBean classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationBeanNames.contains(name)) {
                    // @TODO ?
                 }
            }
            for (ClassificationBean classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           <$$uEntityName$$>  <$$EntityName$$>ClassificationBeans = <$$uEntityName$$>Mapper.mapOmrsEntityDetailTo<$$uEntityName$$>(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  <$$EntityName$$>ClassificationBeans;
    }

    /**
     * Deletes a given classification from an existing <$$EntityName$$> represented by a guid.
     * @param userId user identity
     * @param entityGuid  globally unique identifier for the <$$EntityName$$>
     * @param name name of the classification
     * @return deleted <$$uEntityName$$>  classification
     */
    public <$$uEntityName$$> delete<$$uEntityName$$>ClassificationBean(String userId,String entityGuid, final String name)
          throws ClassificationErrorException, UserNotAuthorizedException, EntityNotKnownException, FunctionNotSupportedException,
                InvalidParameterException, RepositoryErrorException, EntityProxyOnlyException
    {
       final String methodName = "delete<$$uEntityName$$>ClassificationBean";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
      //InputValidator.validateUserIdNotNull(className,methodName,userId);
      //InputValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       <$$uEntityName$$> declassified<$$uEntityName$$> =  <$$uEntityName$$>Mapper.mapOmrsEntityDetailTo<$$uEntityName$$>(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassified<$$uEntityName$$>;
    }

    /**
      * Get the relationships associated with entity <$$EntityName$$> represented by a guid.
      * @param userId user identity
      * @param entityGuid  globally unique identifier for the <$$EntityName$$>
      * @param relationshipTypeGuid the guid of the relationships type to restrict the relationships returned to this type. null means return all relationships types.
      * @param fromRelationshipElement the starting element number of the relationships to return.
      *                                This is used when retrieving elements
      *                                beyond the first page of results. Zero means start from the first element.
      * @param asOfTime Date return relationships as they were at some time in the past. null indicates to return relationships as they are now.
      * @param sequencingProperty String name of the property that is to be used to sequence the results.
      *                           Null means do not sequence on a property name (see SequencingOrder).
      * @param sequencingOrder Enum defining how the results should be ordered.
      * @param pageSize  the maximum number of result classifications that can be returned on this request.  Zero means
      *                 unrestricted return results size.
      * @return {@code List<Line> }
      */
     public Set<Line> get<$$uEntityName$$>Relationships(
                        String                     userId,
                        String                     entityGuid,
                        String                     relationshipTypeGuid,
                        int                        fromRelationshipElement,
                        Date                       asOfTime,
                        String                     sequencingProperty,
                        SequencingOrder            sequencingOrder,
                        int                        pageSize)
             throws UserNotAuthorizedException, EntityNotKnownException, FunctionNotSupportedException, InvalidParameterException,
                  RepositoryErrorException, PropertyErrorException, TypeErrorException, PagingErrorException
     {
        final String methodName = "get<$$uEntityName$$>Relationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",entity guid="+entityGuid + ",relationships Type Guid="+relationshipTypeGuid);
        }
       //InputValidator.validateUserIdNotNull(className,methodName,userId);
       //InputValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        Set<Line> lines = null;

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,
                    entityGuid,
                    relationshipTypeGuid,
                    fromRelationshipElement,
                    asOfTime,
                    sequencingProperty,
                    sequencingOrder,
                    pageSize);
        if (omrsRelationships !=null) {
            lines =  OMRSRelationshipToLines.convert(omrsRelationships);
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    $$$>
     // Relationships

     <$$RELATIONSHIP$
    /**
      * Create <$$uRelationshipName$$> relationships
      * @param userId user identity
      * @param relationships <$$uRelationshipName$$> relationships to create
      * @return created <$$uRelationshipName$$> relationships
      */
    public <$$uRelationshipName$$> create<$$uRelationshipName$$>Relationship(String userId,<$$uRelationshipName$$> relationships)
       throws StatusNotSupportedException, UserNotAuthorizedException, EntityNotKnownException,
            FunctionNotSupportedException, InvalidParameterException, RepositoryErrorException, PropertyErrorException, TypeErrorException
    {
        final String methodName = "create<$$uRelationshipName$$>Relationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationships="+relationships);
        }
       //InputValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = <$$uRelationshipName$$>Mapper.map<$$uRelationshipName$$>ToOmrsRelationship(relationships);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        <$$uRelationshipName$$> returned<$$uRelationshipName$$> =  <$$uRelationshipName$$>Mapper.mapOmrsRelationshipTo<$$uRelationshipName$$>(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationships="+relationships);
        }
        return returned<$$uRelationshipName$$>;
    }
    /**
      * Get <$$uRelationshipName$$> relationships
      * @param userId user identity
      * @param relationshipGuid relationships guid
      * @return <$$uRelationshipName$$> relationships
      */
    public <$$uRelationshipName$$> get<$$uRelationshipName$$>Relationship( String userId, String relationshipGuid)
      throws UserNotAuthorizedException, RepositoryErrorException, InvalidParameterException, RelationshipNotKnownException
      {
            final String methodName = "get<$$uRelationshipName$$>Relationship";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
           //InputValidator.validateUserIdNotNull(className,methodName,userId);
           //InputValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            <$$uRelationshipName$$> got<$$uRelationshipName$$> = <$$uRelationshipName$$>Mapper.mapOmrsRelationshipTo<$$uRelationshipName$$>(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return got<$$uRelationshipName$$>;
      }
    /**
      * Update <$$uRelationshipName$$> relationships
      * @param userId user identity
      * @param <$$RelationshipName$$> relationships
      * @return  <$$uRelationshipName$$> relationships
      */
      public <$$uRelationshipName$$> update<$$uRelationshipName$$>Relationship(String userId,<$$uRelationshipName$$> <$$RelationshipName$$>)
         throws StatusNotSupportedException, UserNotAuthorizedException, FunctionNotSupportedException,
            InvalidParameterException, RepositoryErrorException, RelationshipNotKnownException, PropertyErrorException
        {
        final String methodName = "update<$$uRelationshipName$$>Relationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
       //InputValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = <$$uRelationshipName$$>Mapper.map<$$uRelationshipName$$>ToOmrsRelationship(<$$RelationshipName$$>);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        <$$uRelationshipName$$> updated<$$uRelationshipName$$> = <$$uRelationshipName$$>Mapper.mapOmrsRelationshipTo<$$uRelationshipName$$>(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updated<$$uRelationshipName$$>;
    }
    $$RELATIONSHIP$>

    /**
      * Delete relationships. Any checking that the relationships is of a particular type should be done by the caller.
      * @param userId user identity
      * @param relationshipGuid relationshipGuid
      * @param typeName name of the type. This needs match the type associated with the relationships identified with the supplied GUID
      * @return deleted relationships
      */
     public Relationship deleteRelationship(String userId,String relationshipGuid, String typeName )
      throws UserNotAuthorizedException, RepositoryErrorException, InvalidParameterException, FunctionNotSupportedException, RelationshipNotKnownException
     {
            final String methodName = "deleteRelationship";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            //InputValidator.validateUserIdNotNull(className,methodName,userId);
            //InputValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");
             // get the appropriate type name and guid
             OpenMetadataTypesArchiveAccessor archiveAccessor = OpenMetadataTypesArchiveAccessor.getInstance();
             RelationshipDef relationshipDef = archiveAccessor.getRelationshipDefByName(typeName);
             String typeGuid = relationshipDef.getGUID();
             Relationship  deletedRelationship =oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
             if (log.isDebugEnabled()) {
                 log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
             }

             return deletedRelationship;
     }
    /**
      * Purge relationships
      * @param userId user identity
      * @param relationshipGuid relationshipGuid
      * @param typeName name of the type. This needs match the type associated with the relationships identified with the supplied GUID
      */
     public void purgeRelationship(String userId,String relationshipGuid,String typeName)
      throws RelationshipNotDeletedException, UserNotAuthorizedException, FunctionNotSupportedException,
                  InvalidParameterException, RepositoryErrorException, RelationshipNotKnownException
     {      final String methodName = "purgeRelationship";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
           //InputValidator.validateUserIdNotNull(className,methodName,userId);
           //InputValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            // get the appropriate type name and guid
            OpenMetadataTypesArchiveAccessor archiveAccessor = OpenMetadataTypesArchiveAccessor.getInstance();
            RelationshipDef relationshipDef = archiveAccessor.getRelationshipDefByName(typeName);
            String typeGuid = relationshipDef.getGUID();

            oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
            if (log.isDebugEnabled()) {
                 log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
     }
    /**
     * Restore an relationships identified by its GUID. Restore resurrects a soft deleted relationships. When a relationships is incorrectly deleted, the delete can be undone by using this restore.
     * @param userId user identity
     * @param relationshipGuid GUID for the relationships
     * @return Relationship the restored relationships
     */
    public Relationship restoreRelationship(String userId,final String relationshipGuid)
          throws RelationshipNotDeletedException, UserNotAuthorizedException, FunctionNotSupportedException,
              InvalidParameterException, RepositoryErrorException, RelationshipNotKnownException
    {
        final String methodName = "restoreRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
        }
       //InputValidator.validateUserIdNotNull(className,methodName,userId);
       //InputValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"entityGuid");
        Relationship restoredRelationship  =  oMRSAPIHelper.callOMRSRestoreRelationship(userId,relationshipGuid);

        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
        }
        return restoredRelationship;
    }
}
