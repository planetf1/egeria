/* SPDX-License-Identifier: Apache-2.0 */

// This is a generated file - do not edit - changes should be made to the templates amd/or generator to generate this file with changes.

package org.odpi.openmetadata.accessservices.subjectarea.generated.server;

import java.util.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
//omrs
import org.odpi.openmetadata.accessservices.subjectarea.utilities.OMRSAPIHelper;
import org.odpi.openmetadata.repositoryservices.rest.properties.*;
import org.odpi.openmetadata.repositoryservices.archivemanager.opentypes.OpenMetadataTypesArchive;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.typedefs.PrimitiveDefCategory;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.EntityDetail;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstanceProperties;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Relationship;

//omrs bean
import org.odpi.openmetadata.accessservices.subjectarea.responses.*;
import org.odpi.openmetadata.accessservices.subjectarea.validators.RestValidator;
import org.odpi.openmetadata.accessservices.subjectarea.constraints.SubjectAreaConstraintsFactory;
import org.odpi.openmetadata.accessservices.subjectarea.constraints.SubjectAreaConstraint;
import org.odpi.openmetadata.accessservices.subjectarea.ffdc.exceptions.*;
import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.line.Line;
import org.odpi.openmetadata.accessservices.subjectarea.ffdc.SubjectAreaErrorCode;
import org.odpi.openmetadata.accessservices.subjectarea.properties.classifications.Classification;
import org.odpi.openmetadata.accessservices.subjectarea.properties.enums.Status;

// omrs bean entity specific imports
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.CertificationType.CertificationType;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.CertificationType.CertificationTypeReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.CertificationType.CertificationTypeMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.APISchemaType.APISchemaType;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.APISchemaType.APISchemaTypeReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.APISchemaType.APISchemaTypeMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DataSet.DataSet;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DataSet.DataSetReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DataSet.DataSetMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.OperatingPlatform.OperatingPlatform;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.OperatingPlatform.OperatingPlatformReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.OperatingPlatform.OperatingPlatformMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernancePolicy.GovernancePolicy;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernancePolicy.GovernancePolicyReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernancePolicy.GovernancePolicyMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DerivedSchemaAttribute.DerivedSchemaAttribute;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DerivedSchemaAttribute.DerivedSchemaAttributeReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DerivedSchemaAttribute.DerivedSchemaAttributeMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Process.Process;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Process.ProcessReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Process.ProcessMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MapSchemaType.MapSchemaType;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MapSchemaType.MapSchemaTypeReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MapSchemaType.MapSchemaTypeMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DeployedSoftwareComponent.DeployedSoftwareComponent;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DeployedSoftwareComponent.DeployedSoftwareComponentReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DeployedSoftwareComponent.DeployedSoftwareComponentMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SchemaType.SchemaType;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SchemaType.SchemaTypeReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SchemaType.SchemaTypeMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DataFile.DataFile;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DataFile.DataFileReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DataFile.DataFileMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Like.Like;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Like.LikeReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Like.LikeMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Referenceable.Referenceable;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Referenceable.ReferenceableReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Referenceable.ReferenceableMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ExternalReference.ExternalReference;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ExternalReference.ExternalReferenceReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ExternalReference.ExternalReferenceMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Endpoint.Endpoint;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Endpoint.EndpointReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Endpoint.EndpointMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ContactDetails.ContactDetails;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ContactDetails.ContactDetailsReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ContactDetails.ContactDetailsMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceDefinition.GovernanceDefinition;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceDefinition.GovernanceDefinitionReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceDefinition.GovernanceDefinitionMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.FileFolder.FileFolder;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.FileFolder.FileFolderReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.FileFolder.FileFolderMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Network.Network;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Network.NetworkReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Network.NetworkMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ActorProfile.ActorProfile;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ActorProfile.ActorProfileReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ActorProfile.ActorProfileMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Asset.Asset;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Asset.AssetReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Asset.AssetMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.APIOperation.APIOperation;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.APIOperation.APIOperationReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.APIOperation.APIOperationMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ToDo.ToDo;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ToDo.ToDoReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ToDo.ToDoMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.NetworkGateway.NetworkGateway;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.NetworkGateway.NetworkGatewayReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.NetworkGateway.NetworkGatewayMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceResponsibility.GovernanceResponsibility;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceResponsibility.GovernanceResponsibilityReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceResponsibility.GovernanceResponsibilityMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ImplementationSnippet.ImplementationSnippet;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ImplementationSnippet.ImplementationSnippetReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ImplementationSnippet.ImplementationSnippetMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.UserIdentity.UserIdentity;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.UserIdentity.UserIdentityReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.UserIdentity.UserIdentityMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.NoteEntry.NoteEntry;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.NoteEntry.NoteEntryReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.NoteEntry.NoteEntryMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.PropertyFacet.PropertyFacet;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.PropertyFacet.PropertyFacetReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.PropertyFacet.PropertyFacetMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Project.Project;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Project.ProjectReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Project.ProjectMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.HostCluster.HostCluster;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.HostCluster.HostClusterReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.HostCluster.HostClusterMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Glossary.Glossary;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Glossary.GlossaryReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Glossary.GlossaryMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GlossaryCategory.GlossaryCategory;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GlossaryCategory.GlossaryCategoryReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GlossaryCategory.GlossaryCategoryMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MediaCollection.MediaCollection;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MediaCollection.MediaCollectionReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MediaCollection.MediaCollectionMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Collection.Collection;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Collection.CollectionReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Collection.CollectionMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.InformalTag.InformalTag;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.InformalTag.InformalTagReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.InformalTag.InformalTagMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceZone.GovernanceZone;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceZone.GovernanceZoneReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceZone.GovernanceZoneMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Person.Person;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Person.PersonReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Person.PersonMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Application.Application;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Application.ApplicationReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Application.ApplicationMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.VirtualContainer.VirtualContainer;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.VirtualContainer.VirtualContainerReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.VirtualContainer.VirtualContainerMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceDriver.GovernanceDriver;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceDriver.GovernanceDriverReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceDriver.GovernanceDriverMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Meeting.Meeting;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Meeting.MeetingReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Meeting.MeetingMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Rating.Rating;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Rating.RatingReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Rating.RatingMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ProjectCharter.ProjectCharter;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ProjectCharter.ProjectCharterReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ProjectCharter.ProjectCharterMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SoftwareServerCapability.SoftwareServerCapability;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SoftwareServerCapability.SoftwareServerCapabilityReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SoftwareServerCapability.SoftwareServerCapabilityMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.LicenseType.LicenseType;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.LicenseType.LicenseTypeReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.LicenseType.LicenseTypeMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GraphVertex.GraphVertex;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GraphVertex.GraphVertexReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GraphVertex.GraphVertexMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GlossaryTerm.GlossaryTerm;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GlossaryTerm.GlossaryTermReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GlossaryTerm.GlossaryTermMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Team.Team;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Team.TeamReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Team.TeamMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MetadataCollection.MetadataCollection;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MetadataCollection.MetadataCollectionReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MetadataCollection.MetadataCollectionMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceControl.GovernanceControl;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceControl.GovernanceControlReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceControl.GovernanceControlMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Topic.Topic;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Topic.TopicReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Topic.TopicMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SoftwareServer.SoftwareServer;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SoftwareServer.SoftwareServerReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SoftwareServer.SoftwareServerMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DeployedAPI.DeployedAPI;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DeployedAPI.DeployedAPIReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DeployedAPI.DeployedAPIMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MediaFile.MediaFile;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MediaFile.MediaFileReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MediaFile.MediaFileMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Comment.Comment;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Comment.CommentReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Comment.CommentMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.RelatedMedia.RelatedMedia;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.RelatedMedia.RelatedMediaReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.RelatedMedia.RelatedMediaMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ConnectorType.ConnectorType;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ConnectorType.ConnectorTypeReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ConnectorType.ConnectorTypeMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.CohortMember.CohortMember;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.CohortMember.CohortMemberReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.CohortMember.CohortMemberMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ComplexSchemaType.ComplexSchemaType;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ComplexSchemaType.ComplexSchemaTypeReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ComplexSchemaType.ComplexSchemaTypeMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceMetric.GovernanceMetric;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceMetric.GovernanceMetricReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceMetric.GovernanceMetricMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ExternalId.ExternalId;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ExternalId.ExternalIdReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ExternalId.ExternalIdMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Connection.Connection;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Connection.ConnectionReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Connection.ConnectionMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Host.Host;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Host.HostReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Host.HostMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SubscriberList.SubscriberList;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SubscriberList.SubscriberListReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SubscriberList.SubscriberListMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceRule.GovernanceRule;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceRule.GovernanceRuleReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceRule.GovernanceRuleMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MetadataRepositoryCohort.MetadataRepositoryCohort;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MetadataRepositoryCohort.MetadataRepositoryCohortReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MetadataRepositoryCohort.MetadataRepositoryCohortMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.NoteLog.NoteLog;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.NoteLog.NoteLogReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.NoteLog.NoteLogMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ExternalGlossaryLink.ExternalGlossaryLink;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ExternalGlossaryLink.ExternalGlossaryLinkReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ExternalGlossaryLink.ExternalGlossaryLinkMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.VirtualConnection.VirtualConnection;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.VirtualConnection.VirtualConnectionReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.VirtualConnection.VirtualConnectionMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Regulation.Regulation;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Regulation.RegulationReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Regulation.RegulationMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceProcess.GovernanceProcess;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceProcess.GovernanceProcessReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceProcess.GovernanceProcessMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SchemaAttribute.SchemaAttribute;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SchemaAttribute.SchemaAttributeReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SchemaAttribute.SchemaAttributeMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GraphEdge.GraphEdge;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GraphEdge.GraphEdgeReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GraphEdge.GraphEdgeMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Community.Community;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Community.CommunityReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Community.CommunityMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Location.Location;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Location.LocationReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Location.LocationMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.BusinessCapability.BusinessCapability;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.BusinessCapability.BusinessCapabilityReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.BusinessCapability.BusinessCapabilityMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SchemaLinkElement.SchemaLinkElement;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SchemaLinkElement.SchemaLinkElementReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SchemaLinkElement.SchemaLinkElementMapper;
// omrs bean relationship specific imports
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.UsedInContext.UsedInContext;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.UsedInContext.UsedInContextMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.Leadership.Leadership;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.Leadership.LeadershipMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AttachedComment.AttachedComment;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AttachedComment.AttachedCommentMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ContactThrough.ContactThrough;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ContactThrough.ContactThroughMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.License.License;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.License.LicenseMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ZoneGovernance.ZoneGovernance;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ZoneGovernance.ZoneGovernanceMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.FolderHierarchy.FolderHierarchy;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.FolderHierarchy.FolderHierarchyMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.HostClusterMember.HostClusterMember;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.HostClusterMember.HostClusterMemberMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.LibraryCategoryReference.LibraryCategoryReference;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.LibraryCategoryReference.LibraryCategoryReferenceMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProjectCharterLink.ProjectCharterLink;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProjectCharterLink.ProjectCharterLinkMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProfileIdentity.ProfileIdentity;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProfileIdentity.ProfileIdentityMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ToDoSource.ToDoSource;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ToDoSource.ToDoSourceMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.Translation.Translation;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.Translation.TranslationMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.SchemaLinkToType.SchemaLinkToType;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.SchemaLinkToType.SchemaLinkToTypeMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.CommunityResources.CommunityResources;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.CommunityResources.CommunityResourcesMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.DataContentForDataSet.DataContentForDataSet;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.DataContentForDataSet.DataContentForDataSetMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ServerEndpoint.ServerEndpoint;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ServerEndpoint.ServerEndpointMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ExternalIdLink.ExternalIdLink;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ExternalIdLink.ExternalIdLinkMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.CategoryHierarchyLink.CategoryHierarchyLink;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.CategoryHierarchyLink.CategoryHierarchyLinkMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.PreferredTerm.PreferredTerm;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.PreferredTerm.PreferredTermMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProjectHierarchy.ProjectHierarchy;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProjectHierarchy.ProjectHierarchyMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.DeployedVirtualContainer.DeployedVirtualContainer;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.DeployedVirtualContainer.DeployedVirtualContainerMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProjectMeeting.ProjectMeeting;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProjectMeeting.ProjectMeetingMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernanceResults.GovernanceResults;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernanceResults.GovernanceResultsMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.APIResponse.APIResponse;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.APIResponse.APIResponseMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ServerSupportedCapability.ServerSupportedCapability;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ServerSupportedCapability.ServerSupportedCapabilityMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.CollectionMember.CollectionMember;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.CollectionMember.CollectionMemberMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.HostNetwork.HostNetwork;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.HostNetwork.HostNetworkMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AttributeForSchema.AttributeForSchema;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AttributeForSchema.AttributeForSchemaMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AssetLocation.AssetLocation;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AssetLocation.AssetLocationMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.SchemaAttributeType.SchemaAttributeType;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.SchemaAttributeType.SchemaAttributeTypeMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernanceImplementation.GovernanceImplementation;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernanceImplementation.GovernanceImplementationMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.LinkedMedia.LinkedMedia;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.LinkedMedia.LinkedMediaMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.MapToElementType.MapToElementType;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.MapToElementType.MapToElementTypeMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ExternallySourcedGlossary.ExternallySourcedGlossary;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ExternallySourcedGlossary.ExternallySourcedGlossaryMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ExternalReferenceLink.ExternalReferenceLink;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ExternalReferenceLink.ExternalReferenceLinkMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.MediaReference.MediaReference;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.MediaReference.MediaReferenceMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.CommunityMembership.CommunityMembership;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.CommunityMembership.CommunityMembershipMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ExternalIdScope.ExternalIdScope;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ExternalIdScope.ExternalIdScopeMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ValidValue.ValidValue;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ValidValue.ValidValueMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AcceptedAnswer.AcceptedAnswer;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AcceptedAnswer.AcceptedAnswerMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernanceDefinitionMetric.GovernanceDefinitionMetric;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernanceDefinitionMetric.GovernanceDefinitionMetricMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.SchemaQueryImplementation.SchemaQueryImplementation;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.SchemaQueryImplementation.SchemaQueryImplementationMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AssetSchemaType.AssetSchemaType;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AssetSchemaType.AssetSchemaTypeMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProjectDependency.ProjectDependency;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProjectDependency.ProjectDependencyMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.TopicSubscribers.TopicSubscribers;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.TopicSubscribers.TopicSubscribersMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ReplacementTerm.ReplacementTerm;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ReplacementTerm.ReplacementTermMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.OrganizationalCapability.OrganizationalCapability;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.OrganizationalCapability.OrganizationalCapabilityMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.MetadataCohortPeer.MetadataCohortPeer;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.MetadataCohortPeer.MetadataCohortPeerMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AttachedNoteLogEntry.AttachedNoteLogEntry;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AttachedNoteLogEntry.AttachedNoteLogEntryMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AssetServerUse.AssetServerUse;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AssetServerUse.AssetServerUseMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.RuntimeForProcess.RuntimeForProcess;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.RuntimeForProcess.RuntimeForProcessMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.NestedLocation.NestedLocation;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.NestedLocation.NestedLocationMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.StaffAssignment.StaffAssignment;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.StaffAssignment.StaffAssignmentMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.LinkedFile.LinkedFile;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.LinkedFile.LinkedFileMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.TermCategorization.TermCategorization;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.TermCategorization.TermCategorizationMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ZoneMembership.ZoneMembership;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ZoneMembership.ZoneMembershipMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.APIEndpoint.APIEndpoint;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.APIEndpoint.APIEndpointMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ConnectionEndpoint.ConnectionEndpoint;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ConnectionEndpoint.ConnectionEndpointMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.CategoryAnchor.CategoryAnchor;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.CategoryAnchor.CategoryAnchorMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProjectTeam.ProjectTeam;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProjectTeam.ProjectTeamMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProcessOutput.ProcessOutput;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProcessOutput.ProcessOutputMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.APIOperations.APIOperations;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.APIOperations.APIOperationsMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernancePolicyLink.GovernancePolicyLink;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernancePolicyLink.GovernancePolicyLinkMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ResponsibilityStaffContact.ResponsibilityStaffContact;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ResponsibilityStaffContact.ResponsibilityStaffContactMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.Peer.Peer;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.Peer.PeerMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.TermTYPEDBYRelationship.TermTYPEDBYRelationship;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.TermTYPEDBYRelationship.TermTYPEDBYRelationshipMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.MapFromElementType.MapFromElementType;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.MapFromElementType.MapFromElementTypeMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.Certification.Certification;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.Certification.CertificationMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.NetworkGatewayLink.NetworkGatewayLink;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.NetworkGatewayLink.NetworkGatewayLinkMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ConnectionConnectorType.ConnectionConnectorType;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ConnectionConnectorType.ConnectionConnectorTypeMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.Synonym.Synonym;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.Synonym.SynonymMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.Antonym.Antonym;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.Antonym.AntonymMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GraphEdgeLink.GraphEdgeLink;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GraphEdgeLink.GraphEdgeLinkMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ToDoOnReferenceable.ToDoOnReferenceable;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ToDoOnReferenceable.ToDoOnReferenceableMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProjectScope.ProjectScope;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProjectScope.ProjectScopeMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ISARelationship.ISARelationship;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ISARelationship.ISARelationshipMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.TermISATypeOFRelationship.TermISATypeOFRelationship;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.TermISATypeOFRelationship.TermISATypeOFRelationshipMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.Contributor.Contributor;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.Contributor.ContributorMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.EmbeddedConnection.EmbeddedConnection;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.EmbeddedConnection.EmbeddedConnectionMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernanceControlLink.GovernanceControlLink;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernanceControlLink.GovernanceControlLinkMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AttachedRating.AttachedRating;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AttachedRating.AttachedRatingMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AttachedNoteLog.AttachedNoteLog;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AttachedNoteLog.AttachedNoteLogMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ConnectionToAsset.ConnectionToAsset;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ConnectionToAsset.ConnectionToAssetMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.RegulationCertificationType.RegulationCertificationType;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.RegulationCertificationType.RegulationCertificationTypeMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.LinkedType.LinkedType;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.LinkedType.LinkedTypeMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernanceRuleImplementation.GovernanceRuleImplementation;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernanceRuleImplementation.GovernanceRuleImplementationMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AdjacentLocation.AdjacentLocation;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AdjacentLocation.AdjacentLocationMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.SemanticAssignment.SemanticAssignment;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.SemanticAssignment.SemanticAssignmentMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.HostLocation.HostLocation;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.HostLocation.HostLocationMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ServerDeployment.ServerDeployment;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ServerDeployment.ServerDeploymentMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.RelatedTerm.RelatedTerm;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.RelatedTerm.RelatedTermMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.SchemaTypeImplementation.SchemaTypeImplementation;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.SchemaTypeImplementation.SchemaTypeImplementationMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProcessInput.ProcessInput;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProcessInput.ProcessInputMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.APIHeader.APIHeader;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.APIHeader.APIHeaderMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.MeetingOnReferenceable.MeetingOnReferenceable;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.MeetingOnReferenceable.MeetingOnReferenceableMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AttachedTag.AttachedTag;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AttachedTag.AttachedTagMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.TermHASARelationship.TermHASARelationship;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.TermHASARelationship.TermHASARelationshipMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernanceProcessImplementation.GovernanceProcessImplementation;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernanceProcessImplementation.GovernanceProcessImplementationMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GroupedMedia.GroupedMedia;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GroupedMedia.GroupedMediaMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernanceResponse.GovernanceResponse;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernanceResponse.GovernanceResponseMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.NestedFile.NestedFile;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.NestedFile.NestedFileMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.HostOperatingPlatform.HostOperatingPlatform;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.HostOperatingPlatform.HostOperatingPlatformMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ActorCollection.ActorCollection;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ActorCollection.ActorCollectionMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.TermAnchor.TermAnchor;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.TermAnchor.TermAnchorMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProjectResources.ProjectResources;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProjectResources.ProjectResourcesMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.APIRequest.APIRequest;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.APIRequest.APIRequestMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.SoftwareComponentDeployment.SoftwareComponentDeployment;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.SoftwareComponentDeployment.SoftwareComponentDeploymentMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.CohortMemberMetadataCollection.CohortMemberMetadataCollection;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.CohortMemberMetadataCollection.CohortMemberMetadataCollectionMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ReferenceableFacet.ReferenceableFacet;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ReferenceableFacet.ReferenceableFacetMapper;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AttachedLike.AttachedLike;
import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AttachedLike.AttachedLikeMapper;

/**
 * The OMRS API exposes concepts like Entities Relationships and Classifications, all of which have properties.
 * So the Subject Area OMAS can more easily consume this content, a subset of the OMRS content is exposed as java beans.
 * These java beans are accessed using this class.
 */

public class SubjectAreaBeansToAccessOMRS  {

    private static final Logger log = LoggerFactory.getLogger(SubjectAreaBeansToAccessOMRS.class);
    private static final String className = SubjectAreaBeansToAccessOMRS.class.getName();

    // The OMRSAPIHelper allows the junits to mock out the omrs layer.
    private OMRSAPIHelper oMRSAPIHelper =new OMRSAPIHelper();

    public SubjectAreaBeansToAccessOMRS() {
    }
    public void setOMRSAPIHelper(OMRSAPIHelper oMRSAPIHelper) {
        this.oMRSAPIHelper=oMRSAPIHelper;
    }

    /**
     * Fetch complete definition of an certificationType given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the certificationTypes relationships.
     * @param entityGuid GUID for the entity
     * @return CertificationType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public CertificationType getCertificationTypeById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getCertificationTypeById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        CertificationType gotcertificationType = CertificationTypeMapper.mapOmrsEntityDetailToCertificationType(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotcertificationType );
        }
        return gotcertificationType;

    }
    /**
     * Create new certificationType.
     * @param certificationType
     * @return CertificationType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public CertificationType createCertificationType(String userId,CertificationType certificationType)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createCertificationTypeById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("CertificationType");
        if (constraint!=null) {
             constraint.preCreate(certificationType);
        }

        EntityDetail entityDetail = CertificationTypeMapper.mapCertificationTypeToOmrsEntityDetail(certificationType);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        CertificationType createdCertificationType =  CertificationTypeMapper.mapOmrsEntityDetailToCertificationType(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created CertificationType="+ createdCertificationType );
        }
        return createdCertificationType;
    }
    /**
     * Update certificationType 
     * @param certificationType
     * @return CertificationType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public CertificationType updateCertificationType(String userId, CertificationType certificationType)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateCertificationTypeById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = CertificationTypeMapper.mapCertificationTypeToOmrsEntityDetail(certificationType);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            CertificationType updatedCertificationType =  CertificationTypeMapper.mapOmrsEntityDetailToCertificationType(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated CertificationType="+ updatedCertificationType );
            }
            return updatedCertificationType;
        }

    /**
     * Delete an certificationType identified by its GUID. Delete is a soft delete, this means that the certificationType has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the certificationType
     * @return CertificationType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteCertificationTypeByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteCertificationTypeByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an certificationType identified by its GUID. Delete is a hard delete, this means that the certificationType is really
     * deleted .
     *
     * @param  entityGuid GUID for the certificationType
     * @return CertificationType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeCertificationTypeByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeCertificationTypeByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied certificationType
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public CertificationType addCertificationTypeClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addCertificationTypeClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         CertificationType certificationTypeClassifications = CertificationTypeMapper.mapOmrsEntityDetailToCertificationType(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified CertificationType=" +  certificationTypeClassifications);
         }
         return  certificationTypeClassifications;
    }

    /**
     * Updates classifications to an existing certificationType represented by a guid.
     * @param  entityGuid globally unique identifier for the certificationType
     * @return classification for the given certificationType guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public CertificationType updateCertificationTypeClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateCertificationTypeClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           CertificationType  certificationTypeClassifications = CertificationTypeMapper.mapOmrsEntityDetailToCertificationType(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  certificationTypeClassifications;
    }

    /**
     * Deletes a given classification from an existing certificationType represented by a guid.
     * @param entityGuid  globally unique identifier for the certificationType
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public CertificationType deleteCertificationTypeClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteCertificationTypeClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       CertificationType declassifiedCertificationType =  CertificationTypeMapper.mapOmrsEntityDetailToCertificationType(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedCertificationType;
    }

    /**
      * Get the relationships associated with entity certificationType represented by a guid.
      * @param entityGuid  globally unique identifier for the certificationType
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getCertificationTypeRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getCertificationTypeRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an aPISchemaType given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the aPISchemaTypes relationships.
     * @param entityGuid GUID for the entity
     * @return APISchemaType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public APISchemaType getAPISchemaTypeById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getAPISchemaTypeById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        APISchemaType gotaPISchemaType = APISchemaTypeMapper.mapOmrsEntityDetailToAPISchemaType(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotaPISchemaType );
        }
        return gotaPISchemaType;

    }
    /**
     * Create new aPISchemaType.
     * @param aPISchemaType
     * @return APISchemaType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public APISchemaType createAPISchemaType(String userId,APISchemaType aPISchemaType)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createAPISchemaTypeById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("APISchemaType");
        if (constraint!=null) {
             constraint.preCreate(aPISchemaType);
        }

        EntityDetail entityDetail = APISchemaTypeMapper.mapAPISchemaTypeToOmrsEntityDetail(aPISchemaType);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        APISchemaType createdAPISchemaType =  APISchemaTypeMapper.mapOmrsEntityDetailToAPISchemaType(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created APISchemaType="+ createdAPISchemaType );
        }
        return createdAPISchemaType;
    }
    /**
     * Update aPISchemaType 
     * @param aPISchemaType
     * @return APISchemaType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public APISchemaType updateAPISchemaType(String userId, APISchemaType aPISchemaType)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateAPISchemaTypeById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = APISchemaTypeMapper.mapAPISchemaTypeToOmrsEntityDetail(aPISchemaType);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            APISchemaType updatedAPISchemaType =  APISchemaTypeMapper.mapOmrsEntityDetailToAPISchemaType(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated APISchemaType="+ updatedAPISchemaType );
            }
            return updatedAPISchemaType;
        }

    /**
     * Delete an aPISchemaType identified by its GUID. Delete is a soft delete, this means that the aPISchemaType has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the aPISchemaType
     * @return APISchemaType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteAPISchemaTypeByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteAPISchemaTypeByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an aPISchemaType identified by its GUID. Delete is a hard delete, this means that the aPISchemaType is really
     * deleted .
     *
     * @param  entityGuid GUID for the aPISchemaType
     * @return APISchemaType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeAPISchemaTypeByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeAPISchemaTypeByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied aPISchemaType
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public APISchemaType addAPISchemaTypeClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addAPISchemaTypeClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         APISchemaType aPISchemaTypeClassifications = APISchemaTypeMapper.mapOmrsEntityDetailToAPISchemaType(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified APISchemaType=" +  aPISchemaTypeClassifications);
         }
         return  aPISchemaTypeClassifications;
    }

    /**
     * Updates classifications to an existing aPISchemaType represented by a guid.
     * @param  entityGuid globally unique identifier for the aPISchemaType
     * @return classification for the given aPISchemaType guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public APISchemaType updateAPISchemaTypeClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateAPISchemaTypeClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           APISchemaType  aPISchemaTypeClassifications = APISchemaTypeMapper.mapOmrsEntityDetailToAPISchemaType(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  aPISchemaTypeClassifications;
    }

    /**
     * Deletes a given classification from an existing aPISchemaType represented by a guid.
     * @param entityGuid  globally unique identifier for the aPISchemaType
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public APISchemaType deleteAPISchemaTypeClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteAPISchemaTypeClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       APISchemaType declassifiedAPISchemaType =  APISchemaTypeMapper.mapOmrsEntityDetailToAPISchemaType(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedAPISchemaType;
    }

    /**
      * Get the relationships associated with entity aPISchemaType represented by a guid.
      * @param entityGuid  globally unique identifier for the aPISchemaType
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getAPISchemaTypeRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getAPISchemaTypeRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an dataSet given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the dataSets relationships.
     * @param entityGuid GUID for the entity
     * @return DataSet
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public DataSet getDataSetById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getDataSetById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        DataSet gotdataSet = DataSetMapper.mapOmrsEntityDetailToDataSet(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotdataSet );
        }
        return gotdataSet;

    }
    /**
     * Create new dataSet.
     * @param dataSet
     * @return DataSet
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public DataSet createDataSet(String userId,DataSet dataSet)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createDataSetById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("DataSet");
        if (constraint!=null) {
             constraint.preCreate(dataSet);
        }

        EntityDetail entityDetail = DataSetMapper.mapDataSetToOmrsEntityDetail(dataSet);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        DataSet createdDataSet =  DataSetMapper.mapOmrsEntityDetailToDataSet(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created DataSet="+ createdDataSet );
        }
        return createdDataSet;
    }
    /**
     * Update dataSet 
     * @param dataSet
     * @return DataSet
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public DataSet updateDataSet(String userId, DataSet dataSet)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateDataSetById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = DataSetMapper.mapDataSetToOmrsEntityDetail(dataSet);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            DataSet updatedDataSet =  DataSetMapper.mapOmrsEntityDetailToDataSet(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated DataSet="+ updatedDataSet );
            }
            return updatedDataSet;
        }

    /**
     * Delete an dataSet identified by its GUID. Delete is a soft delete, this means that the dataSet has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the dataSet
     * @return DataSet
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteDataSetByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteDataSetByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an dataSet identified by its GUID. Delete is a hard delete, this means that the dataSet is really
     * deleted .
     *
     * @param  entityGuid GUID for the dataSet
     * @return DataSet
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeDataSetByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeDataSetByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied dataSet
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public DataSet addDataSetClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addDataSetClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         DataSet dataSetClassifications = DataSetMapper.mapOmrsEntityDetailToDataSet(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified DataSet=" +  dataSetClassifications);
         }
         return  dataSetClassifications;
    }

    /**
     * Updates classifications to an existing dataSet represented by a guid.
     * @param  entityGuid globally unique identifier for the dataSet
     * @return classification for the given dataSet guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public DataSet updateDataSetClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateDataSetClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           DataSet  dataSetClassifications = DataSetMapper.mapOmrsEntityDetailToDataSet(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  dataSetClassifications;
    }

    /**
     * Deletes a given classification from an existing dataSet represented by a guid.
     * @param entityGuid  globally unique identifier for the dataSet
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public DataSet deleteDataSetClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteDataSetClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       DataSet declassifiedDataSet =  DataSetMapper.mapOmrsEntityDetailToDataSet(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedDataSet;
    }

    /**
      * Get the relationships associated with entity dataSet represented by a guid.
      * @param entityGuid  globally unique identifier for the dataSet
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getDataSetRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getDataSetRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an operatingPlatform given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the operatingPlatforms relationships.
     * @param entityGuid GUID for the entity
     * @return OperatingPlatform
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public OperatingPlatform getOperatingPlatformById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getOperatingPlatformById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        OperatingPlatform gotoperatingPlatform = OperatingPlatformMapper.mapOmrsEntityDetailToOperatingPlatform(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotoperatingPlatform );
        }
        return gotoperatingPlatform;

    }
    /**
     * Create new operatingPlatform.
     * @param operatingPlatform
     * @return OperatingPlatform
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public OperatingPlatform createOperatingPlatform(String userId,OperatingPlatform operatingPlatform)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createOperatingPlatformById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("OperatingPlatform");
        if (constraint!=null) {
             constraint.preCreate(operatingPlatform);
        }

        EntityDetail entityDetail = OperatingPlatformMapper.mapOperatingPlatformToOmrsEntityDetail(operatingPlatform);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        OperatingPlatform createdOperatingPlatform =  OperatingPlatformMapper.mapOmrsEntityDetailToOperatingPlatform(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created OperatingPlatform="+ createdOperatingPlatform );
        }
        return createdOperatingPlatform;
    }
    /**
     * Update operatingPlatform 
     * @param operatingPlatform
     * @return OperatingPlatform
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public OperatingPlatform updateOperatingPlatform(String userId, OperatingPlatform operatingPlatform)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateOperatingPlatformById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = OperatingPlatformMapper.mapOperatingPlatformToOmrsEntityDetail(operatingPlatform);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            OperatingPlatform updatedOperatingPlatform =  OperatingPlatformMapper.mapOmrsEntityDetailToOperatingPlatform(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated OperatingPlatform="+ updatedOperatingPlatform );
            }
            return updatedOperatingPlatform;
        }

    /**
     * Delete an operatingPlatform identified by its GUID. Delete is a soft delete, this means that the operatingPlatform has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the operatingPlatform
     * @return OperatingPlatform
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteOperatingPlatformByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteOperatingPlatformByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an operatingPlatform identified by its GUID. Delete is a hard delete, this means that the operatingPlatform is really
     * deleted .
     *
     * @param  entityGuid GUID for the operatingPlatform
     * @return OperatingPlatform
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeOperatingPlatformByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeOperatingPlatformByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied operatingPlatform
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public OperatingPlatform addOperatingPlatformClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addOperatingPlatformClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         OperatingPlatform operatingPlatformClassifications = OperatingPlatformMapper.mapOmrsEntityDetailToOperatingPlatform(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified OperatingPlatform=" +  operatingPlatformClassifications);
         }
         return  operatingPlatformClassifications;
    }

    /**
     * Updates classifications to an existing operatingPlatform represented by a guid.
     * @param  entityGuid globally unique identifier for the operatingPlatform
     * @return classification for the given operatingPlatform guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public OperatingPlatform updateOperatingPlatformClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateOperatingPlatformClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           OperatingPlatform  operatingPlatformClassifications = OperatingPlatformMapper.mapOmrsEntityDetailToOperatingPlatform(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  operatingPlatformClassifications;
    }

    /**
     * Deletes a given classification from an existing operatingPlatform represented by a guid.
     * @param entityGuid  globally unique identifier for the operatingPlatform
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public OperatingPlatform deleteOperatingPlatformClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteOperatingPlatformClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       OperatingPlatform declassifiedOperatingPlatform =  OperatingPlatformMapper.mapOmrsEntityDetailToOperatingPlatform(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedOperatingPlatform;
    }

    /**
      * Get the relationships associated with entity operatingPlatform represented by a guid.
      * @param entityGuid  globally unique identifier for the operatingPlatform
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getOperatingPlatformRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getOperatingPlatformRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an governancePolicy given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the governancePolicies relationships.
     * @param entityGuid GUID for the entity
     * @return GovernancePolicy
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public GovernancePolicy getGovernancePolicyById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getGovernancePolicyById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        GovernancePolicy gotgovernancePolicy = GovernancePolicyMapper.mapOmrsEntityDetailToGovernancePolicy(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotgovernancePolicy );
        }
        return gotgovernancePolicy;

    }
    /**
     * Create new governancePolicy.
     * @param governancePolicy
     * @return GovernancePolicy
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public GovernancePolicy createGovernancePolicy(String userId,GovernancePolicy governancePolicy)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createGovernancePolicyById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("GovernancePolicy");
        if (constraint!=null) {
             constraint.preCreate(governancePolicy);
        }

        EntityDetail entityDetail = GovernancePolicyMapper.mapGovernancePolicyToOmrsEntityDetail(governancePolicy);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        GovernancePolicy createdGovernancePolicy =  GovernancePolicyMapper.mapOmrsEntityDetailToGovernancePolicy(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created GovernancePolicy="+ createdGovernancePolicy );
        }
        return createdGovernancePolicy;
    }
    /**
     * Update governancePolicy 
     * @param governancePolicy
     * @return GovernancePolicy
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public GovernancePolicy updateGovernancePolicy(String userId, GovernancePolicy governancePolicy)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateGovernancePolicyById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = GovernancePolicyMapper.mapGovernancePolicyToOmrsEntityDetail(governancePolicy);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            GovernancePolicy updatedGovernancePolicy =  GovernancePolicyMapper.mapOmrsEntityDetailToGovernancePolicy(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated GovernancePolicy="+ updatedGovernancePolicy );
            }
            return updatedGovernancePolicy;
        }

    /**
     * Delete an governancePolicy identified by its GUID. Delete is a soft delete, this means that the governancePolicy has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the governancePolicy
     * @return GovernancePolicy
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteGovernancePolicyByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteGovernancePolicyByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an governancePolicy identified by its GUID. Delete is a hard delete, this means that the governancePolicy is really
     * deleted .
     *
     * @param  entityGuid GUID for the governancePolicy
     * @return GovernancePolicy
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeGovernancePolicyByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeGovernancePolicyByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied governancePolicy
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public GovernancePolicy addGovernancePolicyClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addGovernancePolicyClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         GovernancePolicy governancePolicyClassifications = GovernancePolicyMapper.mapOmrsEntityDetailToGovernancePolicy(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified GovernancePolicy=" +  governancePolicyClassifications);
         }
         return  governancePolicyClassifications;
    }

    /**
     * Updates classifications to an existing governancePolicy represented by a guid.
     * @param  entityGuid globally unique identifier for the governancePolicy
     * @return classification for the given governancePolicy guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GovernancePolicy updateGovernancePolicyClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateGovernancePolicyClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           GovernancePolicy  governancePolicyClassifications = GovernancePolicyMapper.mapOmrsEntityDetailToGovernancePolicy(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  governancePolicyClassifications;
    }

    /**
     * Deletes a given classification from an existing governancePolicy represented by a guid.
     * @param entityGuid  globally unique identifier for the governancePolicy
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GovernancePolicy deleteGovernancePolicyClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteGovernancePolicyClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       GovernancePolicy declassifiedGovernancePolicy =  GovernancePolicyMapper.mapOmrsEntityDetailToGovernancePolicy(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedGovernancePolicy;
    }

    /**
      * Get the relationships associated with entity governancePolicy represented by a guid.
      * @param entityGuid  globally unique identifier for the governancePolicy
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getGovernancePolicyRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getGovernancePolicyRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an derivedSchemaAttribute given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the derivedSchemaAttributes relationships.
     * @param entityGuid GUID for the entity
     * @return DerivedSchemaAttribute
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public DerivedSchemaAttribute getDerivedSchemaAttributeById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getDerivedSchemaAttributeById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        DerivedSchemaAttribute gotderivedSchemaAttribute = DerivedSchemaAttributeMapper.mapOmrsEntityDetailToDerivedSchemaAttribute(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotderivedSchemaAttribute );
        }
        return gotderivedSchemaAttribute;

    }
    /**
     * Create new derivedSchemaAttribute.
     * @param derivedSchemaAttribute
     * @return DerivedSchemaAttribute
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public DerivedSchemaAttribute createDerivedSchemaAttribute(String userId,DerivedSchemaAttribute derivedSchemaAttribute)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createDerivedSchemaAttributeById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("DerivedSchemaAttribute");
        if (constraint!=null) {
             constraint.preCreate(derivedSchemaAttribute);
        }

        EntityDetail entityDetail = DerivedSchemaAttributeMapper.mapDerivedSchemaAttributeToOmrsEntityDetail(derivedSchemaAttribute);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        DerivedSchemaAttribute createdDerivedSchemaAttribute =  DerivedSchemaAttributeMapper.mapOmrsEntityDetailToDerivedSchemaAttribute(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created DerivedSchemaAttribute="+ createdDerivedSchemaAttribute );
        }
        return createdDerivedSchemaAttribute;
    }
    /**
     * Update derivedSchemaAttribute 
     * @param derivedSchemaAttribute
     * @return DerivedSchemaAttribute
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public DerivedSchemaAttribute updateDerivedSchemaAttribute(String userId, DerivedSchemaAttribute derivedSchemaAttribute)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateDerivedSchemaAttributeById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = DerivedSchemaAttributeMapper.mapDerivedSchemaAttributeToOmrsEntityDetail(derivedSchemaAttribute);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            DerivedSchemaAttribute updatedDerivedSchemaAttribute =  DerivedSchemaAttributeMapper.mapOmrsEntityDetailToDerivedSchemaAttribute(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated DerivedSchemaAttribute="+ updatedDerivedSchemaAttribute );
            }
            return updatedDerivedSchemaAttribute;
        }

    /**
     * Delete an derivedSchemaAttribute identified by its GUID. Delete is a soft delete, this means that the derivedSchemaAttribute has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the derivedSchemaAttribute
     * @return DerivedSchemaAttribute
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteDerivedSchemaAttributeByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteDerivedSchemaAttributeByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an derivedSchemaAttribute identified by its GUID. Delete is a hard delete, this means that the derivedSchemaAttribute is really
     * deleted .
     *
     * @param  entityGuid GUID for the derivedSchemaAttribute
     * @return DerivedSchemaAttribute
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeDerivedSchemaAttributeByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeDerivedSchemaAttributeByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied derivedSchemaAttribute
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public DerivedSchemaAttribute addDerivedSchemaAttributeClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addDerivedSchemaAttributeClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         DerivedSchemaAttribute derivedSchemaAttributeClassifications = DerivedSchemaAttributeMapper.mapOmrsEntityDetailToDerivedSchemaAttribute(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified DerivedSchemaAttribute=" +  derivedSchemaAttributeClassifications);
         }
         return  derivedSchemaAttributeClassifications;
    }

    /**
     * Updates classifications to an existing derivedSchemaAttribute represented by a guid.
     * @param  entityGuid globally unique identifier for the derivedSchemaAttribute
     * @return classification for the given derivedSchemaAttribute guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public DerivedSchemaAttribute updateDerivedSchemaAttributeClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateDerivedSchemaAttributeClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           DerivedSchemaAttribute  derivedSchemaAttributeClassifications = DerivedSchemaAttributeMapper.mapOmrsEntityDetailToDerivedSchemaAttribute(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  derivedSchemaAttributeClassifications;
    }

    /**
     * Deletes a given classification from an existing derivedSchemaAttribute represented by a guid.
     * @param entityGuid  globally unique identifier for the derivedSchemaAttribute
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public DerivedSchemaAttribute deleteDerivedSchemaAttributeClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteDerivedSchemaAttributeClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       DerivedSchemaAttribute declassifiedDerivedSchemaAttribute =  DerivedSchemaAttributeMapper.mapOmrsEntityDetailToDerivedSchemaAttribute(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedDerivedSchemaAttribute;
    }

    /**
      * Get the relationships associated with entity derivedSchemaAttribute represented by a guid.
      * @param entityGuid  globally unique identifier for the derivedSchemaAttribute
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getDerivedSchemaAttributeRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getDerivedSchemaAttributeRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an process given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the processes relationships.
     * @param entityGuid GUID for the entity
     * @return Process
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public Process getProcessById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getProcessById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        Process gotprocess = ProcessMapper.mapOmrsEntityDetailToProcess(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotprocess );
        }
        return gotprocess;

    }
    /**
     * Create new process.
     * @param process
     * @return Process
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public Process createProcess(String userId,Process process)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createProcessById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("Process");
        if (constraint!=null) {
             constraint.preCreate(process);
        }

        EntityDetail entityDetail = ProcessMapper.mapProcessToOmrsEntityDetail(process);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        Process createdProcess =  ProcessMapper.mapOmrsEntityDetailToProcess(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created Process="+ createdProcess );
        }
        return createdProcess;
    }
    /**
     * Update process 
     * @param process
     * @return Process
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public Process updateProcess(String userId, Process process)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateProcessById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = ProcessMapper.mapProcessToOmrsEntityDetail(process);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            Process updatedProcess =  ProcessMapper.mapOmrsEntityDetailToProcess(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated Process="+ updatedProcess );
            }
            return updatedProcess;
        }

    /**
     * Delete an process identified by its GUID. Delete is a soft delete, this means that the process has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the process
     * @return Process
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteProcessByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteProcessByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an process identified by its GUID. Delete is a hard delete, this means that the process is really
     * deleted .
     *
     * @param  entityGuid GUID for the process
     * @return Process
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeProcessByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeProcessByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied process
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public Process addProcessClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addProcessClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         Process processClassifications = ProcessMapper.mapOmrsEntityDetailToProcess(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified Process=" +  processClassifications);
         }
         return  processClassifications;
    }

    /**
     * Updates classifications to an existing process represented by a guid.
     * @param  entityGuid globally unique identifier for the process
     * @return classification for the given process guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Process updateProcessClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateProcessClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           Process  processClassifications = ProcessMapper.mapOmrsEntityDetailToProcess(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  processClassifications;
    }

    /**
     * Deletes a given classification from an existing process represented by a guid.
     * @param entityGuid  globally unique identifier for the process
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Process deleteProcessClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteProcessClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       Process declassifiedProcess =  ProcessMapper.mapOmrsEntityDetailToProcess(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedProcess;
    }

    /**
      * Get the relationships associated with entity process represented by a guid.
      * @param entityGuid  globally unique identifier for the process
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getProcessRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getProcessRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an mapSchemaType given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the mapSchemaTypes relationships.
     * @param entityGuid GUID for the entity
     * @return MapSchemaType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public MapSchemaType getMapSchemaTypeById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getMapSchemaTypeById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        MapSchemaType gotmapSchemaType = MapSchemaTypeMapper.mapOmrsEntityDetailToMapSchemaType(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotmapSchemaType );
        }
        return gotmapSchemaType;

    }
    /**
     * Create new mapSchemaType.
     * @param mapSchemaType
     * @return MapSchemaType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public MapSchemaType createMapSchemaType(String userId,MapSchemaType mapSchemaType)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createMapSchemaTypeById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("MapSchemaType");
        if (constraint!=null) {
             constraint.preCreate(mapSchemaType);
        }

        EntityDetail entityDetail = MapSchemaTypeMapper.mapMapSchemaTypeToOmrsEntityDetail(mapSchemaType);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        MapSchemaType createdMapSchemaType =  MapSchemaTypeMapper.mapOmrsEntityDetailToMapSchemaType(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created MapSchemaType="+ createdMapSchemaType );
        }
        return createdMapSchemaType;
    }
    /**
     * Update mapSchemaType 
     * @param mapSchemaType
     * @return MapSchemaType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public MapSchemaType updateMapSchemaType(String userId, MapSchemaType mapSchemaType)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateMapSchemaTypeById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = MapSchemaTypeMapper.mapMapSchemaTypeToOmrsEntityDetail(mapSchemaType);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            MapSchemaType updatedMapSchemaType =  MapSchemaTypeMapper.mapOmrsEntityDetailToMapSchemaType(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated MapSchemaType="+ updatedMapSchemaType );
            }
            return updatedMapSchemaType;
        }

    /**
     * Delete an mapSchemaType identified by its GUID. Delete is a soft delete, this means that the mapSchemaType has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the mapSchemaType
     * @return MapSchemaType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteMapSchemaTypeByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteMapSchemaTypeByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an mapSchemaType identified by its GUID. Delete is a hard delete, this means that the mapSchemaType is really
     * deleted .
     *
     * @param  entityGuid GUID for the mapSchemaType
     * @return MapSchemaType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeMapSchemaTypeByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeMapSchemaTypeByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied mapSchemaType
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public MapSchemaType addMapSchemaTypeClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addMapSchemaTypeClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         MapSchemaType mapSchemaTypeClassifications = MapSchemaTypeMapper.mapOmrsEntityDetailToMapSchemaType(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified MapSchemaType=" +  mapSchemaTypeClassifications);
         }
         return  mapSchemaTypeClassifications;
    }

    /**
     * Updates classifications to an existing mapSchemaType represented by a guid.
     * @param  entityGuid globally unique identifier for the mapSchemaType
     * @return classification for the given mapSchemaType guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public MapSchemaType updateMapSchemaTypeClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateMapSchemaTypeClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           MapSchemaType  mapSchemaTypeClassifications = MapSchemaTypeMapper.mapOmrsEntityDetailToMapSchemaType(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  mapSchemaTypeClassifications;
    }

    /**
     * Deletes a given classification from an existing mapSchemaType represented by a guid.
     * @param entityGuid  globally unique identifier for the mapSchemaType
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public MapSchemaType deleteMapSchemaTypeClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteMapSchemaTypeClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       MapSchemaType declassifiedMapSchemaType =  MapSchemaTypeMapper.mapOmrsEntityDetailToMapSchemaType(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedMapSchemaType;
    }

    /**
      * Get the relationships associated with entity mapSchemaType represented by a guid.
      * @param entityGuid  globally unique identifier for the mapSchemaType
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getMapSchemaTypeRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getMapSchemaTypeRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an deployedSoftwareComponent given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the deployedSoftwareComponents relationships.
     * @param entityGuid GUID for the entity
     * @return DeployedSoftwareComponent
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public DeployedSoftwareComponent getDeployedSoftwareComponentById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getDeployedSoftwareComponentById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        DeployedSoftwareComponent gotdeployedSoftwareComponent = DeployedSoftwareComponentMapper.mapOmrsEntityDetailToDeployedSoftwareComponent(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotdeployedSoftwareComponent );
        }
        return gotdeployedSoftwareComponent;

    }
    /**
     * Create new deployedSoftwareComponent.
     * @param deployedSoftwareComponent
     * @return DeployedSoftwareComponent
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public DeployedSoftwareComponent createDeployedSoftwareComponent(String userId,DeployedSoftwareComponent deployedSoftwareComponent)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createDeployedSoftwareComponentById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("DeployedSoftwareComponent");
        if (constraint!=null) {
             constraint.preCreate(deployedSoftwareComponent);
        }

        EntityDetail entityDetail = DeployedSoftwareComponentMapper.mapDeployedSoftwareComponentToOmrsEntityDetail(deployedSoftwareComponent);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        DeployedSoftwareComponent createdDeployedSoftwareComponent =  DeployedSoftwareComponentMapper.mapOmrsEntityDetailToDeployedSoftwareComponent(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created DeployedSoftwareComponent="+ createdDeployedSoftwareComponent );
        }
        return createdDeployedSoftwareComponent;
    }
    /**
     * Update deployedSoftwareComponent 
     * @param deployedSoftwareComponent
     * @return DeployedSoftwareComponent
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public DeployedSoftwareComponent updateDeployedSoftwareComponent(String userId, DeployedSoftwareComponent deployedSoftwareComponent)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateDeployedSoftwareComponentById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = DeployedSoftwareComponentMapper.mapDeployedSoftwareComponentToOmrsEntityDetail(deployedSoftwareComponent);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            DeployedSoftwareComponent updatedDeployedSoftwareComponent =  DeployedSoftwareComponentMapper.mapOmrsEntityDetailToDeployedSoftwareComponent(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated DeployedSoftwareComponent="+ updatedDeployedSoftwareComponent );
            }
            return updatedDeployedSoftwareComponent;
        }

    /**
     * Delete an deployedSoftwareComponent identified by its GUID. Delete is a soft delete, this means that the deployedSoftwareComponent has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the deployedSoftwareComponent
     * @return DeployedSoftwareComponent
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteDeployedSoftwareComponentByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteDeployedSoftwareComponentByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an deployedSoftwareComponent identified by its GUID. Delete is a hard delete, this means that the deployedSoftwareComponent is really
     * deleted .
     *
     * @param  entityGuid GUID for the deployedSoftwareComponent
     * @return DeployedSoftwareComponent
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeDeployedSoftwareComponentByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeDeployedSoftwareComponentByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied deployedSoftwareComponent
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public DeployedSoftwareComponent addDeployedSoftwareComponentClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addDeployedSoftwareComponentClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         DeployedSoftwareComponent deployedSoftwareComponentClassifications = DeployedSoftwareComponentMapper.mapOmrsEntityDetailToDeployedSoftwareComponent(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified DeployedSoftwareComponent=" +  deployedSoftwareComponentClassifications);
         }
         return  deployedSoftwareComponentClassifications;
    }

    /**
     * Updates classifications to an existing deployedSoftwareComponent represented by a guid.
     * @param  entityGuid globally unique identifier for the deployedSoftwareComponent
     * @return classification for the given deployedSoftwareComponent guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public DeployedSoftwareComponent updateDeployedSoftwareComponentClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateDeployedSoftwareComponentClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           DeployedSoftwareComponent  deployedSoftwareComponentClassifications = DeployedSoftwareComponentMapper.mapOmrsEntityDetailToDeployedSoftwareComponent(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  deployedSoftwareComponentClassifications;
    }

    /**
     * Deletes a given classification from an existing deployedSoftwareComponent represented by a guid.
     * @param entityGuid  globally unique identifier for the deployedSoftwareComponent
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public DeployedSoftwareComponent deleteDeployedSoftwareComponentClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteDeployedSoftwareComponentClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       DeployedSoftwareComponent declassifiedDeployedSoftwareComponent =  DeployedSoftwareComponentMapper.mapOmrsEntityDetailToDeployedSoftwareComponent(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedDeployedSoftwareComponent;
    }

    /**
      * Get the relationships associated with entity deployedSoftwareComponent represented by a guid.
      * @param entityGuid  globally unique identifier for the deployedSoftwareComponent
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getDeployedSoftwareComponentRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getDeployedSoftwareComponentRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an schemaType given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the schemaTypes relationships.
     * @param entityGuid GUID for the entity
     * @return SchemaType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public SchemaType getSchemaTypeById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getSchemaTypeById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        SchemaType gotschemaType = SchemaTypeMapper.mapOmrsEntityDetailToSchemaType(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotschemaType );
        }
        return gotschemaType;

    }
    /**
     * Create new schemaType.
     * @param schemaType
     * @return SchemaType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public SchemaType createSchemaType(String userId,SchemaType schemaType)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createSchemaTypeById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("SchemaType");
        if (constraint!=null) {
             constraint.preCreate(schemaType);
        }

        EntityDetail entityDetail = SchemaTypeMapper.mapSchemaTypeToOmrsEntityDetail(schemaType);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        SchemaType createdSchemaType =  SchemaTypeMapper.mapOmrsEntityDetailToSchemaType(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created SchemaType="+ createdSchemaType );
        }
        return createdSchemaType;
    }
    /**
     * Update schemaType 
     * @param schemaType
     * @return SchemaType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public SchemaType updateSchemaType(String userId, SchemaType schemaType)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateSchemaTypeById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = SchemaTypeMapper.mapSchemaTypeToOmrsEntityDetail(schemaType);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            SchemaType updatedSchemaType =  SchemaTypeMapper.mapOmrsEntityDetailToSchemaType(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated SchemaType="+ updatedSchemaType );
            }
            return updatedSchemaType;
        }

    /**
     * Delete an schemaType identified by its GUID. Delete is a soft delete, this means that the schemaType has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the schemaType
     * @return SchemaType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteSchemaTypeByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteSchemaTypeByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an schemaType identified by its GUID. Delete is a hard delete, this means that the schemaType is really
     * deleted .
     *
     * @param  entityGuid GUID for the schemaType
     * @return SchemaType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeSchemaTypeByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeSchemaTypeByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied schemaType
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public SchemaType addSchemaTypeClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addSchemaTypeClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         SchemaType schemaTypeClassifications = SchemaTypeMapper.mapOmrsEntityDetailToSchemaType(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified SchemaType=" +  schemaTypeClassifications);
         }
         return  schemaTypeClassifications;
    }

    /**
     * Updates classifications to an existing schemaType represented by a guid.
     * @param  entityGuid globally unique identifier for the schemaType
     * @return classification for the given schemaType guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public SchemaType updateSchemaTypeClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateSchemaTypeClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           SchemaType  schemaTypeClassifications = SchemaTypeMapper.mapOmrsEntityDetailToSchemaType(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  schemaTypeClassifications;
    }

    /**
     * Deletes a given classification from an existing schemaType represented by a guid.
     * @param entityGuid  globally unique identifier for the schemaType
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public SchemaType deleteSchemaTypeClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteSchemaTypeClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       SchemaType declassifiedSchemaType =  SchemaTypeMapper.mapOmrsEntityDetailToSchemaType(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedSchemaType;
    }

    /**
      * Get the relationships associated with entity schemaType represented by a guid.
      * @param entityGuid  globally unique identifier for the schemaType
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getSchemaTypeRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getSchemaTypeRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an dataFile given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the dataFiles relationships.
     * @param entityGuid GUID for the entity
     * @return DataFile
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public DataFile getDataFileById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getDataFileById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        DataFile gotdataFile = DataFileMapper.mapOmrsEntityDetailToDataFile(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotdataFile );
        }
        return gotdataFile;

    }
    /**
     * Create new dataFile.
     * @param dataFile
     * @return DataFile
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public DataFile createDataFile(String userId,DataFile dataFile)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createDataFileById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("DataFile");
        if (constraint!=null) {
             constraint.preCreate(dataFile);
        }

        EntityDetail entityDetail = DataFileMapper.mapDataFileToOmrsEntityDetail(dataFile);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        DataFile createdDataFile =  DataFileMapper.mapOmrsEntityDetailToDataFile(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created DataFile="+ createdDataFile );
        }
        return createdDataFile;
    }
    /**
     * Update dataFile 
     * @param dataFile
     * @return DataFile
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public DataFile updateDataFile(String userId, DataFile dataFile)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateDataFileById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = DataFileMapper.mapDataFileToOmrsEntityDetail(dataFile);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            DataFile updatedDataFile =  DataFileMapper.mapOmrsEntityDetailToDataFile(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated DataFile="+ updatedDataFile );
            }
            return updatedDataFile;
        }

    /**
     * Delete an dataFile identified by its GUID. Delete is a soft delete, this means that the dataFile has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the dataFile
     * @return DataFile
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteDataFileByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteDataFileByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an dataFile identified by its GUID. Delete is a hard delete, this means that the dataFile is really
     * deleted .
     *
     * @param  entityGuid GUID for the dataFile
     * @return DataFile
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeDataFileByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeDataFileByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied dataFile
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public DataFile addDataFileClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addDataFileClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         DataFile dataFileClassifications = DataFileMapper.mapOmrsEntityDetailToDataFile(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified DataFile=" +  dataFileClassifications);
         }
         return  dataFileClassifications;
    }

    /**
     * Updates classifications to an existing dataFile represented by a guid.
     * @param  entityGuid globally unique identifier for the dataFile
     * @return classification for the given dataFile guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public DataFile updateDataFileClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateDataFileClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           DataFile  dataFileClassifications = DataFileMapper.mapOmrsEntityDetailToDataFile(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  dataFileClassifications;
    }

    /**
     * Deletes a given classification from an existing dataFile represented by a guid.
     * @param entityGuid  globally unique identifier for the dataFile
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public DataFile deleteDataFileClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteDataFileClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       DataFile declassifiedDataFile =  DataFileMapper.mapOmrsEntityDetailToDataFile(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedDataFile;
    }

    /**
      * Get the relationships associated with entity dataFile represented by a guid.
      * @param entityGuid  globally unique identifier for the dataFile
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getDataFileRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getDataFileRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an like given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the likes relationships.
     * @param entityGuid GUID for the entity
     * @return Like
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public Like getLikeById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getLikeById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        Like gotlike = LikeMapper.mapOmrsEntityDetailToLike(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotlike );
        }
        return gotlike;

    }
    /**
     * Create new like.
     * @param like
     * @return Like
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public Like createLike(String userId,Like like)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createLikeById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("Like");
        if (constraint!=null) {
             constraint.preCreate(like);
        }

        EntityDetail entityDetail = LikeMapper.mapLikeToOmrsEntityDetail(like);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        Like createdLike =  LikeMapper.mapOmrsEntityDetailToLike(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created Like="+ createdLike );
        }
        return createdLike;
    }
    /**
     * Update like 
     * @param like
     * @return Like
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public Like updateLike(String userId, Like like)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateLikeById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = LikeMapper.mapLikeToOmrsEntityDetail(like);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            Like updatedLike =  LikeMapper.mapOmrsEntityDetailToLike(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated Like="+ updatedLike );
            }
            return updatedLike;
        }

    /**
     * Delete an like identified by its GUID. Delete is a soft delete, this means that the like has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the like
     * @return Like
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteLikeByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteLikeByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an like identified by its GUID. Delete is a hard delete, this means that the like is really
     * deleted .
     *
     * @param  entityGuid GUID for the like
     * @return Like
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeLikeByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeLikeByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied like
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public Like addLikeClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addLikeClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         Like likeClassifications = LikeMapper.mapOmrsEntityDetailToLike(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified Like=" +  likeClassifications);
         }
         return  likeClassifications;
    }

    /**
     * Updates classifications to an existing like represented by a guid.
     * @param  entityGuid globally unique identifier for the like
     * @return classification for the given like guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Like updateLikeClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateLikeClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           Like  likeClassifications = LikeMapper.mapOmrsEntityDetailToLike(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  likeClassifications;
    }

    /**
     * Deletes a given classification from an existing like represented by a guid.
     * @param entityGuid  globally unique identifier for the like
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Like deleteLikeClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteLikeClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       Like declassifiedLike =  LikeMapper.mapOmrsEntityDetailToLike(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedLike;
    }

    /**
      * Get the relationships associated with entity like represented by a guid.
      * @param entityGuid  globally unique identifier for the like
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getLikeRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getLikeRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an referenceable given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the referenceables relationships.
     * @param entityGuid GUID for the entity
     * @return Referenceable
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public Referenceable getReferenceableById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getReferenceableById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        Referenceable gotreferenceable = ReferenceableMapper.mapOmrsEntityDetailToReferenceable(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotreferenceable );
        }
        return gotreferenceable;

    }
    /**
     * Create new referenceable.
     * @param referenceable
     * @return Referenceable
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public Referenceable createReferenceable(String userId,Referenceable referenceable)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createReferenceableById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("Referenceable");
        if (constraint!=null) {
             constraint.preCreate(referenceable);
        }

        EntityDetail entityDetail = ReferenceableMapper.mapReferenceableToOmrsEntityDetail(referenceable);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        Referenceable createdReferenceable =  ReferenceableMapper.mapOmrsEntityDetailToReferenceable(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created Referenceable="+ createdReferenceable );
        }
        return createdReferenceable;
    }
    /**
     * Update referenceable 
     * @param referenceable
     * @return Referenceable
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public Referenceable updateReferenceable(String userId, Referenceable referenceable)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateReferenceableById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = ReferenceableMapper.mapReferenceableToOmrsEntityDetail(referenceable);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            Referenceable updatedReferenceable =  ReferenceableMapper.mapOmrsEntityDetailToReferenceable(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated Referenceable="+ updatedReferenceable );
            }
            return updatedReferenceable;
        }

    /**
     * Delete an referenceable identified by its GUID. Delete is a soft delete, this means that the referenceable has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the referenceable
     * @return Referenceable
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteReferenceableByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteReferenceableByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an referenceable identified by its GUID. Delete is a hard delete, this means that the referenceable is really
     * deleted .
     *
     * @param  entityGuid GUID for the referenceable
     * @return Referenceable
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeReferenceableByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeReferenceableByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied referenceable
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public Referenceable addReferenceableClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addReferenceableClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         Referenceable referenceableClassifications = ReferenceableMapper.mapOmrsEntityDetailToReferenceable(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified Referenceable=" +  referenceableClassifications);
         }
         return  referenceableClassifications;
    }

    /**
     * Updates classifications to an existing referenceable represented by a guid.
     * @param  entityGuid globally unique identifier for the referenceable
     * @return classification for the given referenceable guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Referenceable updateReferenceableClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateReferenceableClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           Referenceable  referenceableClassifications = ReferenceableMapper.mapOmrsEntityDetailToReferenceable(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  referenceableClassifications;
    }

    /**
     * Deletes a given classification from an existing referenceable represented by a guid.
     * @param entityGuid  globally unique identifier for the referenceable
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Referenceable deleteReferenceableClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteReferenceableClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       Referenceable declassifiedReferenceable =  ReferenceableMapper.mapOmrsEntityDetailToReferenceable(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedReferenceable;
    }

    /**
      * Get the relationships associated with entity referenceable represented by a guid.
      * @param entityGuid  globally unique identifier for the referenceable
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getReferenceableRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getReferenceableRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an externalReference given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the externalReferences relationships.
     * @param entityGuid GUID for the entity
     * @return ExternalReference
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public ExternalReference getExternalReferenceById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getExternalReferenceById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        ExternalReference gotexternalReference = ExternalReferenceMapper.mapOmrsEntityDetailToExternalReference(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotexternalReference );
        }
        return gotexternalReference;

    }
    /**
     * Create new externalReference.
     * @param externalReference
     * @return ExternalReference
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public ExternalReference createExternalReference(String userId,ExternalReference externalReference)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createExternalReferenceById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("ExternalReference");
        if (constraint!=null) {
             constraint.preCreate(externalReference);
        }

        EntityDetail entityDetail = ExternalReferenceMapper.mapExternalReferenceToOmrsEntityDetail(externalReference);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        ExternalReference createdExternalReference =  ExternalReferenceMapper.mapOmrsEntityDetailToExternalReference(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created ExternalReference="+ createdExternalReference );
        }
        return createdExternalReference;
    }
    /**
     * Update externalReference 
     * @param externalReference
     * @return ExternalReference
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public ExternalReference updateExternalReference(String userId, ExternalReference externalReference)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateExternalReferenceById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = ExternalReferenceMapper.mapExternalReferenceToOmrsEntityDetail(externalReference);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            ExternalReference updatedExternalReference =  ExternalReferenceMapper.mapOmrsEntityDetailToExternalReference(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated ExternalReference="+ updatedExternalReference );
            }
            return updatedExternalReference;
        }

    /**
     * Delete an externalReference identified by its GUID. Delete is a soft delete, this means that the externalReference has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the externalReference
     * @return ExternalReference
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteExternalReferenceByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteExternalReferenceByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an externalReference identified by its GUID. Delete is a hard delete, this means that the externalReference is really
     * deleted .
     *
     * @param  entityGuid GUID for the externalReference
     * @return ExternalReference
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeExternalReferenceByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeExternalReferenceByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied externalReference
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public ExternalReference addExternalReferenceClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addExternalReferenceClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         ExternalReference externalReferenceClassifications = ExternalReferenceMapper.mapOmrsEntityDetailToExternalReference(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified ExternalReference=" +  externalReferenceClassifications);
         }
         return  externalReferenceClassifications;
    }

    /**
     * Updates classifications to an existing externalReference represented by a guid.
     * @param  entityGuid globally unique identifier for the externalReference
     * @return classification for the given externalReference guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public ExternalReference updateExternalReferenceClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateExternalReferenceClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           ExternalReference  externalReferenceClassifications = ExternalReferenceMapper.mapOmrsEntityDetailToExternalReference(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  externalReferenceClassifications;
    }

    /**
     * Deletes a given classification from an existing externalReference represented by a guid.
     * @param entityGuid  globally unique identifier for the externalReference
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public ExternalReference deleteExternalReferenceClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteExternalReferenceClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       ExternalReference declassifiedExternalReference =  ExternalReferenceMapper.mapOmrsEntityDetailToExternalReference(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedExternalReference;
    }

    /**
      * Get the relationships associated with entity externalReference represented by a guid.
      * @param entityGuid  globally unique identifier for the externalReference
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getExternalReferenceRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getExternalReferenceRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an endpoint given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the endpoints relationships.
     * @param entityGuid GUID for the entity
     * @return Endpoint
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public Endpoint getEndpointById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getEndpointById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        Endpoint gotendpoint = EndpointMapper.mapOmrsEntityDetailToEndpoint(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotendpoint );
        }
        return gotendpoint;

    }
    /**
     * Create new endpoint.
     * @param endpoint
     * @return Endpoint
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public Endpoint createEndpoint(String userId,Endpoint endpoint)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createEndpointById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("Endpoint");
        if (constraint!=null) {
             constraint.preCreate(endpoint);
        }

        EntityDetail entityDetail = EndpointMapper.mapEndpointToOmrsEntityDetail(endpoint);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        Endpoint createdEndpoint =  EndpointMapper.mapOmrsEntityDetailToEndpoint(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created Endpoint="+ createdEndpoint );
        }
        return createdEndpoint;
    }
    /**
     * Update endpoint 
     * @param endpoint
     * @return Endpoint
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public Endpoint updateEndpoint(String userId, Endpoint endpoint)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateEndpointById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = EndpointMapper.mapEndpointToOmrsEntityDetail(endpoint);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            Endpoint updatedEndpoint =  EndpointMapper.mapOmrsEntityDetailToEndpoint(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated Endpoint="+ updatedEndpoint );
            }
            return updatedEndpoint;
        }

    /**
     * Delete an endpoint identified by its GUID. Delete is a soft delete, this means that the endpoint has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the endpoint
     * @return Endpoint
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteEndpointByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteEndpointByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an endpoint identified by its GUID. Delete is a hard delete, this means that the endpoint is really
     * deleted .
     *
     * @param  entityGuid GUID for the endpoint
     * @return Endpoint
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeEndpointByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeEndpointByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied endpoint
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public Endpoint addEndpointClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addEndpointClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         Endpoint endpointClassifications = EndpointMapper.mapOmrsEntityDetailToEndpoint(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified Endpoint=" +  endpointClassifications);
         }
         return  endpointClassifications;
    }

    /**
     * Updates classifications to an existing endpoint represented by a guid.
     * @param  entityGuid globally unique identifier for the endpoint
     * @return classification for the given endpoint guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Endpoint updateEndpointClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateEndpointClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           Endpoint  endpointClassifications = EndpointMapper.mapOmrsEntityDetailToEndpoint(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  endpointClassifications;
    }

    /**
     * Deletes a given classification from an existing endpoint represented by a guid.
     * @param entityGuid  globally unique identifier for the endpoint
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Endpoint deleteEndpointClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteEndpointClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       Endpoint declassifiedEndpoint =  EndpointMapper.mapOmrsEntityDetailToEndpoint(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedEndpoint;
    }

    /**
      * Get the relationships associated with entity endpoint represented by a guid.
      * @param entityGuid  globally unique identifier for the endpoint
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getEndpointRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getEndpointRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an contactDetails given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the contactDetailses relationships.
     * @param entityGuid GUID for the entity
     * @return ContactDetails
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public ContactDetails getContactDetailsById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getContactDetailsById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        ContactDetails gotcontactDetails = ContactDetailsMapper.mapOmrsEntityDetailToContactDetails(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotcontactDetails );
        }
        return gotcontactDetails;

    }
    /**
     * Create new contactDetails.
     * @param contactDetails
     * @return ContactDetails
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public ContactDetails createContactDetails(String userId,ContactDetails contactDetails)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createContactDetailsById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("ContactDetails");
        if (constraint!=null) {
             constraint.preCreate(contactDetails);
        }

        EntityDetail entityDetail = ContactDetailsMapper.mapContactDetailsToOmrsEntityDetail(contactDetails);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        ContactDetails createdContactDetails =  ContactDetailsMapper.mapOmrsEntityDetailToContactDetails(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created ContactDetails="+ createdContactDetails );
        }
        return createdContactDetails;
    }
    /**
     * Update contactDetails 
     * @param contactDetails
     * @return ContactDetails
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public ContactDetails updateContactDetails(String userId, ContactDetails contactDetails)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateContactDetailsById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = ContactDetailsMapper.mapContactDetailsToOmrsEntityDetail(contactDetails);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            ContactDetails updatedContactDetails =  ContactDetailsMapper.mapOmrsEntityDetailToContactDetails(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated ContactDetails="+ updatedContactDetails );
            }
            return updatedContactDetails;
        }

    /**
     * Delete an contactDetails identified by its GUID. Delete is a soft delete, this means that the contactDetails has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the contactDetails
     * @return ContactDetails
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteContactDetailsByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteContactDetailsByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an contactDetails identified by its GUID. Delete is a hard delete, this means that the contactDetails is really
     * deleted .
     *
     * @param  entityGuid GUID for the contactDetails
     * @return ContactDetails
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeContactDetailsByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeContactDetailsByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied contactDetails
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public ContactDetails addContactDetailsClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addContactDetailsClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         ContactDetails contactDetailsClassifications = ContactDetailsMapper.mapOmrsEntityDetailToContactDetails(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified ContactDetails=" +  contactDetailsClassifications);
         }
         return  contactDetailsClassifications;
    }

    /**
     * Updates classifications to an existing contactDetails represented by a guid.
     * @param  entityGuid globally unique identifier for the contactDetails
     * @return classification for the given contactDetails guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public ContactDetails updateContactDetailsClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateContactDetailsClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           ContactDetails  contactDetailsClassifications = ContactDetailsMapper.mapOmrsEntityDetailToContactDetails(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  contactDetailsClassifications;
    }

    /**
     * Deletes a given classification from an existing contactDetails represented by a guid.
     * @param entityGuid  globally unique identifier for the contactDetails
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public ContactDetails deleteContactDetailsClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteContactDetailsClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       ContactDetails declassifiedContactDetails =  ContactDetailsMapper.mapOmrsEntityDetailToContactDetails(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedContactDetails;
    }

    /**
      * Get the relationships associated with entity contactDetails represented by a guid.
      * @param entityGuid  globally unique identifier for the contactDetails
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getContactDetailsRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getContactDetailsRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an governanceDefinition given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the governanceDefinitions relationships.
     * @param entityGuid GUID for the entity
     * @return GovernanceDefinition
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public GovernanceDefinition getGovernanceDefinitionById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getGovernanceDefinitionById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        GovernanceDefinition gotgovernanceDefinition = GovernanceDefinitionMapper.mapOmrsEntityDetailToGovernanceDefinition(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotgovernanceDefinition );
        }
        return gotgovernanceDefinition;

    }
    /**
     * Create new governanceDefinition.
     * @param governanceDefinition
     * @return GovernanceDefinition
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public GovernanceDefinition createGovernanceDefinition(String userId,GovernanceDefinition governanceDefinition)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createGovernanceDefinitionById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("GovernanceDefinition");
        if (constraint!=null) {
             constraint.preCreate(governanceDefinition);
        }

        EntityDetail entityDetail = GovernanceDefinitionMapper.mapGovernanceDefinitionToOmrsEntityDetail(governanceDefinition);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        GovernanceDefinition createdGovernanceDefinition =  GovernanceDefinitionMapper.mapOmrsEntityDetailToGovernanceDefinition(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created GovernanceDefinition="+ createdGovernanceDefinition );
        }
        return createdGovernanceDefinition;
    }
    /**
     * Update governanceDefinition 
     * @param governanceDefinition
     * @return GovernanceDefinition
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public GovernanceDefinition updateGovernanceDefinition(String userId, GovernanceDefinition governanceDefinition)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateGovernanceDefinitionById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = GovernanceDefinitionMapper.mapGovernanceDefinitionToOmrsEntityDetail(governanceDefinition);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            GovernanceDefinition updatedGovernanceDefinition =  GovernanceDefinitionMapper.mapOmrsEntityDetailToGovernanceDefinition(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated GovernanceDefinition="+ updatedGovernanceDefinition );
            }
            return updatedGovernanceDefinition;
        }

    /**
     * Delete an governanceDefinition identified by its GUID. Delete is a soft delete, this means that the governanceDefinition has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the governanceDefinition
     * @return GovernanceDefinition
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteGovernanceDefinitionByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteGovernanceDefinitionByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an governanceDefinition identified by its GUID. Delete is a hard delete, this means that the governanceDefinition is really
     * deleted .
     *
     * @param  entityGuid GUID for the governanceDefinition
     * @return GovernanceDefinition
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeGovernanceDefinitionByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeGovernanceDefinitionByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied governanceDefinition
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public GovernanceDefinition addGovernanceDefinitionClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addGovernanceDefinitionClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         GovernanceDefinition governanceDefinitionClassifications = GovernanceDefinitionMapper.mapOmrsEntityDetailToGovernanceDefinition(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified GovernanceDefinition=" +  governanceDefinitionClassifications);
         }
         return  governanceDefinitionClassifications;
    }

    /**
     * Updates classifications to an existing governanceDefinition represented by a guid.
     * @param  entityGuid globally unique identifier for the governanceDefinition
     * @return classification for the given governanceDefinition guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GovernanceDefinition updateGovernanceDefinitionClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateGovernanceDefinitionClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           GovernanceDefinition  governanceDefinitionClassifications = GovernanceDefinitionMapper.mapOmrsEntityDetailToGovernanceDefinition(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  governanceDefinitionClassifications;
    }

    /**
     * Deletes a given classification from an existing governanceDefinition represented by a guid.
     * @param entityGuid  globally unique identifier for the governanceDefinition
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GovernanceDefinition deleteGovernanceDefinitionClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteGovernanceDefinitionClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       GovernanceDefinition declassifiedGovernanceDefinition =  GovernanceDefinitionMapper.mapOmrsEntityDetailToGovernanceDefinition(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedGovernanceDefinition;
    }

    /**
      * Get the relationships associated with entity governanceDefinition represented by a guid.
      * @param entityGuid  globally unique identifier for the governanceDefinition
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getGovernanceDefinitionRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getGovernanceDefinitionRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an fileFolder given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the fileFolders relationships.
     * @param entityGuid GUID for the entity
     * @return FileFolder
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public FileFolder getFileFolderById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getFileFolderById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        FileFolder gotfileFolder = FileFolderMapper.mapOmrsEntityDetailToFileFolder(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotfileFolder );
        }
        return gotfileFolder;

    }
    /**
     * Create new fileFolder.
     * @param fileFolder
     * @return FileFolder
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public FileFolder createFileFolder(String userId,FileFolder fileFolder)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createFileFolderById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("FileFolder");
        if (constraint!=null) {
             constraint.preCreate(fileFolder);
        }

        EntityDetail entityDetail = FileFolderMapper.mapFileFolderToOmrsEntityDetail(fileFolder);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        FileFolder createdFileFolder =  FileFolderMapper.mapOmrsEntityDetailToFileFolder(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created FileFolder="+ createdFileFolder );
        }
        return createdFileFolder;
    }
    /**
     * Update fileFolder 
     * @param fileFolder
     * @return FileFolder
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public FileFolder updateFileFolder(String userId, FileFolder fileFolder)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateFileFolderById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = FileFolderMapper.mapFileFolderToOmrsEntityDetail(fileFolder);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            FileFolder updatedFileFolder =  FileFolderMapper.mapOmrsEntityDetailToFileFolder(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated FileFolder="+ updatedFileFolder );
            }
            return updatedFileFolder;
        }

    /**
     * Delete an fileFolder identified by its GUID. Delete is a soft delete, this means that the fileFolder has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the fileFolder
     * @return FileFolder
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteFileFolderByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteFileFolderByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an fileFolder identified by its GUID. Delete is a hard delete, this means that the fileFolder is really
     * deleted .
     *
     * @param  entityGuid GUID for the fileFolder
     * @return FileFolder
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeFileFolderByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeFileFolderByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied fileFolder
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public FileFolder addFileFolderClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addFileFolderClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         FileFolder fileFolderClassifications = FileFolderMapper.mapOmrsEntityDetailToFileFolder(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified FileFolder=" +  fileFolderClassifications);
         }
         return  fileFolderClassifications;
    }

    /**
     * Updates classifications to an existing fileFolder represented by a guid.
     * @param  entityGuid globally unique identifier for the fileFolder
     * @return classification for the given fileFolder guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public FileFolder updateFileFolderClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateFileFolderClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           FileFolder  fileFolderClassifications = FileFolderMapper.mapOmrsEntityDetailToFileFolder(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  fileFolderClassifications;
    }

    /**
     * Deletes a given classification from an existing fileFolder represented by a guid.
     * @param entityGuid  globally unique identifier for the fileFolder
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public FileFolder deleteFileFolderClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteFileFolderClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       FileFolder declassifiedFileFolder =  FileFolderMapper.mapOmrsEntityDetailToFileFolder(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedFileFolder;
    }

    /**
      * Get the relationships associated with entity fileFolder represented by a guid.
      * @param entityGuid  globally unique identifier for the fileFolder
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getFileFolderRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getFileFolderRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an network given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the networks relationships.
     * @param entityGuid GUID for the entity
     * @return Network
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public Network getNetworkById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getNetworkById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        Network gotnetwork = NetworkMapper.mapOmrsEntityDetailToNetwork(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotnetwork );
        }
        return gotnetwork;

    }
    /**
     * Create new network.
     * @param network
     * @return Network
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public Network createNetwork(String userId,Network network)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createNetworkById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("Network");
        if (constraint!=null) {
             constraint.preCreate(network);
        }

        EntityDetail entityDetail = NetworkMapper.mapNetworkToOmrsEntityDetail(network);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        Network createdNetwork =  NetworkMapper.mapOmrsEntityDetailToNetwork(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created Network="+ createdNetwork );
        }
        return createdNetwork;
    }
    /**
     * Update network 
     * @param network
     * @return Network
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public Network updateNetwork(String userId, Network network)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateNetworkById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = NetworkMapper.mapNetworkToOmrsEntityDetail(network);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            Network updatedNetwork =  NetworkMapper.mapOmrsEntityDetailToNetwork(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated Network="+ updatedNetwork );
            }
            return updatedNetwork;
        }

    /**
     * Delete an network identified by its GUID. Delete is a soft delete, this means that the network has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the network
     * @return Network
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteNetworkByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteNetworkByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an network identified by its GUID. Delete is a hard delete, this means that the network is really
     * deleted .
     *
     * @param  entityGuid GUID for the network
     * @return Network
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeNetworkByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeNetworkByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied network
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public Network addNetworkClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addNetworkClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         Network networkClassifications = NetworkMapper.mapOmrsEntityDetailToNetwork(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified Network=" +  networkClassifications);
         }
         return  networkClassifications;
    }

    /**
     * Updates classifications to an existing network represented by a guid.
     * @param  entityGuid globally unique identifier for the network
     * @return classification for the given network guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Network updateNetworkClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateNetworkClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           Network  networkClassifications = NetworkMapper.mapOmrsEntityDetailToNetwork(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  networkClassifications;
    }

    /**
     * Deletes a given classification from an existing network represented by a guid.
     * @param entityGuid  globally unique identifier for the network
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Network deleteNetworkClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteNetworkClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       Network declassifiedNetwork =  NetworkMapper.mapOmrsEntityDetailToNetwork(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedNetwork;
    }

    /**
      * Get the relationships associated with entity network represented by a guid.
      * @param entityGuid  globally unique identifier for the network
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getNetworkRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getNetworkRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an actorProfile given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the actorProfiles relationships.
     * @param entityGuid GUID for the entity
     * @return ActorProfile
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public ActorProfile getActorProfileById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getActorProfileById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        ActorProfile gotactorProfile = ActorProfileMapper.mapOmrsEntityDetailToActorProfile(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotactorProfile );
        }
        return gotactorProfile;

    }
    /**
     * Create new actorProfile.
     * @param actorProfile
     * @return ActorProfile
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public ActorProfile createActorProfile(String userId,ActorProfile actorProfile)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createActorProfileById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("ActorProfile");
        if (constraint!=null) {
             constraint.preCreate(actorProfile);
        }

        EntityDetail entityDetail = ActorProfileMapper.mapActorProfileToOmrsEntityDetail(actorProfile);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        ActorProfile createdActorProfile =  ActorProfileMapper.mapOmrsEntityDetailToActorProfile(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created ActorProfile="+ createdActorProfile );
        }
        return createdActorProfile;
    }
    /**
     * Update actorProfile 
     * @param actorProfile
     * @return ActorProfile
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public ActorProfile updateActorProfile(String userId, ActorProfile actorProfile)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateActorProfileById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = ActorProfileMapper.mapActorProfileToOmrsEntityDetail(actorProfile);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            ActorProfile updatedActorProfile =  ActorProfileMapper.mapOmrsEntityDetailToActorProfile(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated ActorProfile="+ updatedActorProfile );
            }
            return updatedActorProfile;
        }

    /**
     * Delete an actorProfile identified by its GUID. Delete is a soft delete, this means that the actorProfile has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the actorProfile
     * @return ActorProfile
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteActorProfileByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteActorProfileByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an actorProfile identified by its GUID. Delete is a hard delete, this means that the actorProfile is really
     * deleted .
     *
     * @param  entityGuid GUID for the actorProfile
     * @return ActorProfile
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeActorProfileByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeActorProfileByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied actorProfile
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public ActorProfile addActorProfileClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addActorProfileClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         ActorProfile actorProfileClassifications = ActorProfileMapper.mapOmrsEntityDetailToActorProfile(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified ActorProfile=" +  actorProfileClassifications);
         }
         return  actorProfileClassifications;
    }

    /**
     * Updates classifications to an existing actorProfile represented by a guid.
     * @param  entityGuid globally unique identifier for the actorProfile
     * @return classification for the given actorProfile guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public ActorProfile updateActorProfileClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateActorProfileClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           ActorProfile  actorProfileClassifications = ActorProfileMapper.mapOmrsEntityDetailToActorProfile(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  actorProfileClassifications;
    }

    /**
     * Deletes a given classification from an existing actorProfile represented by a guid.
     * @param entityGuid  globally unique identifier for the actorProfile
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public ActorProfile deleteActorProfileClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteActorProfileClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       ActorProfile declassifiedActorProfile =  ActorProfileMapper.mapOmrsEntityDetailToActorProfile(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedActorProfile;
    }

    /**
      * Get the relationships associated with entity actorProfile represented by a guid.
      * @param entityGuid  globally unique identifier for the actorProfile
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getActorProfileRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getActorProfileRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an asset given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the assets relationships.
     * @param entityGuid GUID for the entity
     * @return Asset
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public Asset getAssetById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getAssetById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        Asset gotasset = AssetMapper.mapOmrsEntityDetailToAsset(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotasset );
        }
        return gotasset;

    }
    /**
     * Create new asset.
     * @param asset
     * @return Asset
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public Asset createAsset(String userId,Asset asset)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createAssetById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("Asset");
        if (constraint!=null) {
             constraint.preCreate(asset);
        }

        EntityDetail entityDetail = AssetMapper.mapAssetToOmrsEntityDetail(asset);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        Asset createdAsset =  AssetMapper.mapOmrsEntityDetailToAsset(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created Asset="+ createdAsset );
        }
        return createdAsset;
    }
    /**
     * Update asset 
     * @param asset
     * @return Asset
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public Asset updateAsset(String userId, Asset asset)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateAssetById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = AssetMapper.mapAssetToOmrsEntityDetail(asset);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            Asset updatedAsset =  AssetMapper.mapOmrsEntityDetailToAsset(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated Asset="+ updatedAsset );
            }
            return updatedAsset;
        }

    /**
     * Delete an asset identified by its GUID. Delete is a soft delete, this means that the asset has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the asset
     * @return Asset
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteAssetByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteAssetByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an asset identified by its GUID. Delete is a hard delete, this means that the asset is really
     * deleted .
     *
     * @param  entityGuid GUID for the asset
     * @return Asset
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeAssetByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeAssetByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied asset
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public Asset addAssetClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addAssetClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         Asset assetClassifications = AssetMapper.mapOmrsEntityDetailToAsset(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified Asset=" +  assetClassifications);
         }
         return  assetClassifications;
    }

    /**
     * Updates classifications to an existing asset represented by a guid.
     * @param  entityGuid globally unique identifier for the asset
     * @return classification for the given asset guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Asset updateAssetClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateAssetClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           Asset  assetClassifications = AssetMapper.mapOmrsEntityDetailToAsset(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  assetClassifications;
    }

    /**
     * Deletes a given classification from an existing asset represented by a guid.
     * @param entityGuid  globally unique identifier for the asset
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Asset deleteAssetClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteAssetClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       Asset declassifiedAsset =  AssetMapper.mapOmrsEntityDetailToAsset(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedAsset;
    }

    /**
      * Get the relationships associated with entity asset represented by a guid.
      * @param entityGuid  globally unique identifier for the asset
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getAssetRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getAssetRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an aPIOperation given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the aPIOperations relationships.
     * @param entityGuid GUID for the entity
     * @return APIOperation
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public APIOperation getAPIOperationById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getAPIOperationById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        APIOperation gotaPIOperation = APIOperationMapper.mapOmrsEntityDetailToAPIOperation(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotaPIOperation );
        }
        return gotaPIOperation;

    }
    /**
     * Create new aPIOperation.
     * @param aPIOperation
     * @return APIOperation
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public APIOperation createAPIOperation(String userId,APIOperation aPIOperation)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createAPIOperationById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("APIOperation");
        if (constraint!=null) {
             constraint.preCreate(aPIOperation);
        }

        EntityDetail entityDetail = APIOperationMapper.mapAPIOperationToOmrsEntityDetail(aPIOperation);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        APIOperation createdAPIOperation =  APIOperationMapper.mapOmrsEntityDetailToAPIOperation(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created APIOperation="+ createdAPIOperation );
        }
        return createdAPIOperation;
    }
    /**
     * Update aPIOperation 
     * @param aPIOperation
     * @return APIOperation
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public APIOperation updateAPIOperation(String userId, APIOperation aPIOperation)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateAPIOperationById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = APIOperationMapper.mapAPIOperationToOmrsEntityDetail(aPIOperation);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            APIOperation updatedAPIOperation =  APIOperationMapper.mapOmrsEntityDetailToAPIOperation(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated APIOperation="+ updatedAPIOperation );
            }
            return updatedAPIOperation;
        }

    /**
     * Delete an aPIOperation identified by its GUID. Delete is a soft delete, this means that the aPIOperation has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the aPIOperation
     * @return APIOperation
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteAPIOperationByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteAPIOperationByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an aPIOperation identified by its GUID. Delete is a hard delete, this means that the aPIOperation is really
     * deleted .
     *
     * @param  entityGuid GUID for the aPIOperation
     * @return APIOperation
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeAPIOperationByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeAPIOperationByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied aPIOperation
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public APIOperation addAPIOperationClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addAPIOperationClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         APIOperation aPIOperationClassifications = APIOperationMapper.mapOmrsEntityDetailToAPIOperation(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified APIOperation=" +  aPIOperationClassifications);
         }
         return  aPIOperationClassifications;
    }

    /**
     * Updates classifications to an existing aPIOperation represented by a guid.
     * @param  entityGuid globally unique identifier for the aPIOperation
     * @return classification for the given aPIOperation guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public APIOperation updateAPIOperationClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateAPIOperationClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           APIOperation  aPIOperationClassifications = APIOperationMapper.mapOmrsEntityDetailToAPIOperation(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  aPIOperationClassifications;
    }

    /**
     * Deletes a given classification from an existing aPIOperation represented by a guid.
     * @param entityGuid  globally unique identifier for the aPIOperation
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public APIOperation deleteAPIOperationClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteAPIOperationClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       APIOperation declassifiedAPIOperation =  APIOperationMapper.mapOmrsEntityDetailToAPIOperation(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedAPIOperation;
    }

    /**
      * Get the relationships associated with entity aPIOperation represented by a guid.
      * @param entityGuid  globally unique identifier for the aPIOperation
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getAPIOperationRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getAPIOperationRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an toDo given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the toDos relationships.
     * @param entityGuid GUID for the entity
     * @return ToDo
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public ToDo getToDoById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getToDoById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        ToDo gottoDo = ToDoMapper.mapOmrsEntityDetailToToDo(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gottoDo );
        }
        return gottoDo;

    }
    /**
     * Create new toDo.
     * @param toDo
     * @return ToDo
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public ToDo createToDo(String userId,ToDo toDo)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createToDoById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("ToDo");
        if (constraint!=null) {
             constraint.preCreate(toDo);
        }

        EntityDetail entityDetail = ToDoMapper.mapToDoToOmrsEntityDetail(toDo);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        ToDo createdToDo =  ToDoMapper.mapOmrsEntityDetailToToDo(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created ToDo="+ createdToDo );
        }
        return createdToDo;
    }
    /**
     * Update toDo 
     * @param toDo
     * @return ToDo
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public ToDo updateToDo(String userId, ToDo toDo)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateToDoById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = ToDoMapper.mapToDoToOmrsEntityDetail(toDo);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            ToDo updatedToDo =  ToDoMapper.mapOmrsEntityDetailToToDo(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated ToDo="+ updatedToDo );
            }
            return updatedToDo;
        }

    /**
     * Delete an toDo identified by its GUID. Delete is a soft delete, this means that the toDo has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the toDo
     * @return ToDo
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteToDoByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteToDoByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an toDo identified by its GUID. Delete is a hard delete, this means that the toDo is really
     * deleted .
     *
     * @param  entityGuid GUID for the toDo
     * @return ToDo
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeToDoByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeToDoByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied toDo
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public ToDo addToDoClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addToDoClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         ToDo toDoClassifications = ToDoMapper.mapOmrsEntityDetailToToDo(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified ToDo=" +  toDoClassifications);
         }
         return  toDoClassifications;
    }

    /**
     * Updates classifications to an existing toDo represented by a guid.
     * @param  entityGuid globally unique identifier for the toDo
     * @return classification for the given toDo guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public ToDo updateToDoClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateToDoClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           ToDo  toDoClassifications = ToDoMapper.mapOmrsEntityDetailToToDo(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  toDoClassifications;
    }

    /**
     * Deletes a given classification from an existing toDo represented by a guid.
     * @param entityGuid  globally unique identifier for the toDo
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public ToDo deleteToDoClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteToDoClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       ToDo declassifiedToDo =  ToDoMapper.mapOmrsEntityDetailToToDo(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedToDo;
    }

    /**
      * Get the relationships associated with entity toDo represented by a guid.
      * @param entityGuid  globally unique identifier for the toDo
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getToDoRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getToDoRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an networkGateway given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the networkGatewaies relationships.
     * @param entityGuid GUID for the entity
     * @return NetworkGateway
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public NetworkGateway getNetworkGatewayById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getNetworkGatewayById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        NetworkGateway gotnetworkGateway = NetworkGatewayMapper.mapOmrsEntityDetailToNetworkGateway(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotnetworkGateway );
        }
        return gotnetworkGateway;

    }
    /**
     * Create new networkGateway.
     * @param networkGateway
     * @return NetworkGateway
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public NetworkGateway createNetworkGateway(String userId,NetworkGateway networkGateway)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createNetworkGatewayById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("NetworkGateway");
        if (constraint!=null) {
             constraint.preCreate(networkGateway);
        }

        EntityDetail entityDetail = NetworkGatewayMapper.mapNetworkGatewayToOmrsEntityDetail(networkGateway);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        NetworkGateway createdNetworkGateway =  NetworkGatewayMapper.mapOmrsEntityDetailToNetworkGateway(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created NetworkGateway="+ createdNetworkGateway );
        }
        return createdNetworkGateway;
    }
    /**
     * Update networkGateway 
     * @param networkGateway
     * @return NetworkGateway
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public NetworkGateway updateNetworkGateway(String userId, NetworkGateway networkGateway)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateNetworkGatewayById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = NetworkGatewayMapper.mapNetworkGatewayToOmrsEntityDetail(networkGateway);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            NetworkGateway updatedNetworkGateway =  NetworkGatewayMapper.mapOmrsEntityDetailToNetworkGateway(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated NetworkGateway="+ updatedNetworkGateway );
            }
            return updatedNetworkGateway;
        }

    /**
     * Delete an networkGateway identified by its GUID. Delete is a soft delete, this means that the networkGateway has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the networkGateway
     * @return NetworkGateway
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteNetworkGatewayByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteNetworkGatewayByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an networkGateway identified by its GUID. Delete is a hard delete, this means that the networkGateway is really
     * deleted .
     *
     * @param  entityGuid GUID for the networkGateway
     * @return NetworkGateway
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeNetworkGatewayByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeNetworkGatewayByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied networkGateway
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public NetworkGateway addNetworkGatewayClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addNetworkGatewayClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         NetworkGateway networkGatewayClassifications = NetworkGatewayMapper.mapOmrsEntityDetailToNetworkGateway(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified NetworkGateway=" +  networkGatewayClassifications);
         }
         return  networkGatewayClassifications;
    }

    /**
     * Updates classifications to an existing networkGateway represented by a guid.
     * @param  entityGuid globally unique identifier for the networkGateway
     * @return classification for the given networkGateway guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public NetworkGateway updateNetworkGatewayClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateNetworkGatewayClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           NetworkGateway  networkGatewayClassifications = NetworkGatewayMapper.mapOmrsEntityDetailToNetworkGateway(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  networkGatewayClassifications;
    }

    /**
     * Deletes a given classification from an existing networkGateway represented by a guid.
     * @param entityGuid  globally unique identifier for the networkGateway
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public NetworkGateway deleteNetworkGatewayClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteNetworkGatewayClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       NetworkGateway declassifiedNetworkGateway =  NetworkGatewayMapper.mapOmrsEntityDetailToNetworkGateway(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedNetworkGateway;
    }

    /**
      * Get the relationships associated with entity networkGateway represented by a guid.
      * @param entityGuid  globally unique identifier for the networkGateway
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getNetworkGatewayRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getNetworkGatewayRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an governanceResponsibility given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the governanceResponsibilities relationships.
     * @param entityGuid GUID for the entity
     * @return GovernanceResponsibility
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public GovernanceResponsibility getGovernanceResponsibilityById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getGovernanceResponsibilityById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        GovernanceResponsibility gotgovernanceResponsibility = GovernanceResponsibilityMapper.mapOmrsEntityDetailToGovernanceResponsibility(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotgovernanceResponsibility );
        }
        return gotgovernanceResponsibility;

    }
    /**
     * Create new governanceResponsibility.
     * @param governanceResponsibility
     * @return GovernanceResponsibility
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public GovernanceResponsibility createGovernanceResponsibility(String userId,GovernanceResponsibility governanceResponsibility)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createGovernanceResponsibilityById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("GovernanceResponsibility");
        if (constraint!=null) {
             constraint.preCreate(governanceResponsibility);
        }

        EntityDetail entityDetail = GovernanceResponsibilityMapper.mapGovernanceResponsibilityToOmrsEntityDetail(governanceResponsibility);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        GovernanceResponsibility createdGovernanceResponsibility =  GovernanceResponsibilityMapper.mapOmrsEntityDetailToGovernanceResponsibility(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created GovernanceResponsibility="+ createdGovernanceResponsibility );
        }
        return createdGovernanceResponsibility;
    }
    /**
     * Update governanceResponsibility 
     * @param governanceResponsibility
     * @return GovernanceResponsibility
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public GovernanceResponsibility updateGovernanceResponsibility(String userId, GovernanceResponsibility governanceResponsibility)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateGovernanceResponsibilityById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = GovernanceResponsibilityMapper.mapGovernanceResponsibilityToOmrsEntityDetail(governanceResponsibility);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            GovernanceResponsibility updatedGovernanceResponsibility =  GovernanceResponsibilityMapper.mapOmrsEntityDetailToGovernanceResponsibility(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated GovernanceResponsibility="+ updatedGovernanceResponsibility );
            }
            return updatedGovernanceResponsibility;
        }

    /**
     * Delete an governanceResponsibility identified by its GUID. Delete is a soft delete, this means that the governanceResponsibility has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the governanceResponsibility
     * @return GovernanceResponsibility
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteGovernanceResponsibilityByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteGovernanceResponsibilityByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an governanceResponsibility identified by its GUID. Delete is a hard delete, this means that the governanceResponsibility is really
     * deleted .
     *
     * @param  entityGuid GUID for the governanceResponsibility
     * @return GovernanceResponsibility
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeGovernanceResponsibilityByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeGovernanceResponsibilityByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied governanceResponsibility
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public GovernanceResponsibility addGovernanceResponsibilityClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addGovernanceResponsibilityClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         GovernanceResponsibility governanceResponsibilityClassifications = GovernanceResponsibilityMapper.mapOmrsEntityDetailToGovernanceResponsibility(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified GovernanceResponsibility=" +  governanceResponsibilityClassifications);
         }
         return  governanceResponsibilityClassifications;
    }

    /**
     * Updates classifications to an existing governanceResponsibility represented by a guid.
     * @param  entityGuid globally unique identifier for the governanceResponsibility
     * @return classification for the given governanceResponsibility guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GovernanceResponsibility updateGovernanceResponsibilityClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateGovernanceResponsibilityClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           GovernanceResponsibility  governanceResponsibilityClassifications = GovernanceResponsibilityMapper.mapOmrsEntityDetailToGovernanceResponsibility(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  governanceResponsibilityClassifications;
    }

    /**
     * Deletes a given classification from an existing governanceResponsibility represented by a guid.
     * @param entityGuid  globally unique identifier for the governanceResponsibility
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GovernanceResponsibility deleteGovernanceResponsibilityClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteGovernanceResponsibilityClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       GovernanceResponsibility declassifiedGovernanceResponsibility =  GovernanceResponsibilityMapper.mapOmrsEntityDetailToGovernanceResponsibility(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedGovernanceResponsibility;
    }

    /**
      * Get the relationships associated with entity governanceResponsibility represented by a guid.
      * @param entityGuid  globally unique identifier for the governanceResponsibility
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getGovernanceResponsibilityRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getGovernanceResponsibilityRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an implementationSnippet given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the implementationSnippets relationships.
     * @param entityGuid GUID for the entity
     * @return ImplementationSnippet
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public ImplementationSnippet getImplementationSnippetById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getImplementationSnippetById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        ImplementationSnippet gotimplementationSnippet = ImplementationSnippetMapper.mapOmrsEntityDetailToImplementationSnippet(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotimplementationSnippet );
        }
        return gotimplementationSnippet;

    }
    /**
     * Create new implementationSnippet.
     * @param implementationSnippet
     * @return ImplementationSnippet
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public ImplementationSnippet createImplementationSnippet(String userId,ImplementationSnippet implementationSnippet)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createImplementationSnippetById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("ImplementationSnippet");
        if (constraint!=null) {
             constraint.preCreate(implementationSnippet);
        }

        EntityDetail entityDetail = ImplementationSnippetMapper.mapImplementationSnippetToOmrsEntityDetail(implementationSnippet);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        ImplementationSnippet createdImplementationSnippet =  ImplementationSnippetMapper.mapOmrsEntityDetailToImplementationSnippet(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created ImplementationSnippet="+ createdImplementationSnippet );
        }
        return createdImplementationSnippet;
    }
    /**
     * Update implementationSnippet 
     * @param implementationSnippet
     * @return ImplementationSnippet
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public ImplementationSnippet updateImplementationSnippet(String userId, ImplementationSnippet implementationSnippet)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateImplementationSnippetById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = ImplementationSnippetMapper.mapImplementationSnippetToOmrsEntityDetail(implementationSnippet);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            ImplementationSnippet updatedImplementationSnippet =  ImplementationSnippetMapper.mapOmrsEntityDetailToImplementationSnippet(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated ImplementationSnippet="+ updatedImplementationSnippet );
            }
            return updatedImplementationSnippet;
        }

    /**
     * Delete an implementationSnippet identified by its GUID. Delete is a soft delete, this means that the implementationSnippet has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the implementationSnippet
     * @return ImplementationSnippet
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteImplementationSnippetByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteImplementationSnippetByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an implementationSnippet identified by its GUID. Delete is a hard delete, this means that the implementationSnippet is really
     * deleted .
     *
     * @param  entityGuid GUID for the implementationSnippet
     * @return ImplementationSnippet
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeImplementationSnippetByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeImplementationSnippetByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied implementationSnippet
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public ImplementationSnippet addImplementationSnippetClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addImplementationSnippetClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         ImplementationSnippet implementationSnippetClassifications = ImplementationSnippetMapper.mapOmrsEntityDetailToImplementationSnippet(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified ImplementationSnippet=" +  implementationSnippetClassifications);
         }
         return  implementationSnippetClassifications;
    }

    /**
     * Updates classifications to an existing implementationSnippet represented by a guid.
     * @param  entityGuid globally unique identifier for the implementationSnippet
     * @return classification for the given implementationSnippet guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public ImplementationSnippet updateImplementationSnippetClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateImplementationSnippetClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           ImplementationSnippet  implementationSnippetClassifications = ImplementationSnippetMapper.mapOmrsEntityDetailToImplementationSnippet(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  implementationSnippetClassifications;
    }

    /**
     * Deletes a given classification from an existing implementationSnippet represented by a guid.
     * @param entityGuid  globally unique identifier for the implementationSnippet
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public ImplementationSnippet deleteImplementationSnippetClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteImplementationSnippetClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       ImplementationSnippet declassifiedImplementationSnippet =  ImplementationSnippetMapper.mapOmrsEntityDetailToImplementationSnippet(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedImplementationSnippet;
    }

    /**
      * Get the relationships associated with entity implementationSnippet represented by a guid.
      * @param entityGuid  globally unique identifier for the implementationSnippet
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getImplementationSnippetRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getImplementationSnippetRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an userIdentity given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the userIdentities relationships.
     * @param entityGuid GUID for the entity
     * @return UserIdentity
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public UserIdentity getUserIdentityById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getUserIdentityById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        UserIdentity gotuserIdentity = UserIdentityMapper.mapOmrsEntityDetailToUserIdentity(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotuserIdentity );
        }
        return gotuserIdentity;

    }
    /**
     * Create new userIdentity.
     * @param userIdentity
     * @return UserIdentity
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public UserIdentity createUserIdentity(String userId,UserIdentity userIdentity)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createUserIdentityById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("UserIdentity");
        if (constraint!=null) {
             constraint.preCreate(userIdentity);
        }

        EntityDetail entityDetail = UserIdentityMapper.mapUserIdentityToOmrsEntityDetail(userIdentity);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        UserIdentity createdUserIdentity =  UserIdentityMapper.mapOmrsEntityDetailToUserIdentity(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created UserIdentity="+ createdUserIdentity );
        }
        return createdUserIdentity;
    }
    /**
     * Update userIdentity 
     * @param userIdentity
     * @return UserIdentity
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public UserIdentity updateUserIdentity(String userId, UserIdentity userIdentity)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateUserIdentityById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = UserIdentityMapper.mapUserIdentityToOmrsEntityDetail(userIdentity);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            UserIdentity updatedUserIdentity =  UserIdentityMapper.mapOmrsEntityDetailToUserIdentity(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated UserIdentity="+ updatedUserIdentity );
            }
            return updatedUserIdentity;
        }

    /**
     * Delete an userIdentity identified by its GUID. Delete is a soft delete, this means that the userIdentity has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the userIdentity
     * @return UserIdentity
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteUserIdentityByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteUserIdentityByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an userIdentity identified by its GUID. Delete is a hard delete, this means that the userIdentity is really
     * deleted .
     *
     * @param  entityGuid GUID for the userIdentity
     * @return UserIdentity
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeUserIdentityByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeUserIdentityByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied userIdentity
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public UserIdentity addUserIdentityClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addUserIdentityClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         UserIdentity userIdentityClassifications = UserIdentityMapper.mapOmrsEntityDetailToUserIdentity(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified UserIdentity=" +  userIdentityClassifications);
         }
         return  userIdentityClassifications;
    }

    /**
     * Updates classifications to an existing userIdentity represented by a guid.
     * @param  entityGuid globally unique identifier for the userIdentity
     * @return classification for the given userIdentity guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public UserIdentity updateUserIdentityClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateUserIdentityClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           UserIdentity  userIdentityClassifications = UserIdentityMapper.mapOmrsEntityDetailToUserIdentity(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  userIdentityClassifications;
    }

    /**
     * Deletes a given classification from an existing userIdentity represented by a guid.
     * @param entityGuid  globally unique identifier for the userIdentity
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public UserIdentity deleteUserIdentityClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteUserIdentityClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       UserIdentity declassifiedUserIdentity =  UserIdentityMapper.mapOmrsEntityDetailToUserIdentity(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedUserIdentity;
    }

    /**
      * Get the relationships associated with entity userIdentity represented by a guid.
      * @param entityGuid  globally unique identifier for the userIdentity
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getUserIdentityRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getUserIdentityRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an noteEntry given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the noteEntries relationships.
     * @param entityGuid GUID for the entity
     * @return NoteEntry
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public NoteEntry getNoteEntryById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getNoteEntryById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        NoteEntry gotnoteEntry = NoteEntryMapper.mapOmrsEntityDetailToNoteEntry(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotnoteEntry );
        }
        return gotnoteEntry;

    }
    /**
     * Create new noteEntry.
     * @param noteEntry
     * @return NoteEntry
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public NoteEntry createNoteEntry(String userId,NoteEntry noteEntry)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createNoteEntryById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("NoteEntry");
        if (constraint!=null) {
             constraint.preCreate(noteEntry);
        }

        EntityDetail entityDetail = NoteEntryMapper.mapNoteEntryToOmrsEntityDetail(noteEntry);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        NoteEntry createdNoteEntry =  NoteEntryMapper.mapOmrsEntityDetailToNoteEntry(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created NoteEntry="+ createdNoteEntry );
        }
        return createdNoteEntry;
    }
    /**
     * Update noteEntry 
     * @param noteEntry
     * @return NoteEntry
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public NoteEntry updateNoteEntry(String userId, NoteEntry noteEntry)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateNoteEntryById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = NoteEntryMapper.mapNoteEntryToOmrsEntityDetail(noteEntry);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            NoteEntry updatedNoteEntry =  NoteEntryMapper.mapOmrsEntityDetailToNoteEntry(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated NoteEntry="+ updatedNoteEntry );
            }
            return updatedNoteEntry;
        }

    /**
     * Delete an noteEntry identified by its GUID. Delete is a soft delete, this means that the noteEntry has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the noteEntry
     * @return NoteEntry
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteNoteEntryByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteNoteEntryByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an noteEntry identified by its GUID. Delete is a hard delete, this means that the noteEntry is really
     * deleted .
     *
     * @param  entityGuid GUID for the noteEntry
     * @return NoteEntry
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeNoteEntryByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeNoteEntryByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied noteEntry
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public NoteEntry addNoteEntryClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addNoteEntryClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         NoteEntry noteEntryClassifications = NoteEntryMapper.mapOmrsEntityDetailToNoteEntry(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified NoteEntry=" +  noteEntryClassifications);
         }
         return  noteEntryClassifications;
    }

    /**
     * Updates classifications to an existing noteEntry represented by a guid.
     * @param  entityGuid globally unique identifier for the noteEntry
     * @return classification for the given noteEntry guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public NoteEntry updateNoteEntryClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateNoteEntryClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           NoteEntry  noteEntryClassifications = NoteEntryMapper.mapOmrsEntityDetailToNoteEntry(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  noteEntryClassifications;
    }

    /**
     * Deletes a given classification from an existing noteEntry represented by a guid.
     * @param entityGuid  globally unique identifier for the noteEntry
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public NoteEntry deleteNoteEntryClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteNoteEntryClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       NoteEntry declassifiedNoteEntry =  NoteEntryMapper.mapOmrsEntityDetailToNoteEntry(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedNoteEntry;
    }

    /**
      * Get the relationships associated with entity noteEntry represented by a guid.
      * @param entityGuid  globally unique identifier for the noteEntry
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getNoteEntryRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getNoteEntryRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an propertyFacet given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the propertyFacets relationships.
     * @param entityGuid GUID for the entity
     * @return PropertyFacet
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public PropertyFacet getPropertyFacetById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getPropertyFacetById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        PropertyFacet gotpropertyFacet = PropertyFacetMapper.mapOmrsEntityDetailToPropertyFacet(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotpropertyFacet );
        }
        return gotpropertyFacet;

    }
    /**
     * Create new propertyFacet.
     * @param propertyFacet
     * @return PropertyFacet
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public PropertyFacet createPropertyFacet(String userId,PropertyFacet propertyFacet)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createPropertyFacetById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("PropertyFacet");
        if (constraint!=null) {
             constraint.preCreate(propertyFacet);
        }

        EntityDetail entityDetail = PropertyFacetMapper.mapPropertyFacetToOmrsEntityDetail(propertyFacet);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        PropertyFacet createdPropertyFacet =  PropertyFacetMapper.mapOmrsEntityDetailToPropertyFacet(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created PropertyFacet="+ createdPropertyFacet );
        }
        return createdPropertyFacet;
    }
    /**
     * Update propertyFacet 
     * @param propertyFacet
     * @return PropertyFacet
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public PropertyFacet updatePropertyFacet(String userId, PropertyFacet propertyFacet)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updatePropertyFacetById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = PropertyFacetMapper.mapPropertyFacetToOmrsEntityDetail(propertyFacet);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            PropertyFacet updatedPropertyFacet =  PropertyFacetMapper.mapOmrsEntityDetailToPropertyFacet(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated PropertyFacet="+ updatedPropertyFacet );
            }
            return updatedPropertyFacet;
        }

    /**
     * Delete an propertyFacet identified by its GUID. Delete is a soft delete, this means that the propertyFacet has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the propertyFacet
     * @return PropertyFacet
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deletePropertyFacetByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deletePropertyFacetByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an propertyFacet identified by its GUID. Delete is a hard delete, this means that the propertyFacet is really
     * deleted .
     *
     * @param  entityGuid GUID for the propertyFacet
     * @return PropertyFacet
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgePropertyFacetByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgePropertyFacetByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied propertyFacet
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public PropertyFacet addPropertyFacetClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addPropertyFacetClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         PropertyFacet propertyFacetClassifications = PropertyFacetMapper.mapOmrsEntityDetailToPropertyFacet(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified PropertyFacet=" +  propertyFacetClassifications);
         }
         return  propertyFacetClassifications;
    }

    /**
     * Updates classifications to an existing propertyFacet represented by a guid.
     * @param  entityGuid globally unique identifier for the propertyFacet
     * @return classification for the given propertyFacet guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public PropertyFacet updatePropertyFacetClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updatePropertyFacetClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           PropertyFacet  propertyFacetClassifications = PropertyFacetMapper.mapOmrsEntityDetailToPropertyFacet(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  propertyFacetClassifications;
    }

    /**
     * Deletes a given classification from an existing propertyFacet represented by a guid.
     * @param entityGuid  globally unique identifier for the propertyFacet
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public PropertyFacet deletePropertyFacetClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deletePropertyFacetClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       PropertyFacet declassifiedPropertyFacet =  PropertyFacetMapper.mapOmrsEntityDetailToPropertyFacet(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedPropertyFacet;
    }

    /**
      * Get the relationships associated with entity propertyFacet represented by a guid.
      * @param entityGuid  globally unique identifier for the propertyFacet
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getPropertyFacetRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getPropertyFacetRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an project given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the projects relationships.
     * @param entityGuid GUID for the entity
     * @return Project
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public Project getProjectById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getProjectById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        Project gotproject = ProjectMapper.mapOmrsEntityDetailToProject(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotproject );
        }
        return gotproject;

    }
    /**
     * Create new project.
     * @param project
     * @return Project
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public Project createProject(String userId,Project project)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createProjectById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("Project");
        if (constraint!=null) {
             constraint.preCreate(project);
        }

        EntityDetail entityDetail = ProjectMapper.mapProjectToOmrsEntityDetail(project);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        Project createdProject =  ProjectMapper.mapOmrsEntityDetailToProject(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created Project="+ createdProject );
        }
        return createdProject;
    }
    /**
     * Update project 
     * @param project
     * @return Project
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public Project updateProject(String userId, Project project)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateProjectById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = ProjectMapper.mapProjectToOmrsEntityDetail(project);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            Project updatedProject =  ProjectMapper.mapOmrsEntityDetailToProject(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated Project="+ updatedProject );
            }
            return updatedProject;
        }

    /**
     * Delete an project identified by its GUID. Delete is a soft delete, this means that the project has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the project
     * @return Project
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteProjectByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteProjectByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an project identified by its GUID. Delete is a hard delete, this means that the project is really
     * deleted .
     *
     * @param  entityGuid GUID for the project
     * @return Project
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeProjectByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeProjectByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied project
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public Project addProjectClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addProjectClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         Project projectClassifications = ProjectMapper.mapOmrsEntityDetailToProject(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified Project=" +  projectClassifications);
         }
         return  projectClassifications;
    }

    /**
     * Updates classifications to an existing project represented by a guid.
     * @param  entityGuid globally unique identifier for the project
     * @return classification for the given project guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Project updateProjectClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateProjectClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           Project  projectClassifications = ProjectMapper.mapOmrsEntityDetailToProject(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  projectClassifications;
    }

    /**
     * Deletes a given classification from an existing project represented by a guid.
     * @param entityGuid  globally unique identifier for the project
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Project deleteProjectClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteProjectClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       Project declassifiedProject =  ProjectMapper.mapOmrsEntityDetailToProject(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedProject;
    }

    /**
      * Get the relationships associated with entity project represented by a guid.
      * @param entityGuid  globally unique identifier for the project
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getProjectRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getProjectRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an hostCluster given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the hostClusters relationships.
     * @param entityGuid GUID for the entity
     * @return HostCluster
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public HostCluster getHostClusterById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getHostClusterById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        HostCluster gothostCluster = HostClusterMapper.mapOmrsEntityDetailToHostCluster(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gothostCluster );
        }
        return gothostCluster;

    }
    /**
     * Create new hostCluster.
     * @param hostCluster
     * @return HostCluster
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public HostCluster createHostCluster(String userId,HostCluster hostCluster)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createHostClusterById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("HostCluster");
        if (constraint!=null) {
             constraint.preCreate(hostCluster);
        }

        EntityDetail entityDetail = HostClusterMapper.mapHostClusterToOmrsEntityDetail(hostCluster);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        HostCluster createdHostCluster =  HostClusterMapper.mapOmrsEntityDetailToHostCluster(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created HostCluster="+ createdHostCluster );
        }
        return createdHostCluster;
    }
    /**
     * Update hostCluster 
     * @param hostCluster
     * @return HostCluster
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public HostCluster updateHostCluster(String userId, HostCluster hostCluster)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateHostClusterById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = HostClusterMapper.mapHostClusterToOmrsEntityDetail(hostCluster);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            HostCluster updatedHostCluster =  HostClusterMapper.mapOmrsEntityDetailToHostCluster(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated HostCluster="+ updatedHostCluster );
            }
            return updatedHostCluster;
        }

    /**
     * Delete an hostCluster identified by its GUID. Delete is a soft delete, this means that the hostCluster has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the hostCluster
     * @return HostCluster
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteHostClusterByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteHostClusterByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an hostCluster identified by its GUID. Delete is a hard delete, this means that the hostCluster is really
     * deleted .
     *
     * @param  entityGuid GUID for the hostCluster
     * @return HostCluster
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeHostClusterByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeHostClusterByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied hostCluster
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public HostCluster addHostClusterClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addHostClusterClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         HostCluster hostClusterClassifications = HostClusterMapper.mapOmrsEntityDetailToHostCluster(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified HostCluster=" +  hostClusterClassifications);
         }
         return  hostClusterClassifications;
    }

    /**
     * Updates classifications to an existing hostCluster represented by a guid.
     * @param  entityGuid globally unique identifier for the hostCluster
     * @return classification for the given hostCluster guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public HostCluster updateHostClusterClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateHostClusterClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           HostCluster  hostClusterClassifications = HostClusterMapper.mapOmrsEntityDetailToHostCluster(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  hostClusterClassifications;
    }

    /**
     * Deletes a given classification from an existing hostCluster represented by a guid.
     * @param entityGuid  globally unique identifier for the hostCluster
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public HostCluster deleteHostClusterClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteHostClusterClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       HostCluster declassifiedHostCluster =  HostClusterMapper.mapOmrsEntityDetailToHostCluster(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedHostCluster;
    }

    /**
      * Get the relationships associated with entity hostCluster represented by a guid.
      * @param entityGuid  globally unique identifier for the hostCluster
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getHostClusterRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getHostClusterRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an glossary given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the glossaries relationships.
     * @param entityGuid GUID for the entity
     * @return Glossary
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public Glossary getGlossaryById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getGlossaryById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        Glossary gotglossary = GlossaryMapper.mapOmrsEntityDetailToGlossary(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotglossary );
        }
        return gotglossary;

    }
    /**
     * Create new glossary.
     * @param glossary
     * @return Glossary
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public Glossary createGlossary(String userId,Glossary glossary)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createGlossaryById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("Glossary");
        if (constraint!=null) {
             constraint.preCreate(glossary);
        }

        EntityDetail entityDetail = GlossaryMapper.mapGlossaryToOmrsEntityDetail(glossary);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        Glossary createdGlossary =  GlossaryMapper.mapOmrsEntityDetailToGlossary(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created Glossary="+ createdGlossary );
        }
        return createdGlossary;
    }
    /**
     * Update glossary 
     * @param glossary
     * @return Glossary
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public Glossary updateGlossary(String userId, Glossary glossary)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateGlossaryById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = GlossaryMapper.mapGlossaryToOmrsEntityDetail(glossary);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            Glossary updatedGlossary =  GlossaryMapper.mapOmrsEntityDetailToGlossary(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated Glossary="+ updatedGlossary );
            }
            return updatedGlossary;
        }

    /**
     * Delete an glossary identified by its GUID. Delete is a soft delete, this means that the glossary has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the glossary
     * @return Glossary
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteGlossaryByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteGlossaryByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an glossary identified by its GUID. Delete is a hard delete, this means that the glossary is really
     * deleted .
     *
     * @param  entityGuid GUID for the glossary
     * @return Glossary
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeGlossaryByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeGlossaryByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied glossary
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public Glossary addGlossaryClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addGlossaryClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         Glossary glossaryClassifications = GlossaryMapper.mapOmrsEntityDetailToGlossary(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified Glossary=" +  glossaryClassifications);
         }
         return  glossaryClassifications;
    }

    /**
     * Updates classifications to an existing glossary represented by a guid.
     * @param  entityGuid globally unique identifier for the glossary
     * @return classification for the given glossary guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Glossary updateGlossaryClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateGlossaryClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           Glossary  glossaryClassifications = GlossaryMapper.mapOmrsEntityDetailToGlossary(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  glossaryClassifications;
    }

    /**
     * Deletes a given classification from an existing glossary represented by a guid.
     * @param entityGuid  globally unique identifier for the glossary
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Glossary deleteGlossaryClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteGlossaryClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       Glossary declassifiedGlossary =  GlossaryMapper.mapOmrsEntityDetailToGlossary(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedGlossary;
    }

    /**
      * Get the relationships associated with entity glossary represented by a guid.
      * @param entityGuid  globally unique identifier for the glossary
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getGlossaryRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getGlossaryRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an glossaryCategory given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the glossaryCategories relationships.
     * @param entityGuid GUID for the entity
     * @return GlossaryCategory
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public GlossaryCategory getGlossaryCategoryById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getGlossaryCategoryById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        GlossaryCategory gotglossaryCategory = GlossaryCategoryMapper.mapOmrsEntityDetailToGlossaryCategory(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotglossaryCategory );
        }
        return gotglossaryCategory;

    }
    /**
     * Create new glossaryCategory.
     * @param glossaryCategory
     * @return GlossaryCategory
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public GlossaryCategory createGlossaryCategory(String userId,GlossaryCategory glossaryCategory)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createGlossaryCategoryById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("GlossaryCategory");
        if (constraint!=null) {
             constraint.preCreate(glossaryCategory);
        }

        EntityDetail entityDetail = GlossaryCategoryMapper.mapGlossaryCategoryToOmrsEntityDetail(glossaryCategory);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        GlossaryCategory createdGlossaryCategory =  GlossaryCategoryMapper.mapOmrsEntityDetailToGlossaryCategory(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created GlossaryCategory="+ createdGlossaryCategory );
        }
        return createdGlossaryCategory;
    }
    /**
     * Update glossaryCategory 
     * @param glossaryCategory
     * @return GlossaryCategory
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public GlossaryCategory updateGlossaryCategory(String userId, GlossaryCategory glossaryCategory)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateGlossaryCategoryById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = GlossaryCategoryMapper.mapGlossaryCategoryToOmrsEntityDetail(glossaryCategory);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            GlossaryCategory updatedGlossaryCategory =  GlossaryCategoryMapper.mapOmrsEntityDetailToGlossaryCategory(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated GlossaryCategory="+ updatedGlossaryCategory );
            }
            return updatedGlossaryCategory;
        }

    /**
     * Delete an glossaryCategory identified by its GUID. Delete is a soft delete, this means that the glossaryCategory has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the glossaryCategory
     * @return GlossaryCategory
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteGlossaryCategoryByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteGlossaryCategoryByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an glossaryCategory identified by its GUID. Delete is a hard delete, this means that the glossaryCategory is really
     * deleted .
     *
     * @param  entityGuid GUID for the glossaryCategory
     * @return GlossaryCategory
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeGlossaryCategoryByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeGlossaryCategoryByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied glossaryCategory
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public GlossaryCategory addGlossaryCategoryClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addGlossaryCategoryClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         GlossaryCategory glossaryCategoryClassifications = GlossaryCategoryMapper.mapOmrsEntityDetailToGlossaryCategory(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified GlossaryCategory=" +  glossaryCategoryClassifications);
         }
         return  glossaryCategoryClassifications;
    }

    /**
     * Updates classifications to an existing glossaryCategory represented by a guid.
     * @param  entityGuid globally unique identifier for the glossaryCategory
     * @return classification for the given glossaryCategory guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GlossaryCategory updateGlossaryCategoryClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateGlossaryCategoryClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           GlossaryCategory  glossaryCategoryClassifications = GlossaryCategoryMapper.mapOmrsEntityDetailToGlossaryCategory(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  glossaryCategoryClassifications;
    }

    /**
     * Deletes a given classification from an existing glossaryCategory represented by a guid.
     * @param entityGuid  globally unique identifier for the glossaryCategory
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GlossaryCategory deleteGlossaryCategoryClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteGlossaryCategoryClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       GlossaryCategory declassifiedGlossaryCategory =  GlossaryCategoryMapper.mapOmrsEntityDetailToGlossaryCategory(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedGlossaryCategory;
    }

    /**
      * Get the relationships associated with entity glossaryCategory represented by a guid.
      * @param entityGuid  globally unique identifier for the glossaryCategory
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getGlossaryCategoryRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getGlossaryCategoryRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an mediaCollection given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the mediaCollections relationships.
     * @param entityGuid GUID for the entity
     * @return MediaCollection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public MediaCollection getMediaCollectionById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getMediaCollectionById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        MediaCollection gotmediaCollection = MediaCollectionMapper.mapOmrsEntityDetailToMediaCollection(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotmediaCollection );
        }
        return gotmediaCollection;

    }
    /**
     * Create new mediaCollection.
     * @param mediaCollection
     * @return MediaCollection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public MediaCollection createMediaCollection(String userId,MediaCollection mediaCollection)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createMediaCollectionById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("MediaCollection");
        if (constraint!=null) {
             constraint.preCreate(mediaCollection);
        }

        EntityDetail entityDetail = MediaCollectionMapper.mapMediaCollectionToOmrsEntityDetail(mediaCollection);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        MediaCollection createdMediaCollection =  MediaCollectionMapper.mapOmrsEntityDetailToMediaCollection(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created MediaCollection="+ createdMediaCollection );
        }
        return createdMediaCollection;
    }
    /**
     * Update mediaCollection 
     * @param mediaCollection
     * @return MediaCollection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public MediaCollection updateMediaCollection(String userId, MediaCollection mediaCollection)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateMediaCollectionById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = MediaCollectionMapper.mapMediaCollectionToOmrsEntityDetail(mediaCollection);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            MediaCollection updatedMediaCollection =  MediaCollectionMapper.mapOmrsEntityDetailToMediaCollection(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated MediaCollection="+ updatedMediaCollection );
            }
            return updatedMediaCollection;
        }

    /**
     * Delete an mediaCollection identified by its GUID. Delete is a soft delete, this means that the mediaCollection has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the mediaCollection
     * @return MediaCollection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteMediaCollectionByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteMediaCollectionByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an mediaCollection identified by its GUID. Delete is a hard delete, this means that the mediaCollection is really
     * deleted .
     *
     * @param  entityGuid GUID for the mediaCollection
     * @return MediaCollection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeMediaCollectionByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeMediaCollectionByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied mediaCollection
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public MediaCollection addMediaCollectionClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addMediaCollectionClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         MediaCollection mediaCollectionClassifications = MediaCollectionMapper.mapOmrsEntityDetailToMediaCollection(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified MediaCollection=" +  mediaCollectionClassifications);
         }
         return  mediaCollectionClassifications;
    }

    /**
     * Updates classifications to an existing mediaCollection represented by a guid.
     * @param  entityGuid globally unique identifier for the mediaCollection
     * @return classification for the given mediaCollection guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public MediaCollection updateMediaCollectionClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateMediaCollectionClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           MediaCollection  mediaCollectionClassifications = MediaCollectionMapper.mapOmrsEntityDetailToMediaCollection(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  mediaCollectionClassifications;
    }

    /**
     * Deletes a given classification from an existing mediaCollection represented by a guid.
     * @param entityGuid  globally unique identifier for the mediaCollection
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public MediaCollection deleteMediaCollectionClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteMediaCollectionClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       MediaCollection declassifiedMediaCollection =  MediaCollectionMapper.mapOmrsEntityDetailToMediaCollection(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedMediaCollection;
    }

    /**
      * Get the relationships associated with entity mediaCollection represented by a guid.
      * @param entityGuid  globally unique identifier for the mediaCollection
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getMediaCollectionRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getMediaCollectionRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an collection given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the collections relationships.
     * @param entityGuid GUID for the entity
     * @return Collection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public Collection getCollectionById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getCollectionById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        Collection gotcollection = CollectionMapper.mapOmrsEntityDetailToCollection(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotcollection );
        }
        return gotcollection;

    }
    /**
     * Create new collection.
     * @param collection
     * @return Collection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public Collection createCollection(String userId,Collection collection)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createCollectionById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("Collection");
        if (constraint!=null) {
             constraint.preCreate(collection);
        }

        EntityDetail entityDetail = CollectionMapper.mapCollectionToOmrsEntityDetail(collection);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        Collection createdCollection =  CollectionMapper.mapOmrsEntityDetailToCollection(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created Collection="+ createdCollection );
        }
        return createdCollection;
    }
    /**
     * Update collection 
     * @param collection
     * @return Collection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public Collection updateCollection(String userId, Collection collection)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateCollectionById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = CollectionMapper.mapCollectionToOmrsEntityDetail(collection);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            Collection updatedCollection =  CollectionMapper.mapOmrsEntityDetailToCollection(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated Collection="+ updatedCollection );
            }
            return updatedCollection;
        }

    /**
     * Delete an collection identified by its GUID. Delete is a soft delete, this means that the collection has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the collection
     * @return Collection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteCollectionByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteCollectionByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an collection identified by its GUID. Delete is a hard delete, this means that the collection is really
     * deleted .
     *
     * @param  entityGuid GUID for the collection
     * @return Collection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeCollectionByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeCollectionByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied collection
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public Collection addCollectionClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addCollectionClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         Collection collectionClassifications = CollectionMapper.mapOmrsEntityDetailToCollection(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified Collection=" +  collectionClassifications);
         }
         return  collectionClassifications;
    }

    /**
     * Updates classifications to an existing collection represented by a guid.
     * @param  entityGuid globally unique identifier for the collection
     * @return classification for the given collection guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Collection updateCollectionClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateCollectionClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           Collection  collectionClassifications = CollectionMapper.mapOmrsEntityDetailToCollection(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  collectionClassifications;
    }

    /**
     * Deletes a given classification from an existing collection represented by a guid.
     * @param entityGuid  globally unique identifier for the collection
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Collection deleteCollectionClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteCollectionClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       Collection declassifiedCollection =  CollectionMapper.mapOmrsEntityDetailToCollection(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedCollection;
    }

    /**
      * Get the relationships associated with entity collection represented by a guid.
      * @param entityGuid  globally unique identifier for the collection
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getCollectionRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getCollectionRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an informalTag given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the informalTags relationships.
     * @param entityGuid GUID for the entity
     * @return InformalTag
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public InformalTag getInformalTagById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getInformalTagById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        InformalTag gotinformalTag = InformalTagMapper.mapOmrsEntityDetailToInformalTag(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotinformalTag );
        }
        return gotinformalTag;

    }
    /**
     * Create new informalTag.
     * @param informalTag
     * @return InformalTag
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public InformalTag createInformalTag(String userId,InformalTag informalTag)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createInformalTagById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("InformalTag");
        if (constraint!=null) {
             constraint.preCreate(informalTag);
        }

        EntityDetail entityDetail = InformalTagMapper.mapInformalTagToOmrsEntityDetail(informalTag);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        InformalTag createdInformalTag =  InformalTagMapper.mapOmrsEntityDetailToInformalTag(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created InformalTag="+ createdInformalTag );
        }
        return createdInformalTag;
    }
    /**
     * Update informalTag 
     * @param informalTag
     * @return InformalTag
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public InformalTag updateInformalTag(String userId, InformalTag informalTag)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateInformalTagById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = InformalTagMapper.mapInformalTagToOmrsEntityDetail(informalTag);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            InformalTag updatedInformalTag =  InformalTagMapper.mapOmrsEntityDetailToInformalTag(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated InformalTag="+ updatedInformalTag );
            }
            return updatedInformalTag;
        }

    /**
     * Delete an informalTag identified by its GUID. Delete is a soft delete, this means that the informalTag has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the informalTag
     * @return InformalTag
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteInformalTagByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteInformalTagByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an informalTag identified by its GUID. Delete is a hard delete, this means that the informalTag is really
     * deleted .
     *
     * @param  entityGuid GUID for the informalTag
     * @return InformalTag
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeInformalTagByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeInformalTagByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied informalTag
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public InformalTag addInformalTagClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addInformalTagClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         InformalTag informalTagClassifications = InformalTagMapper.mapOmrsEntityDetailToInformalTag(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified InformalTag=" +  informalTagClassifications);
         }
         return  informalTagClassifications;
    }

    /**
     * Updates classifications to an existing informalTag represented by a guid.
     * @param  entityGuid globally unique identifier for the informalTag
     * @return classification for the given informalTag guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public InformalTag updateInformalTagClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateInformalTagClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           InformalTag  informalTagClassifications = InformalTagMapper.mapOmrsEntityDetailToInformalTag(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  informalTagClassifications;
    }

    /**
     * Deletes a given classification from an existing informalTag represented by a guid.
     * @param entityGuid  globally unique identifier for the informalTag
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public InformalTag deleteInformalTagClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteInformalTagClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       InformalTag declassifiedInformalTag =  InformalTagMapper.mapOmrsEntityDetailToInformalTag(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedInformalTag;
    }

    /**
      * Get the relationships associated with entity informalTag represented by a guid.
      * @param entityGuid  globally unique identifier for the informalTag
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getInformalTagRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getInformalTagRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an governanceZone given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the governanceZones relationships.
     * @param entityGuid GUID for the entity
     * @return GovernanceZone
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public GovernanceZone getGovernanceZoneById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getGovernanceZoneById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        GovernanceZone gotgovernanceZone = GovernanceZoneMapper.mapOmrsEntityDetailToGovernanceZone(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotgovernanceZone );
        }
        return gotgovernanceZone;

    }
    /**
     * Create new governanceZone.
     * @param governanceZone
     * @return GovernanceZone
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public GovernanceZone createGovernanceZone(String userId,GovernanceZone governanceZone)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createGovernanceZoneById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("GovernanceZone");
        if (constraint!=null) {
             constraint.preCreate(governanceZone);
        }

        EntityDetail entityDetail = GovernanceZoneMapper.mapGovernanceZoneToOmrsEntityDetail(governanceZone);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        GovernanceZone createdGovernanceZone =  GovernanceZoneMapper.mapOmrsEntityDetailToGovernanceZone(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created GovernanceZone="+ createdGovernanceZone );
        }
        return createdGovernanceZone;
    }
    /**
     * Update governanceZone 
     * @param governanceZone
     * @return GovernanceZone
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public GovernanceZone updateGovernanceZone(String userId, GovernanceZone governanceZone)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateGovernanceZoneById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = GovernanceZoneMapper.mapGovernanceZoneToOmrsEntityDetail(governanceZone);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            GovernanceZone updatedGovernanceZone =  GovernanceZoneMapper.mapOmrsEntityDetailToGovernanceZone(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated GovernanceZone="+ updatedGovernanceZone );
            }
            return updatedGovernanceZone;
        }

    /**
     * Delete an governanceZone identified by its GUID. Delete is a soft delete, this means that the governanceZone has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the governanceZone
     * @return GovernanceZone
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteGovernanceZoneByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteGovernanceZoneByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an governanceZone identified by its GUID. Delete is a hard delete, this means that the governanceZone is really
     * deleted .
     *
     * @param  entityGuid GUID for the governanceZone
     * @return GovernanceZone
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeGovernanceZoneByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeGovernanceZoneByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied governanceZone
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public GovernanceZone addGovernanceZoneClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addGovernanceZoneClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         GovernanceZone governanceZoneClassifications = GovernanceZoneMapper.mapOmrsEntityDetailToGovernanceZone(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified GovernanceZone=" +  governanceZoneClassifications);
         }
         return  governanceZoneClassifications;
    }

    /**
     * Updates classifications to an existing governanceZone represented by a guid.
     * @param  entityGuid globally unique identifier for the governanceZone
     * @return classification for the given governanceZone guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GovernanceZone updateGovernanceZoneClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateGovernanceZoneClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           GovernanceZone  governanceZoneClassifications = GovernanceZoneMapper.mapOmrsEntityDetailToGovernanceZone(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  governanceZoneClassifications;
    }

    /**
     * Deletes a given classification from an existing governanceZone represented by a guid.
     * @param entityGuid  globally unique identifier for the governanceZone
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GovernanceZone deleteGovernanceZoneClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteGovernanceZoneClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       GovernanceZone declassifiedGovernanceZone =  GovernanceZoneMapper.mapOmrsEntityDetailToGovernanceZone(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedGovernanceZone;
    }

    /**
      * Get the relationships associated with entity governanceZone represented by a guid.
      * @param entityGuid  globally unique identifier for the governanceZone
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getGovernanceZoneRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getGovernanceZoneRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an person given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the persons relationships.
     * @param entityGuid GUID for the entity
     * @return Person
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public Person getPersonById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getPersonById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        Person gotperson = PersonMapper.mapOmrsEntityDetailToPerson(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotperson );
        }
        return gotperson;

    }
    /**
     * Create new person.
     * @param person
     * @return Person
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public Person createPerson(String userId,Person person)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createPersonById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("Person");
        if (constraint!=null) {
             constraint.preCreate(person);
        }

        EntityDetail entityDetail = PersonMapper.mapPersonToOmrsEntityDetail(person);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        Person createdPerson =  PersonMapper.mapOmrsEntityDetailToPerson(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created Person="+ createdPerson );
        }
        return createdPerson;
    }
    /**
     * Update person 
     * @param person
     * @return Person
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public Person updatePerson(String userId, Person person)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updatePersonById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = PersonMapper.mapPersonToOmrsEntityDetail(person);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            Person updatedPerson =  PersonMapper.mapOmrsEntityDetailToPerson(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated Person="+ updatedPerson );
            }
            return updatedPerson;
        }

    /**
     * Delete an person identified by its GUID. Delete is a soft delete, this means that the person has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the person
     * @return Person
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deletePersonByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deletePersonByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an person identified by its GUID. Delete is a hard delete, this means that the person is really
     * deleted .
     *
     * @param  entityGuid GUID for the person
     * @return Person
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgePersonByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgePersonByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied person
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public Person addPersonClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addPersonClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         Person personClassifications = PersonMapper.mapOmrsEntityDetailToPerson(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified Person=" +  personClassifications);
         }
         return  personClassifications;
    }

    /**
     * Updates classifications to an existing person represented by a guid.
     * @param  entityGuid globally unique identifier for the person
     * @return classification for the given person guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Person updatePersonClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updatePersonClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           Person  personClassifications = PersonMapper.mapOmrsEntityDetailToPerson(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  personClassifications;
    }

    /**
     * Deletes a given classification from an existing person represented by a guid.
     * @param entityGuid  globally unique identifier for the person
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Person deletePersonClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deletePersonClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       Person declassifiedPerson =  PersonMapper.mapOmrsEntityDetailToPerson(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedPerson;
    }

    /**
      * Get the relationships associated with entity person represented by a guid.
      * @param entityGuid  globally unique identifier for the person
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getPersonRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getPersonRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an application given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the applications relationships.
     * @param entityGuid GUID for the entity
     * @return Application
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public Application getApplicationById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getApplicationById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        Application gotapplication = ApplicationMapper.mapOmrsEntityDetailToApplication(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotapplication );
        }
        return gotapplication;

    }
    /**
     * Create new application.
     * @param application
     * @return Application
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public Application createApplication(String userId,Application application)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createApplicationById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("Application");
        if (constraint!=null) {
             constraint.preCreate(application);
        }

        EntityDetail entityDetail = ApplicationMapper.mapApplicationToOmrsEntityDetail(application);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        Application createdApplication =  ApplicationMapper.mapOmrsEntityDetailToApplication(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created Application="+ createdApplication );
        }
        return createdApplication;
    }
    /**
     * Update application 
     * @param application
     * @return Application
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public Application updateApplication(String userId, Application application)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateApplicationById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = ApplicationMapper.mapApplicationToOmrsEntityDetail(application);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            Application updatedApplication =  ApplicationMapper.mapOmrsEntityDetailToApplication(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated Application="+ updatedApplication );
            }
            return updatedApplication;
        }

    /**
     * Delete an application identified by its GUID. Delete is a soft delete, this means that the application has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the application
     * @return Application
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteApplicationByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteApplicationByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an application identified by its GUID. Delete is a hard delete, this means that the application is really
     * deleted .
     *
     * @param  entityGuid GUID for the application
     * @return Application
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeApplicationByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeApplicationByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied application
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public Application addApplicationClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addApplicationClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         Application applicationClassifications = ApplicationMapper.mapOmrsEntityDetailToApplication(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified Application=" +  applicationClassifications);
         }
         return  applicationClassifications;
    }

    /**
     * Updates classifications to an existing application represented by a guid.
     * @param  entityGuid globally unique identifier for the application
     * @return classification for the given application guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Application updateApplicationClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateApplicationClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           Application  applicationClassifications = ApplicationMapper.mapOmrsEntityDetailToApplication(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  applicationClassifications;
    }

    /**
     * Deletes a given classification from an existing application represented by a guid.
     * @param entityGuid  globally unique identifier for the application
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Application deleteApplicationClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteApplicationClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       Application declassifiedApplication =  ApplicationMapper.mapOmrsEntityDetailToApplication(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedApplication;
    }

    /**
      * Get the relationships associated with entity application represented by a guid.
      * @param entityGuid  globally unique identifier for the application
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getApplicationRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getApplicationRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an virtualContainer given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the virtualContainers relationships.
     * @param entityGuid GUID for the entity
     * @return VirtualContainer
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public VirtualContainer getVirtualContainerById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getVirtualContainerById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        VirtualContainer gotvirtualContainer = VirtualContainerMapper.mapOmrsEntityDetailToVirtualContainer(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotvirtualContainer );
        }
        return gotvirtualContainer;

    }
    /**
     * Create new virtualContainer.
     * @param virtualContainer
     * @return VirtualContainer
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public VirtualContainer createVirtualContainer(String userId,VirtualContainer virtualContainer)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createVirtualContainerById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("VirtualContainer");
        if (constraint!=null) {
             constraint.preCreate(virtualContainer);
        }

        EntityDetail entityDetail = VirtualContainerMapper.mapVirtualContainerToOmrsEntityDetail(virtualContainer);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        VirtualContainer createdVirtualContainer =  VirtualContainerMapper.mapOmrsEntityDetailToVirtualContainer(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created VirtualContainer="+ createdVirtualContainer );
        }
        return createdVirtualContainer;
    }
    /**
     * Update virtualContainer 
     * @param virtualContainer
     * @return VirtualContainer
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public VirtualContainer updateVirtualContainer(String userId, VirtualContainer virtualContainer)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateVirtualContainerById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = VirtualContainerMapper.mapVirtualContainerToOmrsEntityDetail(virtualContainer);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            VirtualContainer updatedVirtualContainer =  VirtualContainerMapper.mapOmrsEntityDetailToVirtualContainer(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated VirtualContainer="+ updatedVirtualContainer );
            }
            return updatedVirtualContainer;
        }

    /**
     * Delete an virtualContainer identified by its GUID. Delete is a soft delete, this means that the virtualContainer has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the virtualContainer
     * @return VirtualContainer
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteVirtualContainerByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteVirtualContainerByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an virtualContainer identified by its GUID. Delete is a hard delete, this means that the virtualContainer is really
     * deleted .
     *
     * @param  entityGuid GUID for the virtualContainer
     * @return VirtualContainer
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeVirtualContainerByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeVirtualContainerByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied virtualContainer
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public VirtualContainer addVirtualContainerClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addVirtualContainerClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         VirtualContainer virtualContainerClassifications = VirtualContainerMapper.mapOmrsEntityDetailToVirtualContainer(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified VirtualContainer=" +  virtualContainerClassifications);
         }
         return  virtualContainerClassifications;
    }

    /**
     * Updates classifications to an existing virtualContainer represented by a guid.
     * @param  entityGuid globally unique identifier for the virtualContainer
     * @return classification for the given virtualContainer guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public VirtualContainer updateVirtualContainerClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateVirtualContainerClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           VirtualContainer  virtualContainerClassifications = VirtualContainerMapper.mapOmrsEntityDetailToVirtualContainer(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  virtualContainerClassifications;
    }

    /**
     * Deletes a given classification from an existing virtualContainer represented by a guid.
     * @param entityGuid  globally unique identifier for the virtualContainer
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public VirtualContainer deleteVirtualContainerClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteVirtualContainerClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       VirtualContainer declassifiedVirtualContainer =  VirtualContainerMapper.mapOmrsEntityDetailToVirtualContainer(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedVirtualContainer;
    }

    /**
      * Get the relationships associated with entity virtualContainer represented by a guid.
      * @param entityGuid  globally unique identifier for the virtualContainer
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getVirtualContainerRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getVirtualContainerRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an governanceDriver given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the governanceDrivers relationships.
     * @param entityGuid GUID for the entity
     * @return GovernanceDriver
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public GovernanceDriver getGovernanceDriverById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getGovernanceDriverById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        GovernanceDriver gotgovernanceDriver = GovernanceDriverMapper.mapOmrsEntityDetailToGovernanceDriver(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotgovernanceDriver );
        }
        return gotgovernanceDriver;

    }
    /**
     * Create new governanceDriver.
     * @param governanceDriver
     * @return GovernanceDriver
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public GovernanceDriver createGovernanceDriver(String userId,GovernanceDriver governanceDriver)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createGovernanceDriverById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("GovernanceDriver");
        if (constraint!=null) {
             constraint.preCreate(governanceDriver);
        }

        EntityDetail entityDetail = GovernanceDriverMapper.mapGovernanceDriverToOmrsEntityDetail(governanceDriver);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        GovernanceDriver createdGovernanceDriver =  GovernanceDriverMapper.mapOmrsEntityDetailToGovernanceDriver(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created GovernanceDriver="+ createdGovernanceDriver );
        }
        return createdGovernanceDriver;
    }
    /**
     * Update governanceDriver 
     * @param governanceDriver
     * @return GovernanceDriver
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public GovernanceDriver updateGovernanceDriver(String userId, GovernanceDriver governanceDriver)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateGovernanceDriverById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = GovernanceDriverMapper.mapGovernanceDriverToOmrsEntityDetail(governanceDriver);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            GovernanceDriver updatedGovernanceDriver =  GovernanceDriverMapper.mapOmrsEntityDetailToGovernanceDriver(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated GovernanceDriver="+ updatedGovernanceDriver );
            }
            return updatedGovernanceDriver;
        }

    /**
     * Delete an governanceDriver identified by its GUID. Delete is a soft delete, this means that the governanceDriver has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the governanceDriver
     * @return GovernanceDriver
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteGovernanceDriverByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteGovernanceDriverByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an governanceDriver identified by its GUID. Delete is a hard delete, this means that the governanceDriver is really
     * deleted .
     *
     * @param  entityGuid GUID for the governanceDriver
     * @return GovernanceDriver
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeGovernanceDriverByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeGovernanceDriverByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied governanceDriver
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public GovernanceDriver addGovernanceDriverClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addGovernanceDriverClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         GovernanceDriver governanceDriverClassifications = GovernanceDriverMapper.mapOmrsEntityDetailToGovernanceDriver(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified GovernanceDriver=" +  governanceDriverClassifications);
         }
         return  governanceDriverClassifications;
    }

    /**
     * Updates classifications to an existing governanceDriver represented by a guid.
     * @param  entityGuid globally unique identifier for the governanceDriver
     * @return classification for the given governanceDriver guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GovernanceDriver updateGovernanceDriverClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateGovernanceDriverClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           GovernanceDriver  governanceDriverClassifications = GovernanceDriverMapper.mapOmrsEntityDetailToGovernanceDriver(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  governanceDriverClassifications;
    }

    /**
     * Deletes a given classification from an existing governanceDriver represented by a guid.
     * @param entityGuid  globally unique identifier for the governanceDriver
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GovernanceDriver deleteGovernanceDriverClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteGovernanceDriverClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       GovernanceDriver declassifiedGovernanceDriver =  GovernanceDriverMapper.mapOmrsEntityDetailToGovernanceDriver(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedGovernanceDriver;
    }

    /**
      * Get the relationships associated with entity governanceDriver represented by a guid.
      * @param entityGuid  globally unique identifier for the governanceDriver
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getGovernanceDriverRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getGovernanceDriverRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an meeting given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the meetings relationships.
     * @param entityGuid GUID for the entity
     * @return Meeting
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public Meeting getMeetingById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getMeetingById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        Meeting gotmeeting = MeetingMapper.mapOmrsEntityDetailToMeeting(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotmeeting );
        }
        return gotmeeting;

    }
    /**
     * Create new meeting.
     * @param meeting
     * @return Meeting
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public Meeting createMeeting(String userId,Meeting meeting)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createMeetingById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("Meeting");
        if (constraint!=null) {
             constraint.preCreate(meeting);
        }

        EntityDetail entityDetail = MeetingMapper.mapMeetingToOmrsEntityDetail(meeting);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        Meeting createdMeeting =  MeetingMapper.mapOmrsEntityDetailToMeeting(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created Meeting="+ createdMeeting );
        }
        return createdMeeting;
    }
    /**
     * Update meeting 
     * @param meeting
     * @return Meeting
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public Meeting updateMeeting(String userId, Meeting meeting)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateMeetingById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = MeetingMapper.mapMeetingToOmrsEntityDetail(meeting);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            Meeting updatedMeeting =  MeetingMapper.mapOmrsEntityDetailToMeeting(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated Meeting="+ updatedMeeting );
            }
            return updatedMeeting;
        }

    /**
     * Delete an meeting identified by its GUID. Delete is a soft delete, this means that the meeting has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the meeting
     * @return Meeting
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteMeetingByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteMeetingByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an meeting identified by its GUID. Delete is a hard delete, this means that the meeting is really
     * deleted .
     *
     * @param  entityGuid GUID for the meeting
     * @return Meeting
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeMeetingByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeMeetingByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied meeting
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public Meeting addMeetingClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addMeetingClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         Meeting meetingClassifications = MeetingMapper.mapOmrsEntityDetailToMeeting(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified Meeting=" +  meetingClassifications);
         }
         return  meetingClassifications;
    }

    /**
     * Updates classifications to an existing meeting represented by a guid.
     * @param  entityGuid globally unique identifier for the meeting
     * @return classification for the given meeting guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Meeting updateMeetingClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateMeetingClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           Meeting  meetingClassifications = MeetingMapper.mapOmrsEntityDetailToMeeting(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  meetingClassifications;
    }

    /**
     * Deletes a given classification from an existing meeting represented by a guid.
     * @param entityGuid  globally unique identifier for the meeting
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Meeting deleteMeetingClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteMeetingClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       Meeting declassifiedMeeting =  MeetingMapper.mapOmrsEntityDetailToMeeting(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedMeeting;
    }

    /**
      * Get the relationships associated with entity meeting represented by a guid.
      * @param entityGuid  globally unique identifier for the meeting
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getMeetingRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getMeetingRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an rating given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the ratings relationships.
     * @param entityGuid GUID for the entity
     * @return Rating
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public Rating getRatingById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getRatingById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        Rating gotrating = RatingMapper.mapOmrsEntityDetailToRating(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotrating );
        }
        return gotrating;

    }
    /**
     * Create new rating.
     * @param rating
     * @return Rating
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public Rating createRating(String userId,Rating rating)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createRatingById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("Rating");
        if (constraint!=null) {
             constraint.preCreate(rating);
        }

        EntityDetail entityDetail = RatingMapper.mapRatingToOmrsEntityDetail(rating);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        Rating createdRating =  RatingMapper.mapOmrsEntityDetailToRating(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created Rating="+ createdRating );
        }
        return createdRating;
    }
    /**
     * Update rating 
     * @param rating
     * @return Rating
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public Rating updateRating(String userId, Rating rating)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateRatingById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = RatingMapper.mapRatingToOmrsEntityDetail(rating);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            Rating updatedRating =  RatingMapper.mapOmrsEntityDetailToRating(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated Rating="+ updatedRating );
            }
            return updatedRating;
        }

    /**
     * Delete an rating identified by its GUID. Delete is a soft delete, this means that the rating has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the rating
     * @return Rating
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteRatingByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteRatingByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an rating identified by its GUID. Delete is a hard delete, this means that the rating is really
     * deleted .
     *
     * @param  entityGuid GUID for the rating
     * @return Rating
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeRatingByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeRatingByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied rating
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public Rating addRatingClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addRatingClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         Rating ratingClassifications = RatingMapper.mapOmrsEntityDetailToRating(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified Rating=" +  ratingClassifications);
         }
         return  ratingClassifications;
    }

    /**
     * Updates classifications to an existing rating represented by a guid.
     * @param  entityGuid globally unique identifier for the rating
     * @return classification for the given rating guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Rating updateRatingClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateRatingClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           Rating  ratingClassifications = RatingMapper.mapOmrsEntityDetailToRating(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  ratingClassifications;
    }

    /**
     * Deletes a given classification from an existing rating represented by a guid.
     * @param entityGuid  globally unique identifier for the rating
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Rating deleteRatingClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteRatingClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       Rating declassifiedRating =  RatingMapper.mapOmrsEntityDetailToRating(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedRating;
    }

    /**
      * Get the relationships associated with entity rating represented by a guid.
      * @param entityGuid  globally unique identifier for the rating
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getRatingRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getRatingRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an projectCharter given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the projectCharters relationships.
     * @param entityGuid GUID for the entity
     * @return ProjectCharter
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public ProjectCharter getProjectCharterById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getProjectCharterById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        ProjectCharter gotprojectCharter = ProjectCharterMapper.mapOmrsEntityDetailToProjectCharter(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotprojectCharter );
        }
        return gotprojectCharter;

    }
    /**
     * Create new projectCharter.
     * @param projectCharter
     * @return ProjectCharter
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public ProjectCharter createProjectCharter(String userId,ProjectCharter projectCharter)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createProjectCharterById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("ProjectCharter");
        if (constraint!=null) {
             constraint.preCreate(projectCharter);
        }

        EntityDetail entityDetail = ProjectCharterMapper.mapProjectCharterToOmrsEntityDetail(projectCharter);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        ProjectCharter createdProjectCharter =  ProjectCharterMapper.mapOmrsEntityDetailToProjectCharter(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created ProjectCharter="+ createdProjectCharter );
        }
        return createdProjectCharter;
    }
    /**
     * Update projectCharter 
     * @param projectCharter
     * @return ProjectCharter
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public ProjectCharter updateProjectCharter(String userId, ProjectCharter projectCharter)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateProjectCharterById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = ProjectCharterMapper.mapProjectCharterToOmrsEntityDetail(projectCharter);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            ProjectCharter updatedProjectCharter =  ProjectCharterMapper.mapOmrsEntityDetailToProjectCharter(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated ProjectCharter="+ updatedProjectCharter );
            }
            return updatedProjectCharter;
        }

    /**
     * Delete an projectCharter identified by its GUID. Delete is a soft delete, this means that the projectCharter has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the projectCharter
     * @return ProjectCharter
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteProjectCharterByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteProjectCharterByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an projectCharter identified by its GUID. Delete is a hard delete, this means that the projectCharter is really
     * deleted .
     *
     * @param  entityGuid GUID for the projectCharter
     * @return ProjectCharter
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeProjectCharterByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeProjectCharterByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied projectCharter
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public ProjectCharter addProjectCharterClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addProjectCharterClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         ProjectCharter projectCharterClassifications = ProjectCharterMapper.mapOmrsEntityDetailToProjectCharter(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified ProjectCharter=" +  projectCharterClassifications);
         }
         return  projectCharterClassifications;
    }

    /**
     * Updates classifications to an existing projectCharter represented by a guid.
     * @param  entityGuid globally unique identifier for the projectCharter
     * @return classification for the given projectCharter guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public ProjectCharter updateProjectCharterClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateProjectCharterClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           ProjectCharter  projectCharterClassifications = ProjectCharterMapper.mapOmrsEntityDetailToProjectCharter(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  projectCharterClassifications;
    }

    /**
     * Deletes a given classification from an existing projectCharter represented by a guid.
     * @param entityGuid  globally unique identifier for the projectCharter
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public ProjectCharter deleteProjectCharterClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteProjectCharterClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       ProjectCharter declassifiedProjectCharter =  ProjectCharterMapper.mapOmrsEntityDetailToProjectCharter(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedProjectCharter;
    }

    /**
      * Get the relationships associated with entity projectCharter represented by a guid.
      * @param entityGuid  globally unique identifier for the projectCharter
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getProjectCharterRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getProjectCharterRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an softwareServerCapability given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the softwareServerCapabilities relationships.
     * @param entityGuid GUID for the entity
     * @return SoftwareServerCapability
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public SoftwareServerCapability getSoftwareServerCapabilityById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getSoftwareServerCapabilityById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        SoftwareServerCapability gotsoftwareServerCapability = SoftwareServerCapabilityMapper.mapOmrsEntityDetailToSoftwareServerCapability(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotsoftwareServerCapability );
        }
        return gotsoftwareServerCapability;

    }
    /**
     * Create new softwareServerCapability.
     * @param softwareServerCapability
     * @return SoftwareServerCapability
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public SoftwareServerCapability createSoftwareServerCapability(String userId,SoftwareServerCapability softwareServerCapability)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createSoftwareServerCapabilityById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("SoftwareServerCapability");
        if (constraint!=null) {
             constraint.preCreate(softwareServerCapability);
        }

        EntityDetail entityDetail = SoftwareServerCapabilityMapper.mapSoftwareServerCapabilityToOmrsEntityDetail(softwareServerCapability);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        SoftwareServerCapability createdSoftwareServerCapability =  SoftwareServerCapabilityMapper.mapOmrsEntityDetailToSoftwareServerCapability(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created SoftwareServerCapability="+ createdSoftwareServerCapability );
        }
        return createdSoftwareServerCapability;
    }
    /**
     * Update softwareServerCapability 
     * @param softwareServerCapability
     * @return SoftwareServerCapability
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public SoftwareServerCapability updateSoftwareServerCapability(String userId, SoftwareServerCapability softwareServerCapability)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateSoftwareServerCapabilityById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = SoftwareServerCapabilityMapper.mapSoftwareServerCapabilityToOmrsEntityDetail(softwareServerCapability);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            SoftwareServerCapability updatedSoftwareServerCapability =  SoftwareServerCapabilityMapper.mapOmrsEntityDetailToSoftwareServerCapability(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated SoftwareServerCapability="+ updatedSoftwareServerCapability );
            }
            return updatedSoftwareServerCapability;
        }

    /**
     * Delete an softwareServerCapability identified by its GUID. Delete is a soft delete, this means that the softwareServerCapability has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the softwareServerCapability
     * @return SoftwareServerCapability
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteSoftwareServerCapabilityByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteSoftwareServerCapabilityByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an softwareServerCapability identified by its GUID. Delete is a hard delete, this means that the softwareServerCapability is really
     * deleted .
     *
     * @param  entityGuid GUID for the softwareServerCapability
     * @return SoftwareServerCapability
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeSoftwareServerCapabilityByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeSoftwareServerCapabilityByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied softwareServerCapability
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public SoftwareServerCapability addSoftwareServerCapabilityClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addSoftwareServerCapabilityClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         SoftwareServerCapability softwareServerCapabilityClassifications = SoftwareServerCapabilityMapper.mapOmrsEntityDetailToSoftwareServerCapability(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified SoftwareServerCapability=" +  softwareServerCapabilityClassifications);
         }
         return  softwareServerCapabilityClassifications;
    }

    /**
     * Updates classifications to an existing softwareServerCapability represented by a guid.
     * @param  entityGuid globally unique identifier for the softwareServerCapability
     * @return classification for the given softwareServerCapability guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public SoftwareServerCapability updateSoftwareServerCapabilityClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateSoftwareServerCapabilityClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           SoftwareServerCapability  softwareServerCapabilityClassifications = SoftwareServerCapabilityMapper.mapOmrsEntityDetailToSoftwareServerCapability(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  softwareServerCapabilityClassifications;
    }

    /**
     * Deletes a given classification from an existing softwareServerCapability represented by a guid.
     * @param entityGuid  globally unique identifier for the softwareServerCapability
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public SoftwareServerCapability deleteSoftwareServerCapabilityClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteSoftwareServerCapabilityClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       SoftwareServerCapability declassifiedSoftwareServerCapability =  SoftwareServerCapabilityMapper.mapOmrsEntityDetailToSoftwareServerCapability(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedSoftwareServerCapability;
    }

    /**
      * Get the relationships associated with entity softwareServerCapability represented by a guid.
      * @param entityGuid  globally unique identifier for the softwareServerCapability
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getSoftwareServerCapabilityRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getSoftwareServerCapabilityRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an licenseType given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the licenseTypes relationships.
     * @param entityGuid GUID for the entity
     * @return LicenseType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public LicenseType getLicenseTypeById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getLicenseTypeById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        LicenseType gotlicenseType = LicenseTypeMapper.mapOmrsEntityDetailToLicenseType(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotlicenseType );
        }
        return gotlicenseType;

    }
    /**
     * Create new licenseType.
     * @param licenseType
     * @return LicenseType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public LicenseType createLicenseType(String userId,LicenseType licenseType)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createLicenseTypeById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("LicenseType");
        if (constraint!=null) {
             constraint.preCreate(licenseType);
        }

        EntityDetail entityDetail = LicenseTypeMapper.mapLicenseTypeToOmrsEntityDetail(licenseType);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        LicenseType createdLicenseType =  LicenseTypeMapper.mapOmrsEntityDetailToLicenseType(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created LicenseType="+ createdLicenseType );
        }
        return createdLicenseType;
    }
    /**
     * Update licenseType 
     * @param licenseType
     * @return LicenseType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public LicenseType updateLicenseType(String userId, LicenseType licenseType)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateLicenseTypeById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = LicenseTypeMapper.mapLicenseTypeToOmrsEntityDetail(licenseType);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            LicenseType updatedLicenseType =  LicenseTypeMapper.mapOmrsEntityDetailToLicenseType(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated LicenseType="+ updatedLicenseType );
            }
            return updatedLicenseType;
        }

    /**
     * Delete an licenseType identified by its GUID. Delete is a soft delete, this means that the licenseType has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the licenseType
     * @return LicenseType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteLicenseTypeByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteLicenseTypeByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an licenseType identified by its GUID. Delete is a hard delete, this means that the licenseType is really
     * deleted .
     *
     * @param  entityGuid GUID for the licenseType
     * @return LicenseType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeLicenseTypeByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeLicenseTypeByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied licenseType
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public LicenseType addLicenseTypeClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addLicenseTypeClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         LicenseType licenseTypeClassifications = LicenseTypeMapper.mapOmrsEntityDetailToLicenseType(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified LicenseType=" +  licenseTypeClassifications);
         }
         return  licenseTypeClassifications;
    }

    /**
     * Updates classifications to an existing licenseType represented by a guid.
     * @param  entityGuid globally unique identifier for the licenseType
     * @return classification for the given licenseType guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public LicenseType updateLicenseTypeClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateLicenseTypeClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           LicenseType  licenseTypeClassifications = LicenseTypeMapper.mapOmrsEntityDetailToLicenseType(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  licenseTypeClassifications;
    }

    /**
     * Deletes a given classification from an existing licenseType represented by a guid.
     * @param entityGuid  globally unique identifier for the licenseType
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public LicenseType deleteLicenseTypeClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteLicenseTypeClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       LicenseType declassifiedLicenseType =  LicenseTypeMapper.mapOmrsEntityDetailToLicenseType(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedLicenseType;
    }

    /**
      * Get the relationships associated with entity licenseType represented by a guid.
      * @param entityGuid  globally unique identifier for the licenseType
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getLicenseTypeRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getLicenseTypeRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an graphVertex given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the graphVertexs relationships.
     * @param entityGuid GUID for the entity
     * @return GraphVertex
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public GraphVertex getGraphVertexById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getGraphVertexById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        GraphVertex gotgraphVertex = GraphVertexMapper.mapOmrsEntityDetailToGraphVertex(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotgraphVertex );
        }
        return gotgraphVertex;

    }
    /**
     * Create new graphVertex.
     * @param graphVertex
     * @return GraphVertex
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public GraphVertex createGraphVertex(String userId,GraphVertex graphVertex)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createGraphVertexById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("GraphVertex");
        if (constraint!=null) {
             constraint.preCreate(graphVertex);
        }

        EntityDetail entityDetail = GraphVertexMapper.mapGraphVertexToOmrsEntityDetail(graphVertex);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        GraphVertex createdGraphVertex =  GraphVertexMapper.mapOmrsEntityDetailToGraphVertex(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created GraphVertex="+ createdGraphVertex );
        }
        return createdGraphVertex;
    }
    /**
     * Update graphVertex 
     * @param graphVertex
     * @return GraphVertex
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public GraphVertex updateGraphVertex(String userId, GraphVertex graphVertex)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateGraphVertexById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = GraphVertexMapper.mapGraphVertexToOmrsEntityDetail(graphVertex);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            GraphVertex updatedGraphVertex =  GraphVertexMapper.mapOmrsEntityDetailToGraphVertex(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated GraphVertex="+ updatedGraphVertex );
            }
            return updatedGraphVertex;
        }

    /**
     * Delete an graphVertex identified by its GUID. Delete is a soft delete, this means that the graphVertex has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the graphVertex
     * @return GraphVertex
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteGraphVertexByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteGraphVertexByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an graphVertex identified by its GUID. Delete is a hard delete, this means that the graphVertex is really
     * deleted .
     *
     * @param  entityGuid GUID for the graphVertex
     * @return GraphVertex
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeGraphVertexByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeGraphVertexByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied graphVertex
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public GraphVertex addGraphVertexClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addGraphVertexClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         GraphVertex graphVertexClassifications = GraphVertexMapper.mapOmrsEntityDetailToGraphVertex(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified GraphVertex=" +  graphVertexClassifications);
         }
         return  graphVertexClassifications;
    }

    /**
     * Updates classifications to an existing graphVertex represented by a guid.
     * @param  entityGuid globally unique identifier for the graphVertex
     * @return classification for the given graphVertex guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GraphVertex updateGraphVertexClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateGraphVertexClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           GraphVertex  graphVertexClassifications = GraphVertexMapper.mapOmrsEntityDetailToGraphVertex(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  graphVertexClassifications;
    }

    /**
     * Deletes a given classification from an existing graphVertex represented by a guid.
     * @param entityGuid  globally unique identifier for the graphVertex
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GraphVertex deleteGraphVertexClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteGraphVertexClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       GraphVertex declassifiedGraphVertex =  GraphVertexMapper.mapOmrsEntityDetailToGraphVertex(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedGraphVertex;
    }

    /**
      * Get the relationships associated with entity graphVertex represented by a guid.
      * @param entityGuid  globally unique identifier for the graphVertex
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getGraphVertexRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getGraphVertexRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an glossaryTerm given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the glossaryTerms relationships.
     * @param entityGuid GUID for the entity
     * @return GlossaryTerm
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public GlossaryTerm getGlossaryTermById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getGlossaryTermById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        GlossaryTerm gotglossaryTerm = GlossaryTermMapper.mapOmrsEntityDetailToGlossaryTerm(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotglossaryTerm );
        }
        return gotglossaryTerm;

    }
    /**
     * Create new glossaryTerm.
     * @param glossaryTerm
     * @return GlossaryTerm
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public GlossaryTerm createGlossaryTerm(String userId,GlossaryTerm glossaryTerm)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createGlossaryTermById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("GlossaryTerm");
        if (constraint!=null) {
             constraint.preCreate(glossaryTerm);
        }

        EntityDetail entityDetail = GlossaryTermMapper.mapGlossaryTermToOmrsEntityDetail(glossaryTerm);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        GlossaryTerm createdGlossaryTerm =  GlossaryTermMapper.mapOmrsEntityDetailToGlossaryTerm(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created GlossaryTerm="+ createdGlossaryTerm );
        }
        return createdGlossaryTerm;
    }
    /**
     * Update glossaryTerm 
     * @param glossaryTerm
     * @return GlossaryTerm
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public GlossaryTerm updateGlossaryTerm(String userId, GlossaryTerm glossaryTerm)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateGlossaryTermById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = GlossaryTermMapper.mapGlossaryTermToOmrsEntityDetail(glossaryTerm);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            GlossaryTerm updatedGlossaryTerm =  GlossaryTermMapper.mapOmrsEntityDetailToGlossaryTerm(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated GlossaryTerm="+ updatedGlossaryTerm );
            }
            return updatedGlossaryTerm;
        }

    /**
     * Delete an glossaryTerm identified by its GUID. Delete is a soft delete, this means that the glossaryTerm has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the glossaryTerm
     * @return GlossaryTerm
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteGlossaryTermByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteGlossaryTermByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an glossaryTerm identified by its GUID. Delete is a hard delete, this means that the glossaryTerm is really
     * deleted .
     *
     * @param  entityGuid GUID for the glossaryTerm
     * @return GlossaryTerm
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeGlossaryTermByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeGlossaryTermByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied glossaryTerm
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public GlossaryTerm addGlossaryTermClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addGlossaryTermClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         GlossaryTerm glossaryTermClassifications = GlossaryTermMapper.mapOmrsEntityDetailToGlossaryTerm(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified GlossaryTerm=" +  glossaryTermClassifications);
         }
         return  glossaryTermClassifications;
    }

    /**
     * Updates classifications to an existing glossaryTerm represented by a guid.
     * @param  entityGuid globally unique identifier for the glossaryTerm
     * @return classification for the given glossaryTerm guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GlossaryTerm updateGlossaryTermClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateGlossaryTermClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           GlossaryTerm  glossaryTermClassifications = GlossaryTermMapper.mapOmrsEntityDetailToGlossaryTerm(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  glossaryTermClassifications;
    }

    /**
     * Deletes a given classification from an existing glossaryTerm represented by a guid.
     * @param entityGuid  globally unique identifier for the glossaryTerm
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GlossaryTerm deleteGlossaryTermClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteGlossaryTermClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       GlossaryTerm declassifiedGlossaryTerm =  GlossaryTermMapper.mapOmrsEntityDetailToGlossaryTerm(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedGlossaryTerm;
    }

    /**
      * Get the relationships associated with entity glossaryTerm represented by a guid.
      * @param entityGuid  globally unique identifier for the glossaryTerm
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getGlossaryTermRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getGlossaryTermRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an team given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the teams relationships.
     * @param entityGuid GUID for the entity
     * @return Team
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public Team getTeamById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getTeamById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        Team gotteam = TeamMapper.mapOmrsEntityDetailToTeam(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotteam );
        }
        return gotteam;

    }
    /**
     * Create new team.
     * @param team
     * @return Team
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public Team createTeam(String userId,Team team)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createTeamById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("Team");
        if (constraint!=null) {
             constraint.preCreate(team);
        }

        EntityDetail entityDetail = TeamMapper.mapTeamToOmrsEntityDetail(team);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        Team createdTeam =  TeamMapper.mapOmrsEntityDetailToTeam(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created Team="+ createdTeam );
        }
        return createdTeam;
    }
    /**
     * Update team 
     * @param team
     * @return Team
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public Team updateTeam(String userId, Team team)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateTeamById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = TeamMapper.mapTeamToOmrsEntityDetail(team);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            Team updatedTeam =  TeamMapper.mapOmrsEntityDetailToTeam(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated Team="+ updatedTeam );
            }
            return updatedTeam;
        }

    /**
     * Delete an team identified by its GUID. Delete is a soft delete, this means that the team has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the team
     * @return Team
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteTeamByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteTeamByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an team identified by its GUID. Delete is a hard delete, this means that the team is really
     * deleted .
     *
     * @param  entityGuid GUID for the team
     * @return Team
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeTeamByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeTeamByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied team
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public Team addTeamClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addTeamClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         Team teamClassifications = TeamMapper.mapOmrsEntityDetailToTeam(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified Team=" +  teamClassifications);
         }
         return  teamClassifications;
    }

    /**
     * Updates classifications to an existing team represented by a guid.
     * @param  entityGuid globally unique identifier for the team
     * @return classification for the given team guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Team updateTeamClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateTeamClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           Team  teamClassifications = TeamMapper.mapOmrsEntityDetailToTeam(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  teamClassifications;
    }

    /**
     * Deletes a given classification from an existing team represented by a guid.
     * @param entityGuid  globally unique identifier for the team
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Team deleteTeamClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteTeamClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       Team declassifiedTeam =  TeamMapper.mapOmrsEntityDetailToTeam(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedTeam;
    }

    /**
      * Get the relationships associated with entity team represented by a guid.
      * @param entityGuid  globally unique identifier for the team
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getTeamRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getTeamRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an metadataCollection given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the metadataCollections relationships.
     * @param entityGuid GUID for the entity
     * @return MetadataCollection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public MetadataCollection getMetadataCollectionById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getMetadataCollectionById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        MetadataCollection gotmetadataCollection = MetadataCollectionMapper.mapOmrsEntityDetailToMetadataCollection(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotmetadataCollection );
        }
        return gotmetadataCollection;

    }
    /**
     * Create new metadataCollection.
     * @param metadataCollection
     * @return MetadataCollection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public MetadataCollection createMetadataCollection(String userId,MetadataCollection metadataCollection)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createMetadataCollectionById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("MetadataCollection");
        if (constraint!=null) {
             constraint.preCreate(metadataCollection);
        }

        EntityDetail entityDetail = MetadataCollectionMapper.mapMetadataCollectionToOmrsEntityDetail(metadataCollection);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        MetadataCollection createdMetadataCollection =  MetadataCollectionMapper.mapOmrsEntityDetailToMetadataCollection(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created MetadataCollection="+ createdMetadataCollection );
        }
        return createdMetadataCollection;
    }
    /**
     * Update metadataCollection 
     * @param metadataCollection
     * @return MetadataCollection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public MetadataCollection updateMetadataCollection(String userId, MetadataCollection metadataCollection)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateMetadataCollectionById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = MetadataCollectionMapper.mapMetadataCollectionToOmrsEntityDetail(metadataCollection);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            MetadataCollection updatedMetadataCollection =  MetadataCollectionMapper.mapOmrsEntityDetailToMetadataCollection(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated MetadataCollection="+ updatedMetadataCollection );
            }
            return updatedMetadataCollection;
        }

    /**
     * Delete an metadataCollection identified by its GUID. Delete is a soft delete, this means that the metadataCollection has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the metadataCollection
     * @return MetadataCollection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteMetadataCollectionByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteMetadataCollectionByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an metadataCollection identified by its GUID. Delete is a hard delete, this means that the metadataCollection is really
     * deleted .
     *
     * @param  entityGuid GUID for the metadataCollection
     * @return MetadataCollection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeMetadataCollectionByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeMetadataCollectionByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied metadataCollection
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public MetadataCollection addMetadataCollectionClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addMetadataCollectionClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         MetadataCollection metadataCollectionClassifications = MetadataCollectionMapper.mapOmrsEntityDetailToMetadataCollection(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified MetadataCollection=" +  metadataCollectionClassifications);
         }
         return  metadataCollectionClassifications;
    }

    /**
     * Updates classifications to an existing metadataCollection represented by a guid.
     * @param  entityGuid globally unique identifier for the metadataCollection
     * @return classification for the given metadataCollection guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public MetadataCollection updateMetadataCollectionClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateMetadataCollectionClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           MetadataCollection  metadataCollectionClassifications = MetadataCollectionMapper.mapOmrsEntityDetailToMetadataCollection(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  metadataCollectionClassifications;
    }

    /**
     * Deletes a given classification from an existing metadataCollection represented by a guid.
     * @param entityGuid  globally unique identifier for the metadataCollection
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public MetadataCollection deleteMetadataCollectionClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteMetadataCollectionClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       MetadataCollection declassifiedMetadataCollection =  MetadataCollectionMapper.mapOmrsEntityDetailToMetadataCollection(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedMetadataCollection;
    }

    /**
      * Get the relationships associated with entity metadataCollection represented by a guid.
      * @param entityGuid  globally unique identifier for the metadataCollection
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getMetadataCollectionRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getMetadataCollectionRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an governanceControl given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the governanceControls relationships.
     * @param entityGuid GUID for the entity
     * @return GovernanceControl
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public GovernanceControl getGovernanceControlById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getGovernanceControlById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        GovernanceControl gotgovernanceControl = GovernanceControlMapper.mapOmrsEntityDetailToGovernanceControl(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotgovernanceControl );
        }
        return gotgovernanceControl;

    }
    /**
     * Create new governanceControl.
     * @param governanceControl
     * @return GovernanceControl
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public GovernanceControl createGovernanceControl(String userId,GovernanceControl governanceControl)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createGovernanceControlById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("GovernanceControl");
        if (constraint!=null) {
             constraint.preCreate(governanceControl);
        }

        EntityDetail entityDetail = GovernanceControlMapper.mapGovernanceControlToOmrsEntityDetail(governanceControl);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        GovernanceControl createdGovernanceControl =  GovernanceControlMapper.mapOmrsEntityDetailToGovernanceControl(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created GovernanceControl="+ createdGovernanceControl );
        }
        return createdGovernanceControl;
    }
    /**
     * Update governanceControl 
     * @param governanceControl
     * @return GovernanceControl
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public GovernanceControl updateGovernanceControl(String userId, GovernanceControl governanceControl)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateGovernanceControlById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = GovernanceControlMapper.mapGovernanceControlToOmrsEntityDetail(governanceControl);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            GovernanceControl updatedGovernanceControl =  GovernanceControlMapper.mapOmrsEntityDetailToGovernanceControl(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated GovernanceControl="+ updatedGovernanceControl );
            }
            return updatedGovernanceControl;
        }

    /**
     * Delete an governanceControl identified by its GUID. Delete is a soft delete, this means that the governanceControl has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the governanceControl
     * @return GovernanceControl
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteGovernanceControlByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteGovernanceControlByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an governanceControl identified by its GUID. Delete is a hard delete, this means that the governanceControl is really
     * deleted .
     *
     * @param  entityGuid GUID for the governanceControl
     * @return GovernanceControl
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeGovernanceControlByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeGovernanceControlByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied governanceControl
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public GovernanceControl addGovernanceControlClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addGovernanceControlClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         GovernanceControl governanceControlClassifications = GovernanceControlMapper.mapOmrsEntityDetailToGovernanceControl(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified GovernanceControl=" +  governanceControlClassifications);
         }
         return  governanceControlClassifications;
    }

    /**
     * Updates classifications to an existing governanceControl represented by a guid.
     * @param  entityGuid globally unique identifier for the governanceControl
     * @return classification for the given governanceControl guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GovernanceControl updateGovernanceControlClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateGovernanceControlClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           GovernanceControl  governanceControlClassifications = GovernanceControlMapper.mapOmrsEntityDetailToGovernanceControl(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  governanceControlClassifications;
    }

    /**
     * Deletes a given classification from an existing governanceControl represented by a guid.
     * @param entityGuid  globally unique identifier for the governanceControl
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GovernanceControl deleteGovernanceControlClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteGovernanceControlClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       GovernanceControl declassifiedGovernanceControl =  GovernanceControlMapper.mapOmrsEntityDetailToGovernanceControl(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedGovernanceControl;
    }

    /**
      * Get the relationships associated with entity governanceControl represented by a guid.
      * @param entityGuid  globally unique identifier for the governanceControl
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getGovernanceControlRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getGovernanceControlRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an topic given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the topics relationships.
     * @param entityGuid GUID for the entity
     * @return Topic
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public Topic getTopicById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getTopicById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        Topic gottopic = TopicMapper.mapOmrsEntityDetailToTopic(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gottopic );
        }
        return gottopic;

    }
    /**
     * Create new topic.
     * @param topic
     * @return Topic
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public Topic createTopic(String userId,Topic topic)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createTopicById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("Topic");
        if (constraint!=null) {
             constraint.preCreate(topic);
        }

        EntityDetail entityDetail = TopicMapper.mapTopicToOmrsEntityDetail(topic);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        Topic createdTopic =  TopicMapper.mapOmrsEntityDetailToTopic(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created Topic="+ createdTopic );
        }
        return createdTopic;
    }
    /**
     * Update topic 
     * @param topic
     * @return Topic
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public Topic updateTopic(String userId, Topic topic)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateTopicById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = TopicMapper.mapTopicToOmrsEntityDetail(topic);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            Topic updatedTopic =  TopicMapper.mapOmrsEntityDetailToTopic(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated Topic="+ updatedTopic );
            }
            return updatedTopic;
        }

    /**
     * Delete an topic identified by its GUID. Delete is a soft delete, this means that the topic has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the topic
     * @return Topic
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteTopicByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteTopicByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an topic identified by its GUID. Delete is a hard delete, this means that the topic is really
     * deleted .
     *
     * @param  entityGuid GUID for the topic
     * @return Topic
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeTopicByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeTopicByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied topic
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public Topic addTopicClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addTopicClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         Topic topicClassifications = TopicMapper.mapOmrsEntityDetailToTopic(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified Topic=" +  topicClassifications);
         }
         return  topicClassifications;
    }

    /**
     * Updates classifications to an existing topic represented by a guid.
     * @param  entityGuid globally unique identifier for the topic
     * @return classification for the given topic guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Topic updateTopicClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateTopicClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           Topic  topicClassifications = TopicMapper.mapOmrsEntityDetailToTopic(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  topicClassifications;
    }

    /**
     * Deletes a given classification from an existing topic represented by a guid.
     * @param entityGuid  globally unique identifier for the topic
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Topic deleteTopicClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteTopicClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       Topic declassifiedTopic =  TopicMapper.mapOmrsEntityDetailToTopic(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedTopic;
    }

    /**
      * Get the relationships associated with entity topic represented by a guid.
      * @param entityGuid  globally unique identifier for the topic
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getTopicRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getTopicRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an softwareServer given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the softwareServers relationships.
     * @param entityGuid GUID for the entity
     * @return SoftwareServer
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public SoftwareServer getSoftwareServerById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getSoftwareServerById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        SoftwareServer gotsoftwareServer = SoftwareServerMapper.mapOmrsEntityDetailToSoftwareServer(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotsoftwareServer );
        }
        return gotsoftwareServer;

    }
    /**
     * Create new softwareServer.
     * @param softwareServer
     * @return SoftwareServer
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public SoftwareServer createSoftwareServer(String userId,SoftwareServer softwareServer)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createSoftwareServerById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("SoftwareServer");
        if (constraint!=null) {
             constraint.preCreate(softwareServer);
        }

        EntityDetail entityDetail = SoftwareServerMapper.mapSoftwareServerToOmrsEntityDetail(softwareServer);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        SoftwareServer createdSoftwareServer =  SoftwareServerMapper.mapOmrsEntityDetailToSoftwareServer(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created SoftwareServer="+ createdSoftwareServer );
        }
        return createdSoftwareServer;
    }
    /**
     * Update softwareServer 
     * @param softwareServer
     * @return SoftwareServer
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public SoftwareServer updateSoftwareServer(String userId, SoftwareServer softwareServer)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateSoftwareServerById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = SoftwareServerMapper.mapSoftwareServerToOmrsEntityDetail(softwareServer);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            SoftwareServer updatedSoftwareServer =  SoftwareServerMapper.mapOmrsEntityDetailToSoftwareServer(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated SoftwareServer="+ updatedSoftwareServer );
            }
            return updatedSoftwareServer;
        }

    /**
     * Delete an softwareServer identified by its GUID. Delete is a soft delete, this means that the softwareServer has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the softwareServer
     * @return SoftwareServer
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteSoftwareServerByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteSoftwareServerByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an softwareServer identified by its GUID. Delete is a hard delete, this means that the softwareServer is really
     * deleted .
     *
     * @param  entityGuid GUID for the softwareServer
     * @return SoftwareServer
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeSoftwareServerByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeSoftwareServerByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied softwareServer
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public SoftwareServer addSoftwareServerClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addSoftwareServerClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         SoftwareServer softwareServerClassifications = SoftwareServerMapper.mapOmrsEntityDetailToSoftwareServer(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified SoftwareServer=" +  softwareServerClassifications);
         }
         return  softwareServerClassifications;
    }

    /**
     * Updates classifications to an existing softwareServer represented by a guid.
     * @param  entityGuid globally unique identifier for the softwareServer
     * @return classification for the given softwareServer guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public SoftwareServer updateSoftwareServerClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateSoftwareServerClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           SoftwareServer  softwareServerClassifications = SoftwareServerMapper.mapOmrsEntityDetailToSoftwareServer(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  softwareServerClassifications;
    }

    /**
     * Deletes a given classification from an existing softwareServer represented by a guid.
     * @param entityGuid  globally unique identifier for the softwareServer
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public SoftwareServer deleteSoftwareServerClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteSoftwareServerClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       SoftwareServer declassifiedSoftwareServer =  SoftwareServerMapper.mapOmrsEntityDetailToSoftwareServer(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedSoftwareServer;
    }

    /**
      * Get the relationships associated with entity softwareServer represented by a guid.
      * @param entityGuid  globally unique identifier for the softwareServer
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getSoftwareServerRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getSoftwareServerRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an deployedAPI given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the deployedAPIs relationships.
     * @param entityGuid GUID for the entity
     * @return DeployedAPI
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public DeployedAPI getDeployedAPIById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getDeployedAPIById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        DeployedAPI gotdeployedAPI = DeployedAPIMapper.mapOmrsEntityDetailToDeployedAPI(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotdeployedAPI );
        }
        return gotdeployedAPI;

    }
    /**
     * Create new deployedAPI.
     * @param deployedAPI
     * @return DeployedAPI
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public DeployedAPI createDeployedAPI(String userId,DeployedAPI deployedAPI)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createDeployedAPIById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("DeployedAPI");
        if (constraint!=null) {
             constraint.preCreate(deployedAPI);
        }

        EntityDetail entityDetail = DeployedAPIMapper.mapDeployedAPIToOmrsEntityDetail(deployedAPI);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        DeployedAPI createdDeployedAPI =  DeployedAPIMapper.mapOmrsEntityDetailToDeployedAPI(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created DeployedAPI="+ createdDeployedAPI );
        }
        return createdDeployedAPI;
    }
    /**
     * Update deployedAPI 
     * @param deployedAPI
     * @return DeployedAPI
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public DeployedAPI updateDeployedAPI(String userId, DeployedAPI deployedAPI)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateDeployedAPIById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = DeployedAPIMapper.mapDeployedAPIToOmrsEntityDetail(deployedAPI);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            DeployedAPI updatedDeployedAPI =  DeployedAPIMapper.mapOmrsEntityDetailToDeployedAPI(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated DeployedAPI="+ updatedDeployedAPI );
            }
            return updatedDeployedAPI;
        }

    /**
     * Delete an deployedAPI identified by its GUID. Delete is a soft delete, this means that the deployedAPI has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the deployedAPI
     * @return DeployedAPI
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteDeployedAPIByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteDeployedAPIByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an deployedAPI identified by its GUID. Delete is a hard delete, this means that the deployedAPI is really
     * deleted .
     *
     * @param  entityGuid GUID for the deployedAPI
     * @return DeployedAPI
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeDeployedAPIByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeDeployedAPIByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied deployedAPI
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public DeployedAPI addDeployedAPIClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addDeployedAPIClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         DeployedAPI deployedAPIClassifications = DeployedAPIMapper.mapOmrsEntityDetailToDeployedAPI(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified DeployedAPI=" +  deployedAPIClassifications);
         }
         return  deployedAPIClassifications;
    }

    /**
     * Updates classifications to an existing deployedAPI represented by a guid.
     * @param  entityGuid globally unique identifier for the deployedAPI
     * @return classification for the given deployedAPI guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public DeployedAPI updateDeployedAPIClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateDeployedAPIClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           DeployedAPI  deployedAPIClassifications = DeployedAPIMapper.mapOmrsEntityDetailToDeployedAPI(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  deployedAPIClassifications;
    }

    /**
     * Deletes a given classification from an existing deployedAPI represented by a guid.
     * @param entityGuid  globally unique identifier for the deployedAPI
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public DeployedAPI deleteDeployedAPIClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteDeployedAPIClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       DeployedAPI declassifiedDeployedAPI =  DeployedAPIMapper.mapOmrsEntityDetailToDeployedAPI(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedDeployedAPI;
    }

    /**
      * Get the relationships associated with entity deployedAPI represented by a guid.
      * @param entityGuid  globally unique identifier for the deployedAPI
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getDeployedAPIRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getDeployedAPIRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an mediaFile given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the mediaFiles relationships.
     * @param entityGuid GUID for the entity
     * @return MediaFile
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public MediaFile getMediaFileById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getMediaFileById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        MediaFile gotmediaFile = MediaFileMapper.mapOmrsEntityDetailToMediaFile(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotmediaFile );
        }
        return gotmediaFile;

    }
    /**
     * Create new mediaFile.
     * @param mediaFile
     * @return MediaFile
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public MediaFile createMediaFile(String userId,MediaFile mediaFile)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createMediaFileById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("MediaFile");
        if (constraint!=null) {
             constraint.preCreate(mediaFile);
        }

        EntityDetail entityDetail = MediaFileMapper.mapMediaFileToOmrsEntityDetail(mediaFile);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        MediaFile createdMediaFile =  MediaFileMapper.mapOmrsEntityDetailToMediaFile(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created MediaFile="+ createdMediaFile );
        }
        return createdMediaFile;
    }
    /**
     * Update mediaFile 
     * @param mediaFile
     * @return MediaFile
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public MediaFile updateMediaFile(String userId, MediaFile mediaFile)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateMediaFileById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = MediaFileMapper.mapMediaFileToOmrsEntityDetail(mediaFile);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            MediaFile updatedMediaFile =  MediaFileMapper.mapOmrsEntityDetailToMediaFile(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated MediaFile="+ updatedMediaFile );
            }
            return updatedMediaFile;
        }

    /**
     * Delete an mediaFile identified by its GUID. Delete is a soft delete, this means that the mediaFile has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the mediaFile
     * @return MediaFile
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteMediaFileByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteMediaFileByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an mediaFile identified by its GUID. Delete is a hard delete, this means that the mediaFile is really
     * deleted .
     *
     * @param  entityGuid GUID for the mediaFile
     * @return MediaFile
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeMediaFileByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeMediaFileByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied mediaFile
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public MediaFile addMediaFileClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addMediaFileClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         MediaFile mediaFileClassifications = MediaFileMapper.mapOmrsEntityDetailToMediaFile(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified MediaFile=" +  mediaFileClassifications);
         }
         return  mediaFileClassifications;
    }

    /**
     * Updates classifications to an existing mediaFile represented by a guid.
     * @param  entityGuid globally unique identifier for the mediaFile
     * @return classification for the given mediaFile guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public MediaFile updateMediaFileClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateMediaFileClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           MediaFile  mediaFileClassifications = MediaFileMapper.mapOmrsEntityDetailToMediaFile(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  mediaFileClassifications;
    }

    /**
     * Deletes a given classification from an existing mediaFile represented by a guid.
     * @param entityGuid  globally unique identifier for the mediaFile
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public MediaFile deleteMediaFileClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteMediaFileClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       MediaFile declassifiedMediaFile =  MediaFileMapper.mapOmrsEntityDetailToMediaFile(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedMediaFile;
    }

    /**
      * Get the relationships associated with entity mediaFile represented by a guid.
      * @param entityGuid  globally unique identifier for the mediaFile
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getMediaFileRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getMediaFileRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an comment given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the comments relationships.
     * @param entityGuid GUID for the entity
     * @return Comment
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public Comment getCommentById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getCommentById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        Comment gotcomment = CommentMapper.mapOmrsEntityDetailToComment(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotcomment );
        }
        return gotcomment;

    }
    /**
     * Create new comment.
     * @param comment
     * @return Comment
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public Comment createComment(String userId,Comment comment)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createCommentById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("Comment");
        if (constraint!=null) {
             constraint.preCreate(comment);
        }

        EntityDetail entityDetail = CommentMapper.mapCommentToOmrsEntityDetail(comment);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        Comment createdComment =  CommentMapper.mapOmrsEntityDetailToComment(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created Comment="+ createdComment );
        }
        return createdComment;
    }
    /**
     * Update comment 
     * @param comment
     * @return Comment
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public Comment updateComment(String userId, Comment comment)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateCommentById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = CommentMapper.mapCommentToOmrsEntityDetail(comment);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            Comment updatedComment =  CommentMapper.mapOmrsEntityDetailToComment(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated Comment="+ updatedComment );
            }
            return updatedComment;
        }

    /**
     * Delete an comment identified by its GUID. Delete is a soft delete, this means that the comment has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the comment
     * @return Comment
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteCommentByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteCommentByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an comment identified by its GUID. Delete is a hard delete, this means that the comment is really
     * deleted .
     *
     * @param  entityGuid GUID for the comment
     * @return Comment
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeCommentByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeCommentByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied comment
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public Comment addCommentClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addCommentClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         Comment commentClassifications = CommentMapper.mapOmrsEntityDetailToComment(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified Comment=" +  commentClassifications);
         }
         return  commentClassifications;
    }

    /**
     * Updates classifications to an existing comment represented by a guid.
     * @param  entityGuid globally unique identifier for the comment
     * @return classification for the given comment guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Comment updateCommentClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateCommentClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           Comment  commentClassifications = CommentMapper.mapOmrsEntityDetailToComment(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  commentClassifications;
    }

    /**
     * Deletes a given classification from an existing comment represented by a guid.
     * @param entityGuid  globally unique identifier for the comment
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Comment deleteCommentClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteCommentClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       Comment declassifiedComment =  CommentMapper.mapOmrsEntityDetailToComment(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedComment;
    }

    /**
      * Get the relationships associated with entity comment represented by a guid.
      * @param entityGuid  globally unique identifier for the comment
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getCommentRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getCommentRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an relatedMedia given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the relatedMedias relationships.
     * @param entityGuid GUID for the entity
     * @return RelatedMedia
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public RelatedMedia getRelatedMediaById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getRelatedMediaById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        RelatedMedia gotrelatedMedia = RelatedMediaMapper.mapOmrsEntityDetailToRelatedMedia(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotrelatedMedia );
        }
        return gotrelatedMedia;

    }
    /**
     * Create new relatedMedia.
     * @param relatedMedia
     * @return RelatedMedia
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public RelatedMedia createRelatedMedia(String userId,RelatedMedia relatedMedia)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createRelatedMediaById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("RelatedMedia");
        if (constraint!=null) {
             constraint.preCreate(relatedMedia);
        }

        EntityDetail entityDetail = RelatedMediaMapper.mapRelatedMediaToOmrsEntityDetail(relatedMedia);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        RelatedMedia createdRelatedMedia =  RelatedMediaMapper.mapOmrsEntityDetailToRelatedMedia(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created RelatedMedia="+ createdRelatedMedia );
        }
        return createdRelatedMedia;
    }
    /**
     * Update relatedMedia 
     * @param relatedMedia
     * @return RelatedMedia
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public RelatedMedia updateRelatedMedia(String userId, RelatedMedia relatedMedia)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateRelatedMediaById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = RelatedMediaMapper.mapRelatedMediaToOmrsEntityDetail(relatedMedia);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            RelatedMedia updatedRelatedMedia =  RelatedMediaMapper.mapOmrsEntityDetailToRelatedMedia(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated RelatedMedia="+ updatedRelatedMedia );
            }
            return updatedRelatedMedia;
        }

    /**
     * Delete an relatedMedia identified by its GUID. Delete is a soft delete, this means that the relatedMedia has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the relatedMedia
     * @return RelatedMedia
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteRelatedMediaByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteRelatedMediaByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an relatedMedia identified by its GUID. Delete is a hard delete, this means that the relatedMedia is really
     * deleted .
     *
     * @param  entityGuid GUID for the relatedMedia
     * @return RelatedMedia
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeRelatedMediaByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeRelatedMediaByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied relatedMedia
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public RelatedMedia addRelatedMediaClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addRelatedMediaClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         RelatedMedia relatedMediaClassifications = RelatedMediaMapper.mapOmrsEntityDetailToRelatedMedia(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified RelatedMedia=" +  relatedMediaClassifications);
         }
         return  relatedMediaClassifications;
    }

    /**
     * Updates classifications to an existing relatedMedia represented by a guid.
     * @param  entityGuid globally unique identifier for the relatedMedia
     * @return classification for the given relatedMedia guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public RelatedMedia updateRelatedMediaClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateRelatedMediaClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           RelatedMedia  relatedMediaClassifications = RelatedMediaMapper.mapOmrsEntityDetailToRelatedMedia(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  relatedMediaClassifications;
    }

    /**
     * Deletes a given classification from an existing relatedMedia represented by a guid.
     * @param entityGuid  globally unique identifier for the relatedMedia
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public RelatedMedia deleteRelatedMediaClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteRelatedMediaClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       RelatedMedia declassifiedRelatedMedia =  RelatedMediaMapper.mapOmrsEntityDetailToRelatedMedia(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedRelatedMedia;
    }

    /**
      * Get the relationships associated with entity relatedMedia represented by a guid.
      * @param entityGuid  globally unique identifier for the relatedMedia
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getRelatedMediaRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getRelatedMediaRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an connectorType given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the connectorTypes relationships.
     * @param entityGuid GUID for the entity
     * @return ConnectorType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public ConnectorType getConnectorTypeById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getConnectorTypeById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        ConnectorType gotconnectorType = ConnectorTypeMapper.mapOmrsEntityDetailToConnectorType(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotconnectorType );
        }
        return gotconnectorType;

    }
    /**
     * Create new connectorType.
     * @param connectorType
     * @return ConnectorType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public ConnectorType createConnectorType(String userId,ConnectorType connectorType)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createConnectorTypeById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("ConnectorType");
        if (constraint!=null) {
             constraint.preCreate(connectorType);
        }

        EntityDetail entityDetail = ConnectorTypeMapper.mapConnectorTypeToOmrsEntityDetail(connectorType);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        ConnectorType createdConnectorType =  ConnectorTypeMapper.mapOmrsEntityDetailToConnectorType(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created ConnectorType="+ createdConnectorType );
        }
        return createdConnectorType;
    }
    /**
     * Update connectorType 
     * @param connectorType
     * @return ConnectorType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public ConnectorType updateConnectorType(String userId, ConnectorType connectorType)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateConnectorTypeById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = ConnectorTypeMapper.mapConnectorTypeToOmrsEntityDetail(connectorType);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            ConnectorType updatedConnectorType =  ConnectorTypeMapper.mapOmrsEntityDetailToConnectorType(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated ConnectorType="+ updatedConnectorType );
            }
            return updatedConnectorType;
        }

    /**
     * Delete an connectorType identified by its GUID. Delete is a soft delete, this means that the connectorType has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the connectorType
     * @return ConnectorType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteConnectorTypeByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteConnectorTypeByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an connectorType identified by its GUID. Delete is a hard delete, this means that the connectorType is really
     * deleted .
     *
     * @param  entityGuid GUID for the connectorType
     * @return ConnectorType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeConnectorTypeByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeConnectorTypeByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied connectorType
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public ConnectorType addConnectorTypeClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addConnectorTypeClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         ConnectorType connectorTypeClassifications = ConnectorTypeMapper.mapOmrsEntityDetailToConnectorType(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified ConnectorType=" +  connectorTypeClassifications);
         }
         return  connectorTypeClassifications;
    }

    /**
     * Updates classifications to an existing connectorType represented by a guid.
     * @param  entityGuid globally unique identifier for the connectorType
     * @return classification for the given connectorType guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public ConnectorType updateConnectorTypeClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateConnectorTypeClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           ConnectorType  connectorTypeClassifications = ConnectorTypeMapper.mapOmrsEntityDetailToConnectorType(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  connectorTypeClassifications;
    }

    /**
     * Deletes a given classification from an existing connectorType represented by a guid.
     * @param entityGuid  globally unique identifier for the connectorType
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public ConnectorType deleteConnectorTypeClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteConnectorTypeClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       ConnectorType declassifiedConnectorType =  ConnectorTypeMapper.mapOmrsEntityDetailToConnectorType(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedConnectorType;
    }

    /**
      * Get the relationships associated with entity connectorType represented by a guid.
      * @param entityGuid  globally unique identifier for the connectorType
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getConnectorTypeRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getConnectorTypeRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an cohortMember given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the cohortMembers relationships.
     * @param entityGuid GUID for the entity
     * @return CohortMember
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public CohortMember getCohortMemberById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getCohortMemberById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        CohortMember gotcohortMember = CohortMemberMapper.mapOmrsEntityDetailToCohortMember(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotcohortMember );
        }
        return gotcohortMember;

    }
    /**
     * Create new cohortMember.
     * @param cohortMember
     * @return CohortMember
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public CohortMember createCohortMember(String userId,CohortMember cohortMember)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createCohortMemberById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("CohortMember");
        if (constraint!=null) {
             constraint.preCreate(cohortMember);
        }

        EntityDetail entityDetail = CohortMemberMapper.mapCohortMemberToOmrsEntityDetail(cohortMember);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        CohortMember createdCohortMember =  CohortMemberMapper.mapOmrsEntityDetailToCohortMember(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created CohortMember="+ createdCohortMember );
        }
        return createdCohortMember;
    }
    /**
     * Update cohortMember 
     * @param cohortMember
     * @return CohortMember
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public CohortMember updateCohortMember(String userId, CohortMember cohortMember)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateCohortMemberById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = CohortMemberMapper.mapCohortMemberToOmrsEntityDetail(cohortMember);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            CohortMember updatedCohortMember =  CohortMemberMapper.mapOmrsEntityDetailToCohortMember(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated CohortMember="+ updatedCohortMember );
            }
            return updatedCohortMember;
        }

    /**
     * Delete an cohortMember identified by its GUID. Delete is a soft delete, this means that the cohortMember has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the cohortMember
     * @return CohortMember
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteCohortMemberByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteCohortMemberByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an cohortMember identified by its GUID. Delete is a hard delete, this means that the cohortMember is really
     * deleted .
     *
     * @param  entityGuid GUID for the cohortMember
     * @return CohortMember
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeCohortMemberByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeCohortMemberByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied cohortMember
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public CohortMember addCohortMemberClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addCohortMemberClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         CohortMember cohortMemberClassifications = CohortMemberMapper.mapOmrsEntityDetailToCohortMember(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified CohortMember=" +  cohortMemberClassifications);
         }
         return  cohortMemberClassifications;
    }

    /**
     * Updates classifications to an existing cohortMember represented by a guid.
     * @param  entityGuid globally unique identifier for the cohortMember
     * @return classification for the given cohortMember guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public CohortMember updateCohortMemberClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateCohortMemberClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           CohortMember  cohortMemberClassifications = CohortMemberMapper.mapOmrsEntityDetailToCohortMember(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  cohortMemberClassifications;
    }

    /**
     * Deletes a given classification from an existing cohortMember represented by a guid.
     * @param entityGuid  globally unique identifier for the cohortMember
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public CohortMember deleteCohortMemberClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteCohortMemberClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       CohortMember declassifiedCohortMember =  CohortMemberMapper.mapOmrsEntityDetailToCohortMember(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedCohortMember;
    }

    /**
      * Get the relationships associated with entity cohortMember represented by a guid.
      * @param entityGuid  globally unique identifier for the cohortMember
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getCohortMemberRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getCohortMemberRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an complexSchemaType given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the complexSchemaTypes relationships.
     * @param entityGuid GUID for the entity
     * @return ComplexSchemaType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public ComplexSchemaType getComplexSchemaTypeById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getComplexSchemaTypeById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        ComplexSchemaType gotcomplexSchemaType = ComplexSchemaTypeMapper.mapOmrsEntityDetailToComplexSchemaType(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotcomplexSchemaType );
        }
        return gotcomplexSchemaType;

    }
    /**
     * Create new complexSchemaType.
     * @param complexSchemaType
     * @return ComplexSchemaType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public ComplexSchemaType createComplexSchemaType(String userId,ComplexSchemaType complexSchemaType)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createComplexSchemaTypeById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("ComplexSchemaType");
        if (constraint!=null) {
             constraint.preCreate(complexSchemaType);
        }

        EntityDetail entityDetail = ComplexSchemaTypeMapper.mapComplexSchemaTypeToOmrsEntityDetail(complexSchemaType);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        ComplexSchemaType createdComplexSchemaType =  ComplexSchemaTypeMapper.mapOmrsEntityDetailToComplexSchemaType(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created ComplexSchemaType="+ createdComplexSchemaType );
        }
        return createdComplexSchemaType;
    }
    /**
     * Update complexSchemaType 
     * @param complexSchemaType
     * @return ComplexSchemaType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public ComplexSchemaType updateComplexSchemaType(String userId, ComplexSchemaType complexSchemaType)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateComplexSchemaTypeById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = ComplexSchemaTypeMapper.mapComplexSchemaTypeToOmrsEntityDetail(complexSchemaType);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            ComplexSchemaType updatedComplexSchemaType =  ComplexSchemaTypeMapper.mapOmrsEntityDetailToComplexSchemaType(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated ComplexSchemaType="+ updatedComplexSchemaType );
            }
            return updatedComplexSchemaType;
        }

    /**
     * Delete an complexSchemaType identified by its GUID. Delete is a soft delete, this means that the complexSchemaType has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the complexSchemaType
     * @return ComplexSchemaType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteComplexSchemaTypeByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteComplexSchemaTypeByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an complexSchemaType identified by its GUID. Delete is a hard delete, this means that the complexSchemaType is really
     * deleted .
     *
     * @param  entityGuid GUID for the complexSchemaType
     * @return ComplexSchemaType
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeComplexSchemaTypeByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeComplexSchemaTypeByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied complexSchemaType
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public ComplexSchemaType addComplexSchemaTypeClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addComplexSchemaTypeClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         ComplexSchemaType complexSchemaTypeClassifications = ComplexSchemaTypeMapper.mapOmrsEntityDetailToComplexSchemaType(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified ComplexSchemaType=" +  complexSchemaTypeClassifications);
         }
         return  complexSchemaTypeClassifications;
    }

    /**
     * Updates classifications to an existing complexSchemaType represented by a guid.
     * @param  entityGuid globally unique identifier for the complexSchemaType
     * @return classification for the given complexSchemaType guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public ComplexSchemaType updateComplexSchemaTypeClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateComplexSchemaTypeClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           ComplexSchemaType  complexSchemaTypeClassifications = ComplexSchemaTypeMapper.mapOmrsEntityDetailToComplexSchemaType(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  complexSchemaTypeClassifications;
    }

    /**
     * Deletes a given classification from an existing complexSchemaType represented by a guid.
     * @param entityGuid  globally unique identifier for the complexSchemaType
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public ComplexSchemaType deleteComplexSchemaTypeClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteComplexSchemaTypeClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       ComplexSchemaType declassifiedComplexSchemaType =  ComplexSchemaTypeMapper.mapOmrsEntityDetailToComplexSchemaType(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedComplexSchemaType;
    }

    /**
      * Get the relationships associated with entity complexSchemaType represented by a guid.
      * @param entityGuid  globally unique identifier for the complexSchemaType
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getComplexSchemaTypeRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getComplexSchemaTypeRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an governanceMetric given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the governanceMetrics relationships.
     * @param entityGuid GUID for the entity
     * @return GovernanceMetric
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public GovernanceMetric getGovernanceMetricById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getGovernanceMetricById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        GovernanceMetric gotgovernanceMetric = GovernanceMetricMapper.mapOmrsEntityDetailToGovernanceMetric(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotgovernanceMetric );
        }
        return gotgovernanceMetric;

    }
    /**
     * Create new governanceMetric.
     * @param governanceMetric
     * @return GovernanceMetric
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public GovernanceMetric createGovernanceMetric(String userId,GovernanceMetric governanceMetric)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createGovernanceMetricById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("GovernanceMetric");
        if (constraint!=null) {
             constraint.preCreate(governanceMetric);
        }

        EntityDetail entityDetail = GovernanceMetricMapper.mapGovernanceMetricToOmrsEntityDetail(governanceMetric);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        GovernanceMetric createdGovernanceMetric =  GovernanceMetricMapper.mapOmrsEntityDetailToGovernanceMetric(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created GovernanceMetric="+ createdGovernanceMetric );
        }
        return createdGovernanceMetric;
    }
    /**
     * Update governanceMetric 
     * @param governanceMetric
     * @return GovernanceMetric
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public GovernanceMetric updateGovernanceMetric(String userId, GovernanceMetric governanceMetric)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateGovernanceMetricById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = GovernanceMetricMapper.mapGovernanceMetricToOmrsEntityDetail(governanceMetric);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            GovernanceMetric updatedGovernanceMetric =  GovernanceMetricMapper.mapOmrsEntityDetailToGovernanceMetric(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated GovernanceMetric="+ updatedGovernanceMetric );
            }
            return updatedGovernanceMetric;
        }

    /**
     * Delete an governanceMetric identified by its GUID. Delete is a soft delete, this means that the governanceMetric has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the governanceMetric
     * @return GovernanceMetric
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteGovernanceMetricByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteGovernanceMetricByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an governanceMetric identified by its GUID. Delete is a hard delete, this means that the governanceMetric is really
     * deleted .
     *
     * @param  entityGuid GUID for the governanceMetric
     * @return GovernanceMetric
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeGovernanceMetricByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeGovernanceMetricByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied governanceMetric
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public GovernanceMetric addGovernanceMetricClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addGovernanceMetricClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         GovernanceMetric governanceMetricClassifications = GovernanceMetricMapper.mapOmrsEntityDetailToGovernanceMetric(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified GovernanceMetric=" +  governanceMetricClassifications);
         }
         return  governanceMetricClassifications;
    }

    /**
     * Updates classifications to an existing governanceMetric represented by a guid.
     * @param  entityGuid globally unique identifier for the governanceMetric
     * @return classification for the given governanceMetric guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GovernanceMetric updateGovernanceMetricClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateGovernanceMetricClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           GovernanceMetric  governanceMetricClassifications = GovernanceMetricMapper.mapOmrsEntityDetailToGovernanceMetric(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  governanceMetricClassifications;
    }

    /**
     * Deletes a given classification from an existing governanceMetric represented by a guid.
     * @param entityGuid  globally unique identifier for the governanceMetric
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GovernanceMetric deleteGovernanceMetricClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteGovernanceMetricClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       GovernanceMetric declassifiedGovernanceMetric =  GovernanceMetricMapper.mapOmrsEntityDetailToGovernanceMetric(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedGovernanceMetric;
    }

    /**
      * Get the relationships associated with entity governanceMetric represented by a guid.
      * @param entityGuid  globally unique identifier for the governanceMetric
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getGovernanceMetricRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getGovernanceMetricRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an externalId given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the externalIds relationships.
     * @param entityGuid GUID for the entity
     * @return ExternalId
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public ExternalId getExternalIdById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getExternalIdById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        ExternalId gotexternalId = ExternalIdMapper.mapOmrsEntityDetailToExternalId(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotexternalId );
        }
        return gotexternalId;

    }
    /**
     * Create new externalId.
     * @param externalId
     * @return ExternalId
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public ExternalId createExternalId(String userId,ExternalId externalId)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createExternalIdById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("ExternalId");
        if (constraint!=null) {
             constraint.preCreate(externalId);
        }

        EntityDetail entityDetail = ExternalIdMapper.mapExternalIdToOmrsEntityDetail(externalId);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        ExternalId createdExternalId =  ExternalIdMapper.mapOmrsEntityDetailToExternalId(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created ExternalId="+ createdExternalId );
        }
        return createdExternalId;
    }
    /**
     * Update externalId 
     * @param externalId
     * @return ExternalId
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public ExternalId updateExternalId(String userId, ExternalId externalId)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateExternalIdById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = ExternalIdMapper.mapExternalIdToOmrsEntityDetail(externalId);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            ExternalId updatedExternalId =  ExternalIdMapper.mapOmrsEntityDetailToExternalId(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated ExternalId="+ updatedExternalId );
            }
            return updatedExternalId;
        }

    /**
     * Delete an externalId identified by its GUID. Delete is a soft delete, this means that the externalId has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the externalId
     * @return ExternalId
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteExternalIdByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteExternalIdByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an externalId identified by its GUID. Delete is a hard delete, this means that the externalId is really
     * deleted .
     *
     * @param  entityGuid GUID for the externalId
     * @return ExternalId
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeExternalIdByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeExternalIdByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied externalId
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public ExternalId addExternalIdClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addExternalIdClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         ExternalId externalIdClassifications = ExternalIdMapper.mapOmrsEntityDetailToExternalId(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified ExternalId=" +  externalIdClassifications);
         }
         return  externalIdClassifications;
    }

    /**
     * Updates classifications to an existing externalId represented by a guid.
     * @param  entityGuid globally unique identifier for the externalId
     * @return classification for the given externalId guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public ExternalId updateExternalIdClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateExternalIdClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           ExternalId  externalIdClassifications = ExternalIdMapper.mapOmrsEntityDetailToExternalId(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  externalIdClassifications;
    }

    /**
     * Deletes a given classification from an existing externalId represented by a guid.
     * @param entityGuid  globally unique identifier for the externalId
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public ExternalId deleteExternalIdClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteExternalIdClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       ExternalId declassifiedExternalId =  ExternalIdMapper.mapOmrsEntityDetailToExternalId(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedExternalId;
    }

    /**
      * Get the relationships associated with entity externalId represented by a guid.
      * @param entityGuid  globally unique identifier for the externalId
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getExternalIdRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getExternalIdRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an connection given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the connections relationships.
     * @param entityGuid GUID for the entity
     * @return Connection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public Connection getConnectionById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getConnectionById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        Connection gotconnection = ConnectionMapper.mapOmrsEntityDetailToConnection(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotconnection );
        }
        return gotconnection;

    }
    /**
     * Create new connection.
     * @param connection
     * @return Connection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public Connection createConnection(String userId,Connection connection)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createConnectionById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("Connection");
        if (constraint!=null) {
             constraint.preCreate(connection);
        }

        EntityDetail entityDetail = ConnectionMapper.mapConnectionToOmrsEntityDetail(connection);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        Connection createdConnection =  ConnectionMapper.mapOmrsEntityDetailToConnection(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created Connection="+ createdConnection );
        }
        return createdConnection;
    }
    /**
     * Update connection 
     * @param connection
     * @return Connection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public Connection updateConnection(String userId, Connection connection)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateConnectionById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = ConnectionMapper.mapConnectionToOmrsEntityDetail(connection);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            Connection updatedConnection =  ConnectionMapper.mapOmrsEntityDetailToConnection(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated Connection="+ updatedConnection );
            }
            return updatedConnection;
        }

    /**
     * Delete an connection identified by its GUID. Delete is a soft delete, this means that the connection has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the connection
     * @return Connection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteConnectionByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteConnectionByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an connection identified by its GUID. Delete is a hard delete, this means that the connection is really
     * deleted .
     *
     * @param  entityGuid GUID for the connection
     * @return Connection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeConnectionByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeConnectionByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied connection
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public Connection addConnectionClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addConnectionClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         Connection connectionClassifications = ConnectionMapper.mapOmrsEntityDetailToConnection(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified Connection=" +  connectionClassifications);
         }
         return  connectionClassifications;
    }

    /**
     * Updates classifications to an existing connection represented by a guid.
     * @param  entityGuid globally unique identifier for the connection
     * @return classification for the given connection guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Connection updateConnectionClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateConnectionClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           Connection  connectionClassifications = ConnectionMapper.mapOmrsEntityDetailToConnection(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  connectionClassifications;
    }

    /**
     * Deletes a given classification from an existing connection represented by a guid.
     * @param entityGuid  globally unique identifier for the connection
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Connection deleteConnectionClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteConnectionClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       Connection declassifiedConnection =  ConnectionMapper.mapOmrsEntityDetailToConnection(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedConnection;
    }

    /**
      * Get the relationships associated with entity connection represented by a guid.
      * @param entityGuid  globally unique identifier for the connection
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getConnectionRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getConnectionRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an host given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the hosts relationships.
     * @param entityGuid GUID for the entity
     * @return Host
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public Host getHostById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getHostById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        Host gothost = HostMapper.mapOmrsEntityDetailToHost(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gothost );
        }
        return gothost;

    }
    /**
     * Create new host.
     * @param host
     * @return Host
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public Host createHost(String userId,Host host)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createHostById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("Host");
        if (constraint!=null) {
             constraint.preCreate(host);
        }

        EntityDetail entityDetail = HostMapper.mapHostToOmrsEntityDetail(host);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        Host createdHost =  HostMapper.mapOmrsEntityDetailToHost(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created Host="+ createdHost );
        }
        return createdHost;
    }
    /**
     * Update host 
     * @param host
     * @return Host
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public Host updateHost(String userId, Host host)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateHostById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = HostMapper.mapHostToOmrsEntityDetail(host);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            Host updatedHost =  HostMapper.mapOmrsEntityDetailToHost(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated Host="+ updatedHost );
            }
            return updatedHost;
        }

    /**
     * Delete an host identified by its GUID. Delete is a soft delete, this means that the host has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the host
     * @return Host
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteHostByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteHostByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an host identified by its GUID. Delete is a hard delete, this means that the host is really
     * deleted .
     *
     * @param  entityGuid GUID for the host
     * @return Host
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeHostByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeHostByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied host
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public Host addHostClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addHostClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         Host hostClassifications = HostMapper.mapOmrsEntityDetailToHost(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified Host=" +  hostClassifications);
         }
         return  hostClassifications;
    }

    /**
     * Updates classifications to an existing host represented by a guid.
     * @param  entityGuid globally unique identifier for the host
     * @return classification for the given host guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Host updateHostClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateHostClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           Host  hostClassifications = HostMapper.mapOmrsEntityDetailToHost(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  hostClassifications;
    }

    /**
     * Deletes a given classification from an existing host represented by a guid.
     * @param entityGuid  globally unique identifier for the host
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Host deleteHostClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteHostClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       Host declassifiedHost =  HostMapper.mapOmrsEntityDetailToHost(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedHost;
    }

    /**
      * Get the relationships associated with entity host represented by a guid.
      * @param entityGuid  globally unique identifier for the host
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getHostRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getHostRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an subscriberList given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the subscriberLists relationships.
     * @param entityGuid GUID for the entity
     * @return SubscriberList
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public SubscriberList getSubscriberListById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getSubscriberListById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        SubscriberList gotsubscriberList = SubscriberListMapper.mapOmrsEntityDetailToSubscriberList(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotsubscriberList );
        }
        return gotsubscriberList;

    }
    /**
     * Create new subscriberList.
     * @param subscriberList
     * @return SubscriberList
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public SubscriberList createSubscriberList(String userId,SubscriberList subscriberList)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createSubscriberListById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("SubscriberList");
        if (constraint!=null) {
             constraint.preCreate(subscriberList);
        }

        EntityDetail entityDetail = SubscriberListMapper.mapSubscriberListToOmrsEntityDetail(subscriberList);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        SubscriberList createdSubscriberList =  SubscriberListMapper.mapOmrsEntityDetailToSubscriberList(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created SubscriberList="+ createdSubscriberList );
        }
        return createdSubscriberList;
    }
    /**
     * Update subscriberList 
     * @param subscriberList
     * @return SubscriberList
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public SubscriberList updateSubscriberList(String userId, SubscriberList subscriberList)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateSubscriberListById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = SubscriberListMapper.mapSubscriberListToOmrsEntityDetail(subscriberList);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            SubscriberList updatedSubscriberList =  SubscriberListMapper.mapOmrsEntityDetailToSubscriberList(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated SubscriberList="+ updatedSubscriberList );
            }
            return updatedSubscriberList;
        }

    /**
     * Delete an subscriberList identified by its GUID. Delete is a soft delete, this means that the subscriberList has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the subscriberList
     * @return SubscriberList
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteSubscriberListByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteSubscriberListByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an subscriberList identified by its GUID. Delete is a hard delete, this means that the subscriberList is really
     * deleted .
     *
     * @param  entityGuid GUID for the subscriberList
     * @return SubscriberList
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeSubscriberListByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeSubscriberListByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied subscriberList
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public SubscriberList addSubscriberListClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addSubscriberListClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         SubscriberList subscriberListClassifications = SubscriberListMapper.mapOmrsEntityDetailToSubscriberList(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified SubscriberList=" +  subscriberListClassifications);
         }
         return  subscriberListClassifications;
    }

    /**
     * Updates classifications to an existing subscriberList represented by a guid.
     * @param  entityGuid globally unique identifier for the subscriberList
     * @return classification for the given subscriberList guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public SubscriberList updateSubscriberListClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateSubscriberListClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           SubscriberList  subscriberListClassifications = SubscriberListMapper.mapOmrsEntityDetailToSubscriberList(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  subscriberListClassifications;
    }

    /**
     * Deletes a given classification from an existing subscriberList represented by a guid.
     * @param entityGuid  globally unique identifier for the subscriberList
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public SubscriberList deleteSubscriberListClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteSubscriberListClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       SubscriberList declassifiedSubscriberList =  SubscriberListMapper.mapOmrsEntityDetailToSubscriberList(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedSubscriberList;
    }

    /**
      * Get the relationships associated with entity subscriberList represented by a guid.
      * @param entityGuid  globally unique identifier for the subscriberList
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getSubscriberListRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getSubscriberListRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an governanceRule given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the governanceRules relationships.
     * @param entityGuid GUID for the entity
     * @return GovernanceRule
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public GovernanceRule getGovernanceRuleById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getGovernanceRuleById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        GovernanceRule gotgovernanceRule = GovernanceRuleMapper.mapOmrsEntityDetailToGovernanceRule(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotgovernanceRule );
        }
        return gotgovernanceRule;

    }
    /**
     * Create new governanceRule.
     * @param governanceRule
     * @return GovernanceRule
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public GovernanceRule createGovernanceRule(String userId,GovernanceRule governanceRule)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createGovernanceRuleById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("GovernanceRule");
        if (constraint!=null) {
             constraint.preCreate(governanceRule);
        }

        EntityDetail entityDetail = GovernanceRuleMapper.mapGovernanceRuleToOmrsEntityDetail(governanceRule);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        GovernanceRule createdGovernanceRule =  GovernanceRuleMapper.mapOmrsEntityDetailToGovernanceRule(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created GovernanceRule="+ createdGovernanceRule );
        }
        return createdGovernanceRule;
    }
    /**
     * Update governanceRule 
     * @param governanceRule
     * @return GovernanceRule
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public GovernanceRule updateGovernanceRule(String userId, GovernanceRule governanceRule)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateGovernanceRuleById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = GovernanceRuleMapper.mapGovernanceRuleToOmrsEntityDetail(governanceRule);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            GovernanceRule updatedGovernanceRule =  GovernanceRuleMapper.mapOmrsEntityDetailToGovernanceRule(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated GovernanceRule="+ updatedGovernanceRule );
            }
            return updatedGovernanceRule;
        }

    /**
     * Delete an governanceRule identified by its GUID. Delete is a soft delete, this means that the governanceRule has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the governanceRule
     * @return GovernanceRule
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteGovernanceRuleByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteGovernanceRuleByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an governanceRule identified by its GUID. Delete is a hard delete, this means that the governanceRule is really
     * deleted .
     *
     * @param  entityGuid GUID for the governanceRule
     * @return GovernanceRule
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeGovernanceRuleByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeGovernanceRuleByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied governanceRule
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public GovernanceRule addGovernanceRuleClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addGovernanceRuleClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         GovernanceRule governanceRuleClassifications = GovernanceRuleMapper.mapOmrsEntityDetailToGovernanceRule(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified GovernanceRule=" +  governanceRuleClassifications);
         }
         return  governanceRuleClassifications;
    }

    /**
     * Updates classifications to an existing governanceRule represented by a guid.
     * @param  entityGuid globally unique identifier for the governanceRule
     * @return classification for the given governanceRule guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GovernanceRule updateGovernanceRuleClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateGovernanceRuleClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           GovernanceRule  governanceRuleClassifications = GovernanceRuleMapper.mapOmrsEntityDetailToGovernanceRule(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  governanceRuleClassifications;
    }

    /**
     * Deletes a given classification from an existing governanceRule represented by a guid.
     * @param entityGuid  globally unique identifier for the governanceRule
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GovernanceRule deleteGovernanceRuleClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteGovernanceRuleClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       GovernanceRule declassifiedGovernanceRule =  GovernanceRuleMapper.mapOmrsEntityDetailToGovernanceRule(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedGovernanceRule;
    }

    /**
      * Get the relationships associated with entity governanceRule represented by a guid.
      * @param entityGuid  globally unique identifier for the governanceRule
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getGovernanceRuleRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getGovernanceRuleRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an metadataRepositoryCohort given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the metadataRepositoryCohorts relationships.
     * @param entityGuid GUID for the entity
     * @return MetadataRepositoryCohort
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public MetadataRepositoryCohort getMetadataRepositoryCohortById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getMetadataRepositoryCohortById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        MetadataRepositoryCohort gotmetadataRepositoryCohort = MetadataRepositoryCohortMapper.mapOmrsEntityDetailToMetadataRepositoryCohort(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotmetadataRepositoryCohort );
        }
        return gotmetadataRepositoryCohort;

    }
    /**
     * Create new metadataRepositoryCohort.
     * @param metadataRepositoryCohort
     * @return MetadataRepositoryCohort
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public MetadataRepositoryCohort createMetadataRepositoryCohort(String userId,MetadataRepositoryCohort metadataRepositoryCohort)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createMetadataRepositoryCohortById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("MetadataRepositoryCohort");
        if (constraint!=null) {
             constraint.preCreate(metadataRepositoryCohort);
        }

        EntityDetail entityDetail = MetadataRepositoryCohortMapper.mapMetadataRepositoryCohortToOmrsEntityDetail(metadataRepositoryCohort);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        MetadataRepositoryCohort createdMetadataRepositoryCohort =  MetadataRepositoryCohortMapper.mapOmrsEntityDetailToMetadataRepositoryCohort(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created MetadataRepositoryCohort="+ createdMetadataRepositoryCohort );
        }
        return createdMetadataRepositoryCohort;
    }
    /**
     * Update metadataRepositoryCohort 
     * @param metadataRepositoryCohort
     * @return MetadataRepositoryCohort
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public MetadataRepositoryCohort updateMetadataRepositoryCohort(String userId, MetadataRepositoryCohort metadataRepositoryCohort)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateMetadataRepositoryCohortById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = MetadataRepositoryCohortMapper.mapMetadataRepositoryCohortToOmrsEntityDetail(metadataRepositoryCohort);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            MetadataRepositoryCohort updatedMetadataRepositoryCohort =  MetadataRepositoryCohortMapper.mapOmrsEntityDetailToMetadataRepositoryCohort(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated MetadataRepositoryCohort="+ updatedMetadataRepositoryCohort );
            }
            return updatedMetadataRepositoryCohort;
        }

    /**
     * Delete an metadataRepositoryCohort identified by its GUID. Delete is a soft delete, this means that the metadataRepositoryCohort has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the metadataRepositoryCohort
     * @return MetadataRepositoryCohort
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteMetadataRepositoryCohortByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteMetadataRepositoryCohortByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an metadataRepositoryCohort identified by its GUID. Delete is a hard delete, this means that the metadataRepositoryCohort is really
     * deleted .
     *
     * @param  entityGuid GUID for the metadataRepositoryCohort
     * @return MetadataRepositoryCohort
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeMetadataRepositoryCohortByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeMetadataRepositoryCohortByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied metadataRepositoryCohort
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public MetadataRepositoryCohort addMetadataRepositoryCohortClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addMetadataRepositoryCohortClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         MetadataRepositoryCohort metadataRepositoryCohortClassifications = MetadataRepositoryCohortMapper.mapOmrsEntityDetailToMetadataRepositoryCohort(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified MetadataRepositoryCohort=" +  metadataRepositoryCohortClassifications);
         }
         return  metadataRepositoryCohortClassifications;
    }

    /**
     * Updates classifications to an existing metadataRepositoryCohort represented by a guid.
     * @param  entityGuid globally unique identifier for the metadataRepositoryCohort
     * @return classification for the given metadataRepositoryCohort guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public MetadataRepositoryCohort updateMetadataRepositoryCohortClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateMetadataRepositoryCohortClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           MetadataRepositoryCohort  metadataRepositoryCohortClassifications = MetadataRepositoryCohortMapper.mapOmrsEntityDetailToMetadataRepositoryCohort(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  metadataRepositoryCohortClassifications;
    }

    /**
     * Deletes a given classification from an existing metadataRepositoryCohort represented by a guid.
     * @param entityGuid  globally unique identifier for the metadataRepositoryCohort
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public MetadataRepositoryCohort deleteMetadataRepositoryCohortClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteMetadataRepositoryCohortClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       MetadataRepositoryCohort declassifiedMetadataRepositoryCohort =  MetadataRepositoryCohortMapper.mapOmrsEntityDetailToMetadataRepositoryCohort(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedMetadataRepositoryCohort;
    }

    /**
      * Get the relationships associated with entity metadataRepositoryCohort represented by a guid.
      * @param entityGuid  globally unique identifier for the metadataRepositoryCohort
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getMetadataRepositoryCohortRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getMetadataRepositoryCohortRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an noteLog given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the noteLogs relationships.
     * @param entityGuid GUID for the entity
     * @return NoteLog
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public NoteLog getNoteLogById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getNoteLogById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        NoteLog gotnoteLog = NoteLogMapper.mapOmrsEntityDetailToNoteLog(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotnoteLog );
        }
        return gotnoteLog;

    }
    /**
     * Create new noteLog.
     * @param noteLog
     * @return NoteLog
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public NoteLog createNoteLog(String userId,NoteLog noteLog)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createNoteLogById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("NoteLog");
        if (constraint!=null) {
             constraint.preCreate(noteLog);
        }

        EntityDetail entityDetail = NoteLogMapper.mapNoteLogToOmrsEntityDetail(noteLog);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        NoteLog createdNoteLog =  NoteLogMapper.mapOmrsEntityDetailToNoteLog(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created NoteLog="+ createdNoteLog );
        }
        return createdNoteLog;
    }
    /**
     * Update noteLog 
     * @param noteLog
     * @return NoteLog
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public NoteLog updateNoteLog(String userId, NoteLog noteLog)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateNoteLogById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = NoteLogMapper.mapNoteLogToOmrsEntityDetail(noteLog);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            NoteLog updatedNoteLog =  NoteLogMapper.mapOmrsEntityDetailToNoteLog(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated NoteLog="+ updatedNoteLog );
            }
            return updatedNoteLog;
        }

    /**
     * Delete an noteLog identified by its GUID. Delete is a soft delete, this means that the noteLog has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the noteLog
     * @return NoteLog
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteNoteLogByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteNoteLogByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an noteLog identified by its GUID. Delete is a hard delete, this means that the noteLog is really
     * deleted .
     *
     * @param  entityGuid GUID for the noteLog
     * @return NoteLog
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeNoteLogByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeNoteLogByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied noteLog
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public NoteLog addNoteLogClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addNoteLogClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         NoteLog noteLogClassifications = NoteLogMapper.mapOmrsEntityDetailToNoteLog(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified NoteLog=" +  noteLogClassifications);
         }
         return  noteLogClassifications;
    }

    /**
     * Updates classifications to an existing noteLog represented by a guid.
     * @param  entityGuid globally unique identifier for the noteLog
     * @return classification for the given noteLog guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public NoteLog updateNoteLogClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateNoteLogClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           NoteLog  noteLogClassifications = NoteLogMapper.mapOmrsEntityDetailToNoteLog(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  noteLogClassifications;
    }

    /**
     * Deletes a given classification from an existing noteLog represented by a guid.
     * @param entityGuid  globally unique identifier for the noteLog
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public NoteLog deleteNoteLogClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteNoteLogClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       NoteLog declassifiedNoteLog =  NoteLogMapper.mapOmrsEntityDetailToNoteLog(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedNoteLog;
    }

    /**
      * Get the relationships associated with entity noteLog represented by a guid.
      * @param entityGuid  globally unique identifier for the noteLog
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getNoteLogRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getNoteLogRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an externalGlossaryLink given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the externalGlossaryLinks relationships.
     * @param entityGuid GUID for the entity
     * @return ExternalGlossaryLink
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public ExternalGlossaryLink getExternalGlossaryLinkById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getExternalGlossaryLinkById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        ExternalGlossaryLink gotexternalGlossaryLink = ExternalGlossaryLinkMapper.mapOmrsEntityDetailToExternalGlossaryLink(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotexternalGlossaryLink );
        }
        return gotexternalGlossaryLink;

    }
    /**
     * Create new externalGlossaryLink.
     * @param externalGlossaryLink
     * @return ExternalGlossaryLink
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public ExternalGlossaryLink createExternalGlossaryLink(String userId,ExternalGlossaryLink externalGlossaryLink)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createExternalGlossaryLinkById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("ExternalGlossaryLink");
        if (constraint!=null) {
             constraint.preCreate(externalGlossaryLink);
        }

        EntityDetail entityDetail = ExternalGlossaryLinkMapper.mapExternalGlossaryLinkToOmrsEntityDetail(externalGlossaryLink);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        ExternalGlossaryLink createdExternalGlossaryLink =  ExternalGlossaryLinkMapper.mapOmrsEntityDetailToExternalGlossaryLink(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created ExternalGlossaryLink="+ createdExternalGlossaryLink );
        }
        return createdExternalGlossaryLink;
    }
    /**
     * Update externalGlossaryLink 
     * @param externalGlossaryLink
     * @return ExternalGlossaryLink
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public ExternalGlossaryLink updateExternalGlossaryLink(String userId, ExternalGlossaryLink externalGlossaryLink)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateExternalGlossaryLinkById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = ExternalGlossaryLinkMapper.mapExternalGlossaryLinkToOmrsEntityDetail(externalGlossaryLink);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            ExternalGlossaryLink updatedExternalGlossaryLink =  ExternalGlossaryLinkMapper.mapOmrsEntityDetailToExternalGlossaryLink(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated ExternalGlossaryLink="+ updatedExternalGlossaryLink );
            }
            return updatedExternalGlossaryLink;
        }

    /**
     * Delete an externalGlossaryLink identified by its GUID. Delete is a soft delete, this means that the externalGlossaryLink has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the externalGlossaryLink
     * @return ExternalGlossaryLink
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteExternalGlossaryLinkByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteExternalGlossaryLinkByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an externalGlossaryLink identified by its GUID. Delete is a hard delete, this means that the externalGlossaryLink is really
     * deleted .
     *
     * @param  entityGuid GUID for the externalGlossaryLink
     * @return ExternalGlossaryLink
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeExternalGlossaryLinkByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeExternalGlossaryLinkByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied externalGlossaryLink
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public ExternalGlossaryLink addExternalGlossaryLinkClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addExternalGlossaryLinkClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         ExternalGlossaryLink externalGlossaryLinkClassifications = ExternalGlossaryLinkMapper.mapOmrsEntityDetailToExternalGlossaryLink(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified ExternalGlossaryLink=" +  externalGlossaryLinkClassifications);
         }
         return  externalGlossaryLinkClassifications;
    }

    /**
     * Updates classifications to an existing externalGlossaryLink represented by a guid.
     * @param  entityGuid globally unique identifier for the externalGlossaryLink
     * @return classification for the given externalGlossaryLink guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public ExternalGlossaryLink updateExternalGlossaryLinkClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateExternalGlossaryLinkClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           ExternalGlossaryLink  externalGlossaryLinkClassifications = ExternalGlossaryLinkMapper.mapOmrsEntityDetailToExternalGlossaryLink(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  externalGlossaryLinkClassifications;
    }

    /**
     * Deletes a given classification from an existing externalGlossaryLink represented by a guid.
     * @param entityGuid  globally unique identifier for the externalGlossaryLink
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public ExternalGlossaryLink deleteExternalGlossaryLinkClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteExternalGlossaryLinkClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       ExternalGlossaryLink declassifiedExternalGlossaryLink =  ExternalGlossaryLinkMapper.mapOmrsEntityDetailToExternalGlossaryLink(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedExternalGlossaryLink;
    }

    /**
      * Get the relationships associated with entity externalGlossaryLink represented by a guid.
      * @param entityGuid  globally unique identifier for the externalGlossaryLink
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getExternalGlossaryLinkRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getExternalGlossaryLinkRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an virtualConnection given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the virtualConnections relationships.
     * @param entityGuid GUID for the entity
     * @return VirtualConnection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public VirtualConnection getVirtualConnectionById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getVirtualConnectionById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        VirtualConnection gotvirtualConnection = VirtualConnectionMapper.mapOmrsEntityDetailToVirtualConnection(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotvirtualConnection );
        }
        return gotvirtualConnection;

    }
    /**
     * Create new virtualConnection.
     * @param virtualConnection
     * @return VirtualConnection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public VirtualConnection createVirtualConnection(String userId,VirtualConnection virtualConnection)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createVirtualConnectionById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("VirtualConnection");
        if (constraint!=null) {
             constraint.preCreate(virtualConnection);
        }

        EntityDetail entityDetail = VirtualConnectionMapper.mapVirtualConnectionToOmrsEntityDetail(virtualConnection);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        VirtualConnection createdVirtualConnection =  VirtualConnectionMapper.mapOmrsEntityDetailToVirtualConnection(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created VirtualConnection="+ createdVirtualConnection );
        }
        return createdVirtualConnection;
    }
    /**
     * Update virtualConnection 
     * @param virtualConnection
     * @return VirtualConnection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public VirtualConnection updateVirtualConnection(String userId, VirtualConnection virtualConnection)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateVirtualConnectionById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = VirtualConnectionMapper.mapVirtualConnectionToOmrsEntityDetail(virtualConnection);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            VirtualConnection updatedVirtualConnection =  VirtualConnectionMapper.mapOmrsEntityDetailToVirtualConnection(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated VirtualConnection="+ updatedVirtualConnection );
            }
            return updatedVirtualConnection;
        }

    /**
     * Delete an virtualConnection identified by its GUID. Delete is a soft delete, this means that the virtualConnection has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the virtualConnection
     * @return VirtualConnection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteVirtualConnectionByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteVirtualConnectionByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an virtualConnection identified by its GUID. Delete is a hard delete, this means that the virtualConnection is really
     * deleted .
     *
     * @param  entityGuid GUID for the virtualConnection
     * @return VirtualConnection
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeVirtualConnectionByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeVirtualConnectionByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied virtualConnection
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public VirtualConnection addVirtualConnectionClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addVirtualConnectionClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         VirtualConnection virtualConnectionClassifications = VirtualConnectionMapper.mapOmrsEntityDetailToVirtualConnection(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified VirtualConnection=" +  virtualConnectionClassifications);
         }
         return  virtualConnectionClassifications;
    }

    /**
     * Updates classifications to an existing virtualConnection represented by a guid.
     * @param  entityGuid globally unique identifier for the virtualConnection
     * @return classification for the given virtualConnection guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public VirtualConnection updateVirtualConnectionClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateVirtualConnectionClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           VirtualConnection  virtualConnectionClassifications = VirtualConnectionMapper.mapOmrsEntityDetailToVirtualConnection(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  virtualConnectionClassifications;
    }

    /**
     * Deletes a given classification from an existing virtualConnection represented by a guid.
     * @param entityGuid  globally unique identifier for the virtualConnection
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public VirtualConnection deleteVirtualConnectionClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteVirtualConnectionClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       VirtualConnection declassifiedVirtualConnection =  VirtualConnectionMapper.mapOmrsEntityDetailToVirtualConnection(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedVirtualConnection;
    }

    /**
      * Get the relationships associated with entity virtualConnection represented by a guid.
      * @param entityGuid  globally unique identifier for the virtualConnection
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getVirtualConnectionRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getVirtualConnectionRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an regulation given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the regulations relationships.
     * @param entityGuid GUID for the entity
     * @return Regulation
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public Regulation getRegulationById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getRegulationById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        Regulation gotregulation = RegulationMapper.mapOmrsEntityDetailToRegulation(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotregulation );
        }
        return gotregulation;

    }
    /**
     * Create new regulation.
     * @param regulation
     * @return Regulation
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public Regulation createRegulation(String userId,Regulation regulation)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createRegulationById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("Regulation");
        if (constraint!=null) {
             constraint.preCreate(regulation);
        }

        EntityDetail entityDetail = RegulationMapper.mapRegulationToOmrsEntityDetail(regulation);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        Regulation createdRegulation =  RegulationMapper.mapOmrsEntityDetailToRegulation(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created Regulation="+ createdRegulation );
        }
        return createdRegulation;
    }
    /**
     * Update regulation 
     * @param regulation
     * @return Regulation
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public Regulation updateRegulation(String userId, Regulation regulation)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateRegulationById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = RegulationMapper.mapRegulationToOmrsEntityDetail(regulation);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            Regulation updatedRegulation =  RegulationMapper.mapOmrsEntityDetailToRegulation(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated Regulation="+ updatedRegulation );
            }
            return updatedRegulation;
        }

    /**
     * Delete an regulation identified by its GUID. Delete is a soft delete, this means that the regulation has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the regulation
     * @return Regulation
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteRegulationByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteRegulationByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an regulation identified by its GUID. Delete is a hard delete, this means that the regulation is really
     * deleted .
     *
     * @param  entityGuid GUID for the regulation
     * @return Regulation
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeRegulationByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeRegulationByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied regulation
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public Regulation addRegulationClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addRegulationClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         Regulation regulationClassifications = RegulationMapper.mapOmrsEntityDetailToRegulation(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified Regulation=" +  regulationClassifications);
         }
         return  regulationClassifications;
    }

    /**
     * Updates classifications to an existing regulation represented by a guid.
     * @param  entityGuid globally unique identifier for the regulation
     * @return classification for the given regulation guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Regulation updateRegulationClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateRegulationClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           Regulation  regulationClassifications = RegulationMapper.mapOmrsEntityDetailToRegulation(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  regulationClassifications;
    }

    /**
     * Deletes a given classification from an existing regulation represented by a guid.
     * @param entityGuid  globally unique identifier for the regulation
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Regulation deleteRegulationClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteRegulationClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       Regulation declassifiedRegulation =  RegulationMapper.mapOmrsEntityDetailToRegulation(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedRegulation;
    }

    /**
      * Get the relationships associated with entity regulation represented by a guid.
      * @param entityGuid  globally unique identifier for the regulation
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getRegulationRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getRegulationRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an governanceProcess given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the governanceProcesses relationships.
     * @param entityGuid GUID for the entity
     * @return GovernanceProcess
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public GovernanceProcess getGovernanceProcessById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getGovernanceProcessById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        GovernanceProcess gotgovernanceProcess = GovernanceProcessMapper.mapOmrsEntityDetailToGovernanceProcess(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotgovernanceProcess );
        }
        return gotgovernanceProcess;

    }
    /**
     * Create new governanceProcess.
     * @param governanceProcess
     * @return GovernanceProcess
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public GovernanceProcess createGovernanceProcess(String userId,GovernanceProcess governanceProcess)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createGovernanceProcessById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("GovernanceProcess");
        if (constraint!=null) {
             constraint.preCreate(governanceProcess);
        }

        EntityDetail entityDetail = GovernanceProcessMapper.mapGovernanceProcessToOmrsEntityDetail(governanceProcess);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        GovernanceProcess createdGovernanceProcess =  GovernanceProcessMapper.mapOmrsEntityDetailToGovernanceProcess(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created GovernanceProcess="+ createdGovernanceProcess );
        }
        return createdGovernanceProcess;
    }
    /**
     * Update governanceProcess 
     * @param governanceProcess
     * @return GovernanceProcess
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public GovernanceProcess updateGovernanceProcess(String userId, GovernanceProcess governanceProcess)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateGovernanceProcessById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = GovernanceProcessMapper.mapGovernanceProcessToOmrsEntityDetail(governanceProcess);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            GovernanceProcess updatedGovernanceProcess =  GovernanceProcessMapper.mapOmrsEntityDetailToGovernanceProcess(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated GovernanceProcess="+ updatedGovernanceProcess );
            }
            return updatedGovernanceProcess;
        }

    /**
     * Delete an governanceProcess identified by its GUID. Delete is a soft delete, this means that the governanceProcess has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the governanceProcess
     * @return GovernanceProcess
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteGovernanceProcessByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteGovernanceProcessByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an governanceProcess identified by its GUID. Delete is a hard delete, this means that the governanceProcess is really
     * deleted .
     *
     * @param  entityGuid GUID for the governanceProcess
     * @return GovernanceProcess
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeGovernanceProcessByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeGovernanceProcessByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied governanceProcess
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public GovernanceProcess addGovernanceProcessClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addGovernanceProcessClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         GovernanceProcess governanceProcessClassifications = GovernanceProcessMapper.mapOmrsEntityDetailToGovernanceProcess(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified GovernanceProcess=" +  governanceProcessClassifications);
         }
         return  governanceProcessClassifications;
    }

    /**
     * Updates classifications to an existing governanceProcess represented by a guid.
     * @param  entityGuid globally unique identifier for the governanceProcess
     * @return classification for the given governanceProcess guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GovernanceProcess updateGovernanceProcessClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateGovernanceProcessClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           GovernanceProcess  governanceProcessClassifications = GovernanceProcessMapper.mapOmrsEntityDetailToGovernanceProcess(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  governanceProcessClassifications;
    }

    /**
     * Deletes a given classification from an existing governanceProcess represented by a guid.
     * @param entityGuid  globally unique identifier for the governanceProcess
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GovernanceProcess deleteGovernanceProcessClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteGovernanceProcessClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       GovernanceProcess declassifiedGovernanceProcess =  GovernanceProcessMapper.mapOmrsEntityDetailToGovernanceProcess(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedGovernanceProcess;
    }

    /**
      * Get the relationships associated with entity governanceProcess represented by a guid.
      * @param entityGuid  globally unique identifier for the governanceProcess
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getGovernanceProcessRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getGovernanceProcessRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an schemaAttribute given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the schemaAttributes relationships.
     * @param entityGuid GUID for the entity
     * @return SchemaAttribute
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public SchemaAttribute getSchemaAttributeById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getSchemaAttributeById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        SchemaAttribute gotschemaAttribute = SchemaAttributeMapper.mapOmrsEntityDetailToSchemaAttribute(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotschemaAttribute );
        }
        return gotschemaAttribute;

    }
    /**
     * Create new schemaAttribute.
     * @param schemaAttribute
     * @return SchemaAttribute
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public SchemaAttribute createSchemaAttribute(String userId,SchemaAttribute schemaAttribute)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createSchemaAttributeById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("SchemaAttribute");
        if (constraint!=null) {
             constraint.preCreate(schemaAttribute);
        }

        EntityDetail entityDetail = SchemaAttributeMapper.mapSchemaAttributeToOmrsEntityDetail(schemaAttribute);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        SchemaAttribute createdSchemaAttribute =  SchemaAttributeMapper.mapOmrsEntityDetailToSchemaAttribute(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created SchemaAttribute="+ createdSchemaAttribute );
        }
        return createdSchemaAttribute;
    }
    /**
     * Update schemaAttribute 
     * @param schemaAttribute
     * @return SchemaAttribute
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public SchemaAttribute updateSchemaAttribute(String userId, SchemaAttribute schemaAttribute)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateSchemaAttributeById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = SchemaAttributeMapper.mapSchemaAttributeToOmrsEntityDetail(schemaAttribute);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            SchemaAttribute updatedSchemaAttribute =  SchemaAttributeMapper.mapOmrsEntityDetailToSchemaAttribute(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated SchemaAttribute="+ updatedSchemaAttribute );
            }
            return updatedSchemaAttribute;
        }

    /**
     * Delete an schemaAttribute identified by its GUID. Delete is a soft delete, this means that the schemaAttribute has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the schemaAttribute
     * @return SchemaAttribute
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteSchemaAttributeByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteSchemaAttributeByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an schemaAttribute identified by its GUID. Delete is a hard delete, this means that the schemaAttribute is really
     * deleted .
     *
     * @param  entityGuid GUID for the schemaAttribute
     * @return SchemaAttribute
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeSchemaAttributeByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeSchemaAttributeByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied schemaAttribute
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public SchemaAttribute addSchemaAttributeClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addSchemaAttributeClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         SchemaAttribute schemaAttributeClassifications = SchemaAttributeMapper.mapOmrsEntityDetailToSchemaAttribute(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified SchemaAttribute=" +  schemaAttributeClassifications);
         }
         return  schemaAttributeClassifications;
    }

    /**
     * Updates classifications to an existing schemaAttribute represented by a guid.
     * @param  entityGuid globally unique identifier for the schemaAttribute
     * @return classification for the given schemaAttribute guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public SchemaAttribute updateSchemaAttributeClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateSchemaAttributeClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           SchemaAttribute  schemaAttributeClassifications = SchemaAttributeMapper.mapOmrsEntityDetailToSchemaAttribute(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  schemaAttributeClassifications;
    }

    /**
     * Deletes a given classification from an existing schemaAttribute represented by a guid.
     * @param entityGuid  globally unique identifier for the schemaAttribute
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public SchemaAttribute deleteSchemaAttributeClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteSchemaAttributeClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       SchemaAttribute declassifiedSchemaAttribute =  SchemaAttributeMapper.mapOmrsEntityDetailToSchemaAttribute(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedSchemaAttribute;
    }

    /**
      * Get the relationships associated with entity schemaAttribute represented by a guid.
      * @param entityGuid  globally unique identifier for the schemaAttribute
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getSchemaAttributeRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getSchemaAttributeRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an graphEdge given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the graphEdges relationships.
     * @param entityGuid GUID for the entity
     * @return GraphEdge
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public GraphEdge getGraphEdgeById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getGraphEdgeById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        GraphEdge gotgraphEdge = GraphEdgeMapper.mapOmrsEntityDetailToGraphEdge(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotgraphEdge );
        }
        return gotgraphEdge;

    }
    /**
     * Create new graphEdge.
     * @param graphEdge
     * @return GraphEdge
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public GraphEdge createGraphEdge(String userId,GraphEdge graphEdge)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createGraphEdgeById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("GraphEdge");
        if (constraint!=null) {
             constraint.preCreate(graphEdge);
        }

        EntityDetail entityDetail = GraphEdgeMapper.mapGraphEdgeToOmrsEntityDetail(graphEdge);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        GraphEdge createdGraphEdge =  GraphEdgeMapper.mapOmrsEntityDetailToGraphEdge(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created GraphEdge="+ createdGraphEdge );
        }
        return createdGraphEdge;
    }
    /**
     * Update graphEdge 
     * @param graphEdge
     * @return GraphEdge
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public GraphEdge updateGraphEdge(String userId, GraphEdge graphEdge)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateGraphEdgeById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = GraphEdgeMapper.mapGraphEdgeToOmrsEntityDetail(graphEdge);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            GraphEdge updatedGraphEdge =  GraphEdgeMapper.mapOmrsEntityDetailToGraphEdge(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated GraphEdge="+ updatedGraphEdge );
            }
            return updatedGraphEdge;
        }

    /**
     * Delete an graphEdge identified by its GUID. Delete is a soft delete, this means that the graphEdge has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the graphEdge
     * @return GraphEdge
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteGraphEdgeByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteGraphEdgeByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an graphEdge identified by its GUID. Delete is a hard delete, this means that the graphEdge is really
     * deleted .
     *
     * @param  entityGuid GUID for the graphEdge
     * @return GraphEdge
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeGraphEdgeByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeGraphEdgeByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied graphEdge
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public GraphEdge addGraphEdgeClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addGraphEdgeClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         GraphEdge graphEdgeClassifications = GraphEdgeMapper.mapOmrsEntityDetailToGraphEdge(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified GraphEdge=" +  graphEdgeClassifications);
         }
         return  graphEdgeClassifications;
    }

    /**
     * Updates classifications to an existing graphEdge represented by a guid.
     * @param  entityGuid globally unique identifier for the graphEdge
     * @return classification for the given graphEdge guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GraphEdge updateGraphEdgeClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateGraphEdgeClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           GraphEdge  graphEdgeClassifications = GraphEdgeMapper.mapOmrsEntityDetailToGraphEdge(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  graphEdgeClassifications;
    }

    /**
     * Deletes a given classification from an existing graphEdge represented by a guid.
     * @param entityGuid  globally unique identifier for the graphEdge
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public GraphEdge deleteGraphEdgeClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteGraphEdgeClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       GraphEdge declassifiedGraphEdge =  GraphEdgeMapper.mapOmrsEntityDetailToGraphEdge(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedGraphEdge;
    }

    /**
      * Get the relationships associated with entity graphEdge represented by a guid.
      * @param entityGuid  globally unique identifier for the graphEdge
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getGraphEdgeRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getGraphEdgeRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an community given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the communities relationships.
     * @param entityGuid GUID for the entity
     * @return Community
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public Community getCommunityById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getCommunityById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        Community gotcommunity = CommunityMapper.mapOmrsEntityDetailToCommunity(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotcommunity );
        }
        return gotcommunity;

    }
    /**
     * Create new community.
     * @param community
     * @return Community
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public Community createCommunity(String userId,Community community)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createCommunityById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("Community");
        if (constraint!=null) {
             constraint.preCreate(community);
        }

        EntityDetail entityDetail = CommunityMapper.mapCommunityToOmrsEntityDetail(community);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        Community createdCommunity =  CommunityMapper.mapOmrsEntityDetailToCommunity(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created Community="+ createdCommunity );
        }
        return createdCommunity;
    }
    /**
     * Update community 
     * @param community
     * @return Community
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public Community updateCommunity(String userId, Community community)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateCommunityById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = CommunityMapper.mapCommunityToOmrsEntityDetail(community);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            Community updatedCommunity =  CommunityMapper.mapOmrsEntityDetailToCommunity(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated Community="+ updatedCommunity );
            }
            return updatedCommunity;
        }

    /**
     * Delete an community identified by its GUID. Delete is a soft delete, this means that the community has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the community
     * @return Community
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteCommunityByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteCommunityByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an community identified by its GUID. Delete is a hard delete, this means that the community is really
     * deleted .
     *
     * @param  entityGuid GUID for the community
     * @return Community
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeCommunityByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeCommunityByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied community
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public Community addCommunityClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addCommunityClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         Community communityClassifications = CommunityMapper.mapOmrsEntityDetailToCommunity(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified Community=" +  communityClassifications);
         }
         return  communityClassifications;
    }

    /**
     * Updates classifications to an existing community represented by a guid.
     * @param  entityGuid globally unique identifier for the community
     * @return classification for the given community guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Community updateCommunityClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateCommunityClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           Community  communityClassifications = CommunityMapper.mapOmrsEntityDetailToCommunity(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  communityClassifications;
    }

    /**
     * Deletes a given classification from an existing community represented by a guid.
     * @param entityGuid  globally unique identifier for the community
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Community deleteCommunityClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteCommunityClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       Community declassifiedCommunity =  CommunityMapper.mapOmrsEntityDetailToCommunity(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedCommunity;
    }

    /**
      * Get the relationships associated with entity community represented by a guid.
      * @param entityGuid  globally unique identifier for the community
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getCommunityRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getCommunityRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an location given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the locations relationships.
     * @param entityGuid GUID for the entity
     * @return Location
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public Location getLocationById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getLocationById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        Location gotlocation = LocationMapper.mapOmrsEntityDetailToLocation(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotlocation );
        }
        return gotlocation;

    }
    /**
     * Create new location.
     * @param location
     * @return Location
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public Location createLocation(String userId,Location location)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createLocationById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("Location");
        if (constraint!=null) {
             constraint.preCreate(location);
        }

        EntityDetail entityDetail = LocationMapper.mapLocationToOmrsEntityDetail(location);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        Location createdLocation =  LocationMapper.mapOmrsEntityDetailToLocation(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created Location="+ createdLocation );
        }
        return createdLocation;
    }
    /**
     * Update location 
     * @param location
     * @return Location
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public Location updateLocation(String userId, Location location)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateLocationById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = LocationMapper.mapLocationToOmrsEntityDetail(location);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            Location updatedLocation =  LocationMapper.mapOmrsEntityDetailToLocation(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated Location="+ updatedLocation );
            }
            return updatedLocation;
        }

    /**
     * Delete an location identified by its GUID. Delete is a soft delete, this means that the location has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the location
     * @return Location
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteLocationByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteLocationByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an location identified by its GUID. Delete is a hard delete, this means that the location is really
     * deleted .
     *
     * @param  entityGuid GUID for the location
     * @return Location
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeLocationByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeLocationByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied location
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public Location addLocationClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addLocationClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         Location locationClassifications = LocationMapper.mapOmrsEntityDetailToLocation(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified Location=" +  locationClassifications);
         }
         return  locationClassifications;
    }

    /**
     * Updates classifications to an existing location represented by a guid.
     * @param  entityGuid globally unique identifier for the location
     * @return classification for the given location guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Location updateLocationClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateLocationClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           Location  locationClassifications = LocationMapper.mapOmrsEntityDetailToLocation(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  locationClassifications;
    }

    /**
     * Deletes a given classification from an existing location represented by a guid.
     * @param entityGuid  globally unique identifier for the location
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public Location deleteLocationClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteLocationClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       Location declassifiedLocation =  LocationMapper.mapOmrsEntityDetailToLocation(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedLocation;
    }

    /**
      * Get the relationships associated with entity location represented by a guid.
      * @param entityGuid  globally unique identifier for the location
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getLocationRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getLocationRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an businessCapability given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the businessCapabilities relationships.
     * @param entityGuid GUID for the entity
     * @return BusinessCapability
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public BusinessCapability getBusinessCapabilityById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getBusinessCapabilityById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        BusinessCapability gotbusinessCapability = BusinessCapabilityMapper.mapOmrsEntityDetailToBusinessCapability(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotbusinessCapability );
        }
        return gotbusinessCapability;

    }
    /**
     * Create new businessCapability.
     * @param businessCapability
     * @return BusinessCapability
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public BusinessCapability createBusinessCapability(String userId,BusinessCapability businessCapability)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createBusinessCapabilityById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("BusinessCapability");
        if (constraint!=null) {
             constraint.preCreate(businessCapability);
        }

        EntityDetail entityDetail = BusinessCapabilityMapper.mapBusinessCapabilityToOmrsEntityDetail(businessCapability);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        BusinessCapability createdBusinessCapability =  BusinessCapabilityMapper.mapOmrsEntityDetailToBusinessCapability(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created BusinessCapability="+ createdBusinessCapability );
        }
        return createdBusinessCapability;
    }
    /**
     * Update businessCapability 
     * @param businessCapability
     * @return BusinessCapability
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public BusinessCapability updateBusinessCapability(String userId, BusinessCapability businessCapability)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateBusinessCapabilityById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = BusinessCapabilityMapper.mapBusinessCapabilityToOmrsEntityDetail(businessCapability);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            BusinessCapability updatedBusinessCapability =  BusinessCapabilityMapper.mapOmrsEntityDetailToBusinessCapability(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated BusinessCapability="+ updatedBusinessCapability );
            }
            return updatedBusinessCapability;
        }

    /**
     * Delete an businessCapability identified by its GUID. Delete is a soft delete, this means that the businessCapability has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the businessCapability
     * @return BusinessCapability
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteBusinessCapabilityByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteBusinessCapabilityByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an businessCapability identified by its GUID. Delete is a hard delete, this means that the businessCapability is really
     * deleted .
     *
     * @param  entityGuid GUID for the businessCapability
     * @return BusinessCapability
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeBusinessCapabilityByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeBusinessCapabilityByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied businessCapability
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public BusinessCapability addBusinessCapabilityClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addBusinessCapabilityClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         BusinessCapability businessCapabilityClassifications = BusinessCapabilityMapper.mapOmrsEntityDetailToBusinessCapability(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified BusinessCapability=" +  businessCapabilityClassifications);
         }
         return  businessCapabilityClassifications;
    }

    /**
     * Updates classifications to an existing businessCapability represented by a guid.
     * @param  entityGuid globally unique identifier for the businessCapability
     * @return classification for the given businessCapability guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public BusinessCapability updateBusinessCapabilityClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateBusinessCapabilityClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           BusinessCapability  businessCapabilityClassifications = BusinessCapabilityMapper.mapOmrsEntityDetailToBusinessCapability(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  businessCapabilityClassifications;
    }

    /**
     * Deletes a given classification from an existing businessCapability represented by a guid.
     * @param entityGuid  globally unique identifier for the businessCapability
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public BusinessCapability deleteBusinessCapabilityClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteBusinessCapabilityClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       BusinessCapability declassifiedBusinessCapability =  BusinessCapabilityMapper.mapOmrsEntityDetailToBusinessCapability(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedBusinessCapability;
    }

    /**
      * Get the relationships associated with entity businessCapability represented by a guid.
      * @param entityGuid  globally unique identifier for the businessCapability
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getBusinessCapabilityRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getBusinessCapabilityRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
    /**
     * Fetch complete definition of an schemaLinkElement given its GUID.
     * The limit and offset paging parameters limit the number elements returned in each of the schemaLinkElements relationships.
     * @param entityGuid GUID for the entity
     * @return SchemaLinkElement
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     */
    public SchemaLinkElement getSchemaLinkElementById(String userId,String entityGuid)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException
    {
        final String methodName = "getSchemaLinkElementById";
        if (log.isDebugEnabled()) {
          log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
            
        SchemaLinkElement gotschemaLinkElement = SchemaLinkElementMapper.mapOmrsEntityDetailToSchemaLinkElement(omrsEntityDetail);
        if (log.isDebugEnabled()) {
         
             log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid+",entity="+ gotschemaLinkElement );
        }
        return gotschemaLinkElement;

    }
    /**
     * Create new schemaLinkElement.
     * @param schemaLinkElement
     * @return SchemaLinkElement
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */

    public SchemaLinkElement createSchemaLinkElement(String userId,SchemaLinkElement schemaLinkElement)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, StatusNotSupportedException
    {

        final String methodName = "createSchemaLinkElementById";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId=" + userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        SubjectAreaConstraint constraint = SubjectAreaConstraintsFactory.getSubjectAreaConstraint("SchemaLinkElement");
        if (constraint!=null) {
             constraint.preCreate(schemaLinkElement);
        }

        EntityDetail entityDetail = SchemaLinkElementMapper.mapSchemaLinkElementToOmrsEntityDetail(schemaLinkElement);
        EntityDetail addedOMRSEntityDetail = oMRSAPIHelper.callOMRSAddEntity(userId,entityDetail);

        SchemaLinkElement createdSchemaLinkElement =  SchemaLinkElementMapper.mapOmrsEntityDetailToSchemaLinkElement(addedOMRSEntityDetail);
        if (log.isDebugEnabled()) {
              log.debug("<== successful method : " + methodName + ",userId="+userId+", created SchemaLinkElement="+ createdSchemaLinkElement );
        }
        return createdSchemaLinkElement;
    }
    /**
     * Update schemaLinkElement 
     * @param schemaLinkElement
     * @return SchemaLinkElement
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws ClassificationException
     * @throws StatusNotSupportedException
     */
    public SchemaLinkElement updateSchemaLinkElement(String userId, SchemaLinkElement schemaLinkElement)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,UnrecognizedGUIDException
    {

            final String methodName = "updateSchemaLinkElementById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId=" + userId);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            EntityDetail entityDetail = SchemaLinkElementMapper.mapSchemaLinkElementToOmrsEntityDetail(schemaLinkElement);
            RestValidator.validateGUIDNotNull(className,methodName,entityDetail.getGUID(),"guid");

            // TODO the type guid needs to be set in the supplied entityDetail

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSUpdateEntity(userId,entityDetail);

            SchemaLinkElement updatedSchemaLinkElement =  SchemaLinkElementMapper.mapOmrsEntityDetailToSchemaLinkElement(updatedOMRSEntityDetail);
            if (log.isDebugEnabled()) {
                    log.debug("<== successful method: " + methodName + ",userId=" + userId + ",updated SchemaLinkElement="+ updatedSchemaLinkElement );
            }
            return updatedSchemaLinkElement;
        }

    /**
     * Delete an schemaLinkElement identified by its GUID. Delete is a soft delete, this means that the schemaLinkElement has its status changed to
     * deleted. Soft deletion support os optional, so this call may fail. Soft deletes can be undone using the restore call.
     * If it is required that an entity is really deleted (a hard delete) then the purge call should be used.
     *
     * @param  entityGuid GUID for the schemaLinkElement
     * @return SchemaLinkElement
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws FunctionNotSupportedException
     * @throws UnrecognizedGUIDException
     */

    public EntityDetail deleteSchemaLinkElementByGuid(String userId,final String entityGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException,  FunctionNotSupportedException, InvalidParameterException, UnrecognizedGUIDException
    {
         final String methodName = "deleteSchemaLinkElementByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         EntityDetail deletedOmrsEntityDetail = oMRSAPIHelper.callOMRSDeleteEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         return deletedOmrsEntityDetail;

    }
    /**
     * Purge an schemaLinkElement identified by its GUID. Delete is a hard delete, this means that the schemaLinkElement is really
     * deleted .
     *
     * @param  entityGuid GUID for the schemaLinkElement
     * @return SchemaLinkElement
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws EntityNotDeletedException
     * @throws GUIDNotPurgedException
     */
    public void purgeSchemaLinkElementByGuid(String userId,final String entityGuid)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, EntityNotDeletedException, GUIDNotPurgedException {

        final String methodName = "purgeSchemaLinkElementByGuid";
         if (log.isDebugEnabled()) {
              log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);
         RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
         String typeName = omrsEntityDetail.getType().getTypeDefName();
         String typeGuid = omrsEntityDetail.getType().getTypeDefGUID();
         oMRSAPIHelper.callOMRSPurgeEntity(userId,typeName,typeGuid,entityGuid);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
    }

    /**
     * Add classifications to the supplied schemaLinkElement
     * @param entityGuid
     * @param classifications
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
     public SchemaLinkElement addSchemaLinkElementClassifications(String userId,final String entityGuid, List<Classification> classifications)
           throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException, UnrecognizedGUIDException {

        final String methodName = "addSchemaLinkElementClassifications";
         if (log.isDebugEnabled()) {
             log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
         }
         RestValidator.validateUserIdNotNull(className,methodName,userId);


         for (Classification classification:classifications) {
             InstanceProperties instanceProperties = classification.obtainInstanceProperties();
             String name =classification.getClassificationName();
             RestValidator.validateNameNotNull(className,methodName,name,"classifications");
             oMRSAPIHelper.callOMRSClassifyEntity(userId,
                 entityGuid,
                 name,
                 instanceProperties);
         }

         EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

         SchemaLinkElement schemaLinkElementClassifications = SchemaLinkElementMapper.mapOmrsEntityDetailToSchemaLinkElement(omrsEntityDetail);
         if (log.isDebugEnabled()) {
             log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",classified SchemaLinkElement=" +  schemaLinkElementClassifications);
         }
         return  schemaLinkElementClassifications;
    }

    /**
     * Updates classifications to an existing schemaLinkElement represented by a guid.
     * @param  entityGuid globally unique identifier for the schemaLinkElement
     * @return classification for the given schemaLinkElement guid
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public SchemaLinkElement updateSchemaLinkElementClassification(String userId, final String entityGuid, List<Classification> classificationsToUpdate)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

        final String methodName = "updateSchemaLinkElementClassifications";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

            EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);

            List<String> existingClassificationNames = new ArrayList();
            for (org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Classification existingClassification:omrsEntityDetail.getClassifications()) {
                 String name = existingClassification.getName();
            }
            for (Classification classification:classificationsToUpdate) {
                 String name = classification.getClassificationName();
                 // Only allow updates of classifications that already exist.
                 if (!existingClassificationNames.contains(name)) {
                     SubjectAreaErrorCode errorCode = SubjectAreaErrorCode.UPDATE_REQUESTED_ON_A_NON_EXISTENT_CLASSIFICATION;
                     String errorMessage = errorCode.getErrorMessageId()
                            + errorCode.getFormattedErrorMessage(
                               name,
                              "classificationsToUpdate",
                              methodName,
                             entityGuid
                             );
                      log.error(errorMessage);
                      throw new InvalidParameterException(errorCode.getHTTPErrorCode(),
                                          className,
                                          methodName,
                                          errorMessage,
                                          errorCode.getSystemAction(),
                                          errorCode.getUserAction());
                 }
            }
            for (Classification classification:classificationsToUpdate) {
                 InstanceProperties instanceProperties = classification.obtainInstanceProperties();
                 String name =classification.getClassificationName();
                 //remove existing classification
                 oMRSAPIHelper.callOMRSDeClassifyEntity(userId,
                     entityGuid,
                     name);
                 // re-add with the new properties.
                 oMRSAPIHelper.callOMRSClassifyEntity(userId,
                     entityGuid,
                     name,
                     instanceProperties);
            }

            EntityDetail updatedOMRSEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
           SchemaLinkElement  schemaLinkElementClassifications = SchemaLinkElementMapper.mapOmrsEntityDetailToSchemaLinkElement(updatedOMRSEntityDetail);

            if (log.isDebugEnabled()) {
                   log.debug("<== Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
            }
             return  schemaLinkElementClassifications;
    }

    /**
     * Deletes a given classification from an existing schemaLinkElement represented by a guid.
     * @param entityGuid  globally unique identifier for the schemaLinkElement
     * @param name name of the classification
     * @throws MetadataServerUncontactableException
     * @throws UserNotAuthorizedException
     * @throws InvalidParameterException
     * @throws UnrecognizedGUIDException
     * @throws ClassificationException
     */
    public SchemaLinkElement deleteSchemaLinkElementClassification(String userId,String entityGuid, final String name)
        throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, ClassificationException,  UnrecognizedGUIDException {

       final String methodName = "deleteSchemaLinkElementClassification";
       if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       RestValidator.validateUserIdNotNull(className,methodName,userId);
       RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");


       oMRSAPIHelper.callOMRSDeClassifyEntity(userId, entityGuid,name);
       EntityDetail omrsEntityDetail = oMRSAPIHelper.callOMRSGetEntityByGuid(userId,entityGuid);
       SchemaLinkElement declassifiedSchemaLinkElement =  SchemaLinkElementMapper.mapOmrsEntityDetailToSchemaLinkElement(omrsEntityDetail);
       if (log.isDebugEnabled()) {
           log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+entityGuid+",name="+name);
       }
       return declassifiedSchemaLinkElement;
    }

    /**
      * Get the relationships associated with entity schemaLinkElement represented by a guid.
      * @param entityGuid  globally unique identifier for the schemaLinkElement
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public List<Line> getSchemaLinkElementRelationships(String userId,String entityGuid)
         throws MetadataServerUncontactableException,
          UserNotAuthorizedException,
          InvalidParameterException,
          FunctionNotSupportedException,
          UnrecognizedGUIDException {
        final String methodName = "getSchemaLinkElementRelationships";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);
        RestValidator.validateGUIDNotNull(className,methodName,entityGuid,"entityGuid");

        List<Line> lines = new ArrayList<>();

        List<Relationship> omrsRelationships = oMRSAPIHelper.callGetRelationshipsForEntity( userId,entityGuid);
        if (omrsRelationships !=null) {
            for (Relationship omrsRelationship:omrsRelationships){
                String name = omrsRelationship.getType().getTypeDefName();
                   if (name.equals("AcceptedAnswer")) {
                    AcceptedAnswer acceptedAnswer= AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(omrsRelationship);
                    lines.add(acceptedAnswer);
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug("<== successful method : " + methodName + ",userId="+userId+",guid="+entityGuid);
        }
        return lines;
    }
     // Relationships

    /**
      * Create relationship
      * @param UsedInContext relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public UsedInContext createUsedInContextRelationship(String userId,UsedInContext relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createUsedInContextRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = UsedInContextMapper.mapUsedInContextToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        UsedInContext reclassifiedUsedInContext =  UsedInContextMapper.mapOmrsRelationshipToUsedInContext(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedUsedInContext;
    }
    /**
      * get relationship
      * @param UsedInContext relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public UsedInContext getUsedInContextRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getUsedInContextRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            UsedInContext gotUsedInContext = UsedInContextMapper.mapOmrsRelationshipToUsedInContext(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotUsedInContext;
      }
    /**
      * update relationship
      * @param UsedInContext relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public UsedInContext updateUsedInContextRelationship(String userId,UsedInContext usedInContext)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateUsedInContextRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = UsedInContextMapper.mapUsedInContextToOmrsRelationship(usedInContext);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        UsedInContext updatedUsedInContext = UsedInContextMapper.mapOmrsRelationshipToUsedInContext(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedUsedInContext;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteUsedInContextRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteUsedInContextRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("UsedInContext")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type usedInContext
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeUsedInContextRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeUsedInContextRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("UsedInContext")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type usedInContext
             }
     }
    /**
      * Create relationship
      * @param Leadership relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public Leadership createLeadershipRelationship(String userId,Leadership relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createLeadershipRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = LeadershipMapper.mapLeadershipToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        Leadership reclassifiedLeadership =  LeadershipMapper.mapOmrsRelationshipToLeadership(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedLeadership;
    }
    /**
      * get relationship
      * @param Leadership relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public Leadership getLeadershipRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getLeadershipRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            Leadership gotLeadership = LeadershipMapper.mapOmrsRelationshipToLeadership(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotLeadership;
      }
    /**
      * update relationship
      * @param Leadership relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public Leadership updateLeadershipRelationship(String userId,Leadership leadership)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateLeadershipRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = LeadershipMapper.mapLeadershipToOmrsRelationship(leadership);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        Leadership updatedLeadership = LeadershipMapper.mapOmrsRelationshipToLeadership(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedLeadership;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteLeadershipRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteLeadershipRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("Leadership")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type leadership
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeLeadershipRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeLeadershipRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("Leadership")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type leadership
             }
     }
    /**
      * Create relationship
      * @param AttachedComment relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public AttachedComment createAttachedCommentRelationship(String userId,AttachedComment relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createAttachedCommentRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = AttachedCommentMapper.mapAttachedCommentToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        AttachedComment reclassifiedAttachedComment =  AttachedCommentMapper.mapOmrsRelationshipToAttachedComment(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedAttachedComment;
    }
    /**
      * get relationship
      * @param AttachedComment relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public AttachedComment getAttachedCommentRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getAttachedCommentRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            AttachedComment gotAttachedComment = AttachedCommentMapper.mapOmrsRelationshipToAttachedComment(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotAttachedComment;
      }
    /**
      * update relationship
      * @param AttachedComment relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public AttachedComment updateAttachedCommentRelationship(String userId,AttachedComment attachedComment)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateAttachedCommentRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = AttachedCommentMapper.mapAttachedCommentToOmrsRelationship(attachedComment);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        AttachedComment updatedAttachedComment = AttachedCommentMapper.mapOmrsRelationshipToAttachedComment(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedAttachedComment;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteAttachedCommentRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteAttachedCommentRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("AttachedComment")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type attachedComment
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeAttachedCommentRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeAttachedCommentRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("AttachedComment")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type attachedComment
             }
     }
    /**
      * Create relationship
      * @param ContactThrough relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ContactThrough createContactThroughRelationship(String userId,ContactThrough relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createContactThroughRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ContactThroughMapper.mapContactThroughToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ContactThrough reclassifiedContactThrough =  ContactThroughMapper.mapOmrsRelationshipToContactThrough(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedContactThrough;
    }
    /**
      * get relationship
      * @param ContactThrough relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ContactThrough getContactThroughRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getContactThroughRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ContactThrough gotContactThrough = ContactThroughMapper.mapOmrsRelationshipToContactThrough(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotContactThrough;
      }
    /**
      * update relationship
      * @param ContactThrough relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ContactThrough updateContactThroughRelationship(String userId,ContactThrough contactThrough)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateContactThroughRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ContactThroughMapper.mapContactThroughToOmrsRelationship(contactThrough);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ContactThrough updatedContactThrough = ContactThroughMapper.mapOmrsRelationshipToContactThrough(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedContactThrough;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteContactThroughRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteContactThroughRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ContactThrough")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type contactThrough
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeContactThroughRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeContactThroughRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ContactThrough")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type contactThrough
             }
     }
    /**
      * Create relationship
      * @param License relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public License createLicenseRelationship(String userId,License relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createLicenseRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = LicenseMapper.mapLicenseToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        License reclassifiedLicense =  LicenseMapper.mapOmrsRelationshipToLicense(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedLicense;
    }
    /**
      * get relationship
      * @param License relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public License getLicenseRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getLicenseRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            License gotLicense = LicenseMapper.mapOmrsRelationshipToLicense(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotLicense;
      }
    /**
      * update relationship
      * @param License relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public License updateLicenseRelationship(String userId,License license)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateLicenseRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = LicenseMapper.mapLicenseToOmrsRelationship(license);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        License updatedLicense = LicenseMapper.mapOmrsRelationshipToLicense(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedLicense;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteLicenseRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteLicenseRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("License")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type license
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeLicenseRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeLicenseRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("License")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type license
             }
     }
    /**
      * Create relationship
      * @param ZoneGovernance relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ZoneGovernance createZoneGovernanceRelationship(String userId,ZoneGovernance relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createZoneGovernanceRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ZoneGovernanceMapper.mapZoneGovernanceToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ZoneGovernance reclassifiedZoneGovernance =  ZoneGovernanceMapper.mapOmrsRelationshipToZoneGovernance(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedZoneGovernance;
    }
    /**
      * get relationship
      * @param ZoneGovernance relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ZoneGovernance getZoneGovernanceRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getZoneGovernanceRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ZoneGovernance gotZoneGovernance = ZoneGovernanceMapper.mapOmrsRelationshipToZoneGovernance(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotZoneGovernance;
      }
    /**
      * update relationship
      * @param ZoneGovernance relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ZoneGovernance updateZoneGovernanceRelationship(String userId,ZoneGovernance zoneGovernance)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateZoneGovernanceRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ZoneGovernanceMapper.mapZoneGovernanceToOmrsRelationship(zoneGovernance);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ZoneGovernance updatedZoneGovernance = ZoneGovernanceMapper.mapOmrsRelationshipToZoneGovernance(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedZoneGovernance;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteZoneGovernanceRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteZoneGovernanceRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ZoneGovernance")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type zoneGovernance
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeZoneGovernanceRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeZoneGovernanceRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ZoneGovernance")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type zoneGovernance
             }
     }
    /**
      * Create relationship
      * @param FolderHierarchy relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public FolderHierarchy createFolderHierarchyRelationship(String userId,FolderHierarchy relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createFolderHierarchyRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = FolderHierarchyMapper.mapFolderHierarchyToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        FolderHierarchy reclassifiedFolderHierarchy =  FolderHierarchyMapper.mapOmrsRelationshipToFolderHierarchy(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedFolderHierarchy;
    }
    /**
      * get relationship
      * @param FolderHierarchy relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public FolderHierarchy getFolderHierarchyRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getFolderHierarchyRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            FolderHierarchy gotFolderHierarchy = FolderHierarchyMapper.mapOmrsRelationshipToFolderHierarchy(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotFolderHierarchy;
      }
    /**
      * update relationship
      * @param FolderHierarchy relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public FolderHierarchy updateFolderHierarchyRelationship(String userId,FolderHierarchy folderHierarchy)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateFolderHierarchyRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = FolderHierarchyMapper.mapFolderHierarchyToOmrsRelationship(folderHierarchy);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        FolderHierarchy updatedFolderHierarchy = FolderHierarchyMapper.mapOmrsRelationshipToFolderHierarchy(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedFolderHierarchy;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteFolderHierarchyRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteFolderHierarchyRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("FolderHierarchy")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type folderHierarchy
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeFolderHierarchyRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeFolderHierarchyRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("FolderHierarchy")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type folderHierarchy
             }
     }
    /**
      * Create relationship
      * @param HostClusterMember relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public HostClusterMember createHostClusterMemberRelationship(String userId,HostClusterMember relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createHostClusterMemberRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = HostClusterMemberMapper.mapHostClusterMemberToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        HostClusterMember reclassifiedHostClusterMember =  HostClusterMemberMapper.mapOmrsRelationshipToHostClusterMember(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedHostClusterMember;
    }
    /**
      * get relationship
      * @param HostClusterMember relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public HostClusterMember getHostClusterMemberRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getHostClusterMemberRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            HostClusterMember gotHostClusterMember = HostClusterMemberMapper.mapOmrsRelationshipToHostClusterMember(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotHostClusterMember;
      }
    /**
      * update relationship
      * @param HostClusterMember relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public HostClusterMember updateHostClusterMemberRelationship(String userId,HostClusterMember hostClusterMember)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateHostClusterMemberRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = HostClusterMemberMapper.mapHostClusterMemberToOmrsRelationship(hostClusterMember);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        HostClusterMember updatedHostClusterMember = HostClusterMemberMapper.mapOmrsRelationshipToHostClusterMember(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedHostClusterMember;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteHostClusterMemberRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteHostClusterMemberRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("HostClusterMember")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type hostClusterMember
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeHostClusterMemberRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeHostClusterMemberRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("HostClusterMember")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type hostClusterMember
             }
     }
    /**
      * Create relationship
      * @param LibraryCategoryReference relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public LibraryCategoryReference createLibraryCategoryReferenceRelationship(String userId,LibraryCategoryReference relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createLibraryCategoryReferenceRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = LibraryCategoryReferenceMapper.mapLibraryCategoryReferenceToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        LibraryCategoryReference reclassifiedLibraryCategoryReference =  LibraryCategoryReferenceMapper.mapOmrsRelationshipToLibraryCategoryReference(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedLibraryCategoryReference;
    }
    /**
      * get relationship
      * @param LibraryCategoryReference relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public LibraryCategoryReference getLibraryCategoryReferenceRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getLibraryCategoryReferenceRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            LibraryCategoryReference gotLibraryCategoryReference = LibraryCategoryReferenceMapper.mapOmrsRelationshipToLibraryCategoryReference(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotLibraryCategoryReference;
      }
    /**
      * update relationship
      * @param LibraryCategoryReference relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public LibraryCategoryReference updateLibraryCategoryReferenceRelationship(String userId,LibraryCategoryReference libraryCategoryReference)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateLibraryCategoryReferenceRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = LibraryCategoryReferenceMapper.mapLibraryCategoryReferenceToOmrsRelationship(libraryCategoryReference);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        LibraryCategoryReference updatedLibraryCategoryReference = LibraryCategoryReferenceMapper.mapOmrsRelationshipToLibraryCategoryReference(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedLibraryCategoryReference;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteLibraryCategoryReferenceRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteLibraryCategoryReferenceRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("LibraryCategoryReference")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type libraryCategoryReference
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeLibraryCategoryReferenceRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeLibraryCategoryReferenceRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("LibraryCategoryReference")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type libraryCategoryReference
             }
     }
    /**
      * Create relationship
      * @param ProjectCharterLink relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ProjectCharterLink createProjectCharterLinkRelationship(String userId,ProjectCharterLink relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createProjectCharterLinkRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ProjectCharterLinkMapper.mapProjectCharterLinkToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ProjectCharterLink reclassifiedProjectCharterLink =  ProjectCharterLinkMapper.mapOmrsRelationshipToProjectCharterLink(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedProjectCharterLink;
    }
    /**
      * get relationship
      * @param ProjectCharterLink relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ProjectCharterLink getProjectCharterLinkRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getProjectCharterLinkRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ProjectCharterLink gotProjectCharterLink = ProjectCharterLinkMapper.mapOmrsRelationshipToProjectCharterLink(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotProjectCharterLink;
      }
    /**
      * update relationship
      * @param ProjectCharterLink relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ProjectCharterLink updateProjectCharterLinkRelationship(String userId,ProjectCharterLink projectCharterLink)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateProjectCharterLinkRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ProjectCharterLinkMapper.mapProjectCharterLinkToOmrsRelationship(projectCharterLink);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ProjectCharterLink updatedProjectCharterLink = ProjectCharterLinkMapper.mapOmrsRelationshipToProjectCharterLink(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedProjectCharterLink;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteProjectCharterLinkRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteProjectCharterLinkRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ProjectCharterLink")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type projectCharterLink
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeProjectCharterLinkRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeProjectCharterLinkRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ProjectCharterLink")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type projectCharterLink
             }
     }
    /**
      * Create relationship
      * @param ProfileIdentity relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ProfileIdentity createProfileIdentityRelationship(String userId,ProfileIdentity relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createProfileIdentityRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ProfileIdentityMapper.mapProfileIdentityToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ProfileIdentity reclassifiedProfileIdentity =  ProfileIdentityMapper.mapOmrsRelationshipToProfileIdentity(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedProfileIdentity;
    }
    /**
      * get relationship
      * @param ProfileIdentity relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ProfileIdentity getProfileIdentityRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getProfileIdentityRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ProfileIdentity gotProfileIdentity = ProfileIdentityMapper.mapOmrsRelationshipToProfileIdentity(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotProfileIdentity;
      }
    /**
      * update relationship
      * @param ProfileIdentity relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ProfileIdentity updateProfileIdentityRelationship(String userId,ProfileIdentity profileIdentity)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateProfileIdentityRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ProfileIdentityMapper.mapProfileIdentityToOmrsRelationship(profileIdentity);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ProfileIdentity updatedProfileIdentity = ProfileIdentityMapper.mapOmrsRelationshipToProfileIdentity(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedProfileIdentity;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteProfileIdentityRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteProfileIdentityRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ProfileIdentity")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type profileIdentity
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeProfileIdentityRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeProfileIdentityRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ProfileIdentity")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type profileIdentity
             }
     }
    /**
      * Create relationship
      * @param ToDoSource relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ToDoSource createToDoSourceRelationship(String userId,ToDoSource relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createToDoSourceRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ToDoSourceMapper.mapToDoSourceToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ToDoSource reclassifiedToDoSource =  ToDoSourceMapper.mapOmrsRelationshipToToDoSource(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedToDoSource;
    }
    /**
      * get relationship
      * @param ToDoSource relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ToDoSource getToDoSourceRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getToDoSourceRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ToDoSource gotToDoSource = ToDoSourceMapper.mapOmrsRelationshipToToDoSource(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotToDoSource;
      }
    /**
      * update relationship
      * @param ToDoSource relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ToDoSource updateToDoSourceRelationship(String userId,ToDoSource toDoSource)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateToDoSourceRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ToDoSourceMapper.mapToDoSourceToOmrsRelationship(toDoSource);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ToDoSource updatedToDoSource = ToDoSourceMapper.mapOmrsRelationshipToToDoSource(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedToDoSource;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteToDoSourceRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteToDoSourceRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ToDoSource")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type toDoSource
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeToDoSourceRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeToDoSourceRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ToDoSource")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type toDoSource
             }
     }
    /**
      * Create relationship
      * @param Translation relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public Translation createTranslationRelationship(String userId,Translation relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createTranslationRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = TranslationMapper.mapTranslationToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        Translation reclassifiedTranslation =  TranslationMapper.mapOmrsRelationshipToTranslation(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedTranslation;
    }
    /**
      * get relationship
      * @param Translation relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public Translation getTranslationRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getTranslationRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            Translation gotTranslation = TranslationMapper.mapOmrsRelationshipToTranslation(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotTranslation;
      }
    /**
      * update relationship
      * @param Translation relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public Translation updateTranslationRelationship(String userId,Translation translation)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateTranslationRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = TranslationMapper.mapTranslationToOmrsRelationship(translation);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        Translation updatedTranslation = TranslationMapper.mapOmrsRelationshipToTranslation(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedTranslation;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteTranslationRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteTranslationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("Translation")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type translation
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeTranslationRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeTranslationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("Translation")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type translation
             }
     }
    /**
      * Create relationship
      * @param SchemaLinkToType relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public SchemaLinkToType createSchemaLinkToTypeRelationship(String userId,SchemaLinkToType relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createSchemaLinkToTypeRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = SchemaLinkToTypeMapper.mapSchemaLinkToTypeToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        SchemaLinkToType reclassifiedSchemaLinkToType =  SchemaLinkToTypeMapper.mapOmrsRelationshipToSchemaLinkToType(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedSchemaLinkToType;
    }
    /**
      * get relationship
      * @param SchemaLinkToType relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public SchemaLinkToType getSchemaLinkToTypeRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getSchemaLinkToTypeRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            SchemaLinkToType gotSchemaLinkToType = SchemaLinkToTypeMapper.mapOmrsRelationshipToSchemaLinkToType(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotSchemaLinkToType;
      }
    /**
      * update relationship
      * @param SchemaLinkToType relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public SchemaLinkToType updateSchemaLinkToTypeRelationship(String userId,SchemaLinkToType schemaLinkToType)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateSchemaLinkToTypeRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = SchemaLinkToTypeMapper.mapSchemaLinkToTypeToOmrsRelationship(schemaLinkToType);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        SchemaLinkToType updatedSchemaLinkToType = SchemaLinkToTypeMapper.mapOmrsRelationshipToSchemaLinkToType(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedSchemaLinkToType;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteSchemaLinkToTypeRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteSchemaLinkToTypeRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("SchemaLinkToType")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type schemaLinkToType
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeSchemaLinkToTypeRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeSchemaLinkToTypeRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("SchemaLinkToType")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type schemaLinkToType
             }
     }
    /**
      * Create relationship
      * @param CommunityResources relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public CommunityResources createCommunityResourcesRelationship(String userId,CommunityResources relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createCommunityResourcesRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = CommunityResourcesMapper.mapCommunityResourcesToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        CommunityResources reclassifiedCommunityResources =  CommunityResourcesMapper.mapOmrsRelationshipToCommunityResources(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedCommunityResources;
    }
    /**
      * get relationship
      * @param CommunityResources relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public CommunityResources getCommunityResourcesRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getCommunityResourcesRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            CommunityResources gotCommunityResources = CommunityResourcesMapper.mapOmrsRelationshipToCommunityResources(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotCommunityResources;
      }
    /**
      * update relationship
      * @param CommunityResources relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public CommunityResources updateCommunityResourcesRelationship(String userId,CommunityResources communityResources)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateCommunityResourcesRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = CommunityResourcesMapper.mapCommunityResourcesToOmrsRelationship(communityResources);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        CommunityResources updatedCommunityResources = CommunityResourcesMapper.mapOmrsRelationshipToCommunityResources(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedCommunityResources;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteCommunityResourcesRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteCommunityResourcesRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("CommunityResources")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type communityResources
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeCommunityResourcesRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeCommunityResourcesRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("CommunityResources")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type communityResources
             }
     }
    /**
      * Create relationship
      * @param DataContentForDataSet relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public DataContentForDataSet createDataContentForDataSetRelationship(String userId,DataContentForDataSet relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createDataContentForDataSetRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = DataContentForDataSetMapper.mapDataContentForDataSetToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        DataContentForDataSet reclassifiedDataContentForDataSet =  DataContentForDataSetMapper.mapOmrsRelationshipToDataContentForDataSet(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedDataContentForDataSet;
    }
    /**
      * get relationship
      * @param DataContentForDataSet relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public DataContentForDataSet getDataContentForDataSetRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getDataContentForDataSetRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            DataContentForDataSet gotDataContentForDataSet = DataContentForDataSetMapper.mapOmrsRelationshipToDataContentForDataSet(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotDataContentForDataSet;
      }
    /**
      * update relationship
      * @param DataContentForDataSet relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public DataContentForDataSet updateDataContentForDataSetRelationship(String userId,DataContentForDataSet dataContentForDataSet)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateDataContentForDataSetRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = DataContentForDataSetMapper.mapDataContentForDataSetToOmrsRelationship(dataContentForDataSet);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        DataContentForDataSet updatedDataContentForDataSet = DataContentForDataSetMapper.mapOmrsRelationshipToDataContentForDataSet(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedDataContentForDataSet;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteDataContentForDataSetRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteDataContentForDataSetRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("DataContentForDataSet")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type dataContentForDataSet
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeDataContentForDataSetRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeDataContentForDataSetRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("DataContentForDataSet")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type dataContentForDataSet
             }
     }
    /**
      * Create relationship
      * @param ServerEndpoint relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ServerEndpoint createServerEndpointRelationship(String userId,ServerEndpoint relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createServerEndpointRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ServerEndpointMapper.mapServerEndpointToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ServerEndpoint reclassifiedServerEndpoint =  ServerEndpointMapper.mapOmrsRelationshipToServerEndpoint(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedServerEndpoint;
    }
    /**
      * get relationship
      * @param ServerEndpoint relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ServerEndpoint getServerEndpointRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getServerEndpointRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ServerEndpoint gotServerEndpoint = ServerEndpointMapper.mapOmrsRelationshipToServerEndpoint(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotServerEndpoint;
      }
    /**
      * update relationship
      * @param ServerEndpoint relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ServerEndpoint updateServerEndpointRelationship(String userId,ServerEndpoint serverEndpoint)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateServerEndpointRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ServerEndpointMapper.mapServerEndpointToOmrsRelationship(serverEndpoint);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ServerEndpoint updatedServerEndpoint = ServerEndpointMapper.mapOmrsRelationshipToServerEndpoint(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedServerEndpoint;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteServerEndpointRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteServerEndpointRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ServerEndpoint")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type serverEndpoint
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeServerEndpointRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeServerEndpointRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ServerEndpoint")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type serverEndpoint
             }
     }
    /**
      * Create relationship
      * @param ExternalIdLink relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ExternalIdLink createExternalIdLinkRelationship(String userId,ExternalIdLink relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createExternalIdLinkRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ExternalIdLinkMapper.mapExternalIdLinkToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ExternalIdLink reclassifiedExternalIdLink =  ExternalIdLinkMapper.mapOmrsRelationshipToExternalIdLink(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedExternalIdLink;
    }
    /**
      * get relationship
      * @param ExternalIdLink relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ExternalIdLink getExternalIdLinkRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getExternalIdLinkRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ExternalIdLink gotExternalIdLink = ExternalIdLinkMapper.mapOmrsRelationshipToExternalIdLink(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotExternalIdLink;
      }
    /**
      * update relationship
      * @param ExternalIdLink relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ExternalIdLink updateExternalIdLinkRelationship(String userId,ExternalIdLink externalIdLink)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateExternalIdLinkRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ExternalIdLinkMapper.mapExternalIdLinkToOmrsRelationship(externalIdLink);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ExternalIdLink updatedExternalIdLink = ExternalIdLinkMapper.mapOmrsRelationshipToExternalIdLink(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedExternalIdLink;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteExternalIdLinkRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteExternalIdLinkRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ExternalIdLink")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type externalIdLink
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeExternalIdLinkRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeExternalIdLinkRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ExternalIdLink")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type externalIdLink
             }
     }
    /**
      * Create relationship
      * @param CategoryHierarchyLink relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public CategoryHierarchyLink createCategoryHierarchyLinkRelationship(String userId,CategoryHierarchyLink relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createCategoryHierarchyLinkRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = CategoryHierarchyLinkMapper.mapCategoryHierarchyLinkToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        CategoryHierarchyLink reclassifiedCategoryHierarchyLink =  CategoryHierarchyLinkMapper.mapOmrsRelationshipToCategoryHierarchyLink(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedCategoryHierarchyLink;
    }
    /**
      * get relationship
      * @param CategoryHierarchyLink relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public CategoryHierarchyLink getCategoryHierarchyLinkRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getCategoryHierarchyLinkRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            CategoryHierarchyLink gotCategoryHierarchyLink = CategoryHierarchyLinkMapper.mapOmrsRelationshipToCategoryHierarchyLink(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotCategoryHierarchyLink;
      }
    /**
      * update relationship
      * @param CategoryHierarchyLink relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public CategoryHierarchyLink updateCategoryHierarchyLinkRelationship(String userId,CategoryHierarchyLink categoryHierarchyLink)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateCategoryHierarchyLinkRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = CategoryHierarchyLinkMapper.mapCategoryHierarchyLinkToOmrsRelationship(categoryHierarchyLink);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        CategoryHierarchyLink updatedCategoryHierarchyLink = CategoryHierarchyLinkMapper.mapOmrsRelationshipToCategoryHierarchyLink(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedCategoryHierarchyLink;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteCategoryHierarchyLinkRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteCategoryHierarchyLinkRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("CategoryHierarchyLink")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type categoryHierarchyLink
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeCategoryHierarchyLinkRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeCategoryHierarchyLinkRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("CategoryHierarchyLink")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type categoryHierarchyLink
             }
     }
    /**
      * Create relationship
      * @param PreferredTerm relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public PreferredTerm createPreferredTermRelationship(String userId,PreferredTerm relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createPreferredTermRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = PreferredTermMapper.mapPreferredTermToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        PreferredTerm reclassifiedPreferredTerm =  PreferredTermMapper.mapOmrsRelationshipToPreferredTerm(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedPreferredTerm;
    }
    /**
      * get relationship
      * @param PreferredTerm relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public PreferredTerm getPreferredTermRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getPreferredTermRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            PreferredTerm gotPreferredTerm = PreferredTermMapper.mapOmrsRelationshipToPreferredTerm(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotPreferredTerm;
      }
    /**
      * update relationship
      * @param PreferredTerm relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public PreferredTerm updatePreferredTermRelationship(String userId,PreferredTerm preferredTerm)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updatePreferredTermRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = PreferredTermMapper.mapPreferredTermToOmrsRelationship(preferredTerm);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        PreferredTerm updatedPreferredTerm = PreferredTermMapper.mapOmrsRelationshipToPreferredTerm(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedPreferredTerm;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deletePreferredTermRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deletePreferredTermRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("PreferredTerm")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type preferredTerm
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgePreferredTermRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgePreferredTermRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("PreferredTerm")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type preferredTerm
             }
     }
    /**
      * Create relationship
      * @param ProjectHierarchy relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ProjectHierarchy createProjectHierarchyRelationship(String userId,ProjectHierarchy relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createProjectHierarchyRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ProjectHierarchyMapper.mapProjectHierarchyToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ProjectHierarchy reclassifiedProjectHierarchy =  ProjectHierarchyMapper.mapOmrsRelationshipToProjectHierarchy(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedProjectHierarchy;
    }
    /**
      * get relationship
      * @param ProjectHierarchy relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ProjectHierarchy getProjectHierarchyRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getProjectHierarchyRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ProjectHierarchy gotProjectHierarchy = ProjectHierarchyMapper.mapOmrsRelationshipToProjectHierarchy(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotProjectHierarchy;
      }
    /**
      * update relationship
      * @param ProjectHierarchy relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ProjectHierarchy updateProjectHierarchyRelationship(String userId,ProjectHierarchy projectHierarchy)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateProjectHierarchyRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ProjectHierarchyMapper.mapProjectHierarchyToOmrsRelationship(projectHierarchy);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ProjectHierarchy updatedProjectHierarchy = ProjectHierarchyMapper.mapOmrsRelationshipToProjectHierarchy(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedProjectHierarchy;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteProjectHierarchyRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteProjectHierarchyRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ProjectHierarchy")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type projectHierarchy
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeProjectHierarchyRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeProjectHierarchyRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ProjectHierarchy")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type projectHierarchy
             }
     }
    /**
      * Create relationship
      * @param DeployedVirtualContainer relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public DeployedVirtualContainer createDeployedVirtualContainerRelationship(String userId,DeployedVirtualContainer relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createDeployedVirtualContainerRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = DeployedVirtualContainerMapper.mapDeployedVirtualContainerToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        DeployedVirtualContainer reclassifiedDeployedVirtualContainer =  DeployedVirtualContainerMapper.mapOmrsRelationshipToDeployedVirtualContainer(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedDeployedVirtualContainer;
    }
    /**
      * get relationship
      * @param DeployedVirtualContainer relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public DeployedVirtualContainer getDeployedVirtualContainerRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getDeployedVirtualContainerRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            DeployedVirtualContainer gotDeployedVirtualContainer = DeployedVirtualContainerMapper.mapOmrsRelationshipToDeployedVirtualContainer(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotDeployedVirtualContainer;
      }
    /**
      * update relationship
      * @param DeployedVirtualContainer relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public DeployedVirtualContainer updateDeployedVirtualContainerRelationship(String userId,DeployedVirtualContainer deployedVirtualContainer)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateDeployedVirtualContainerRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = DeployedVirtualContainerMapper.mapDeployedVirtualContainerToOmrsRelationship(deployedVirtualContainer);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        DeployedVirtualContainer updatedDeployedVirtualContainer = DeployedVirtualContainerMapper.mapOmrsRelationshipToDeployedVirtualContainer(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedDeployedVirtualContainer;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteDeployedVirtualContainerRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteDeployedVirtualContainerRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("DeployedVirtualContainer")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type deployedVirtualContainer
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeDeployedVirtualContainerRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeDeployedVirtualContainerRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("DeployedVirtualContainer")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type deployedVirtualContainer
             }
     }
    /**
      * Create relationship
      * @param ProjectMeeting relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ProjectMeeting createProjectMeetingRelationship(String userId,ProjectMeeting relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createProjectMeetingRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ProjectMeetingMapper.mapProjectMeetingToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ProjectMeeting reclassifiedProjectMeeting =  ProjectMeetingMapper.mapOmrsRelationshipToProjectMeeting(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedProjectMeeting;
    }
    /**
      * get relationship
      * @param ProjectMeeting relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ProjectMeeting getProjectMeetingRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getProjectMeetingRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ProjectMeeting gotProjectMeeting = ProjectMeetingMapper.mapOmrsRelationshipToProjectMeeting(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotProjectMeeting;
      }
    /**
      * update relationship
      * @param ProjectMeeting relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ProjectMeeting updateProjectMeetingRelationship(String userId,ProjectMeeting projectMeeting)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateProjectMeetingRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ProjectMeetingMapper.mapProjectMeetingToOmrsRelationship(projectMeeting);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ProjectMeeting updatedProjectMeeting = ProjectMeetingMapper.mapOmrsRelationshipToProjectMeeting(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedProjectMeeting;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteProjectMeetingRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteProjectMeetingRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ProjectMeeting")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type projectMeeting
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeProjectMeetingRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeProjectMeetingRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ProjectMeeting")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type projectMeeting
             }
     }
    /**
      * Create relationship
      * @param GovernanceResults relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public GovernanceResults createGovernanceResultsRelationship(String userId,GovernanceResults relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createGovernanceResultsRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = GovernanceResultsMapper.mapGovernanceResultsToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        GovernanceResults reclassifiedGovernanceResults =  GovernanceResultsMapper.mapOmrsRelationshipToGovernanceResults(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedGovernanceResults;
    }
    /**
      * get relationship
      * @param GovernanceResults relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public GovernanceResults getGovernanceResultsRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getGovernanceResultsRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            GovernanceResults gotGovernanceResults = GovernanceResultsMapper.mapOmrsRelationshipToGovernanceResults(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotGovernanceResults;
      }
    /**
      * update relationship
      * @param GovernanceResults relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public GovernanceResults updateGovernanceResultsRelationship(String userId,GovernanceResults governanceResults)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateGovernanceResultsRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = GovernanceResultsMapper.mapGovernanceResultsToOmrsRelationship(governanceResults);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        GovernanceResults updatedGovernanceResults = GovernanceResultsMapper.mapOmrsRelationshipToGovernanceResults(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedGovernanceResults;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteGovernanceResultsRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteGovernanceResultsRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("GovernanceResults")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type governanceResults
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeGovernanceResultsRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeGovernanceResultsRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("GovernanceResults")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type governanceResults
             }
     }
    /**
      * Create relationship
      * @param APIResponse relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public APIResponse createAPIResponseRelationship(String userId,APIResponse relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createAPIResponseRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = APIResponseMapper.mapAPIResponseToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        APIResponse reclassifiedAPIResponse =  APIResponseMapper.mapOmrsRelationshipToAPIResponse(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedAPIResponse;
    }
    /**
      * get relationship
      * @param APIResponse relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public APIResponse getAPIResponseRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getAPIResponseRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            APIResponse gotAPIResponse = APIResponseMapper.mapOmrsRelationshipToAPIResponse(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotAPIResponse;
      }
    /**
      * update relationship
      * @param APIResponse relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public APIResponse updateAPIResponseRelationship(String userId,APIResponse aPIResponse)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateAPIResponseRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = APIResponseMapper.mapAPIResponseToOmrsRelationship(aPIResponse);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        APIResponse updatedAPIResponse = APIResponseMapper.mapOmrsRelationshipToAPIResponse(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedAPIResponse;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteAPIResponseRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteAPIResponseRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("APIResponse")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type aPIResponse
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeAPIResponseRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeAPIResponseRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("APIResponse")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type aPIResponse
             }
     }
    /**
      * Create relationship
      * @param ServerSupportedCapability relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ServerSupportedCapability createServerSupportedCapabilityRelationship(String userId,ServerSupportedCapability relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createServerSupportedCapabilityRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ServerSupportedCapabilityMapper.mapServerSupportedCapabilityToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ServerSupportedCapability reclassifiedServerSupportedCapability =  ServerSupportedCapabilityMapper.mapOmrsRelationshipToServerSupportedCapability(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedServerSupportedCapability;
    }
    /**
      * get relationship
      * @param ServerSupportedCapability relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ServerSupportedCapability getServerSupportedCapabilityRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getServerSupportedCapabilityRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ServerSupportedCapability gotServerSupportedCapability = ServerSupportedCapabilityMapper.mapOmrsRelationshipToServerSupportedCapability(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotServerSupportedCapability;
      }
    /**
      * update relationship
      * @param ServerSupportedCapability relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ServerSupportedCapability updateServerSupportedCapabilityRelationship(String userId,ServerSupportedCapability serverSupportedCapability)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateServerSupportedCapabilityRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ServerSupportedCapabilityMapper.mapServerSupportedCapabilityToOmrsRelationship(serverSupportedCapability);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ServerSupportedCapability updatedServerSupportedCapability = ServerSupportedCapabilityMapper.mapOmrsRelationshipToServerSupportedCapability(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedServerSupportedCapability;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteServerSupportedCapabilityRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteServerSupportedCapabilityRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ServerSupportedCapability")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type serverSupportedCapability
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeServerSupportedCapabilityRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeServerSupportedCapabilityRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ServerSupportedCapability")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type serverSupportedCapability
             }
     }
    /**
      * Create relationship
      * @param CollectionMember relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public CollectionMember createCollectionMemberRelationship(String userId,CollectionMember relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createCollectionMemberRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = CollectionMemberMapper.mapCollectionMemberToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        CollectionMember reclassifiedCollectionMember =  CollectionMemberMapper.mapOmrsRelationshipToCollectionMember(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedCollectionMember;
    }
    /**
      * get relationship
      * @param CollectionMember relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public CollectionMember getCollectionMemberRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getCollectionMemberRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            CollectionMember gotCollectionMember = CollectionMemberMapper.mapOmrsRelationshipToCollectionMember(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotCollectionMember;
      }
    /**
      * update relationship
      * @param CollectionMember relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public CollectionMember updateCollectionMemberRelationship(String userId,CollectionMember collectionMember)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateCollectionMemberRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = CollectionMemberMapper.mapCollectionMemberToOmrsRelationship(collectionMember);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        CollectionMember updatedCollectionMember = CollectionMemberMapper.mapOmrsRelationshipToCollectionMember(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedCollectionMember;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteCollectionMemberRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteCollectionMemberRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("CollectionMember")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type collectionMember
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeCollectionMemberRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeCollectionMemberRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("CollectionMember")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type collectionMember
             }
     }
    /**
      * Create relationship
      * @param HostNetwork relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public HostNetwork createHostNetworkRelationship(String userId,HostNetwork relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createHostNetworkRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = HostNetworkMapper.mapHostNetworkToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        HostNetwork reclassifiedHostNetwork =  HostNetworkMapper.mapOmrsRelationshipToHostNetwork(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedHostNetwork;
    }
    /**
      * get relationship
      * @param HostNetwork relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public HostNetwork getHostNetworkRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getHostNetworkRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            HostNetwork gotHostNetwork = HostNetworkMapper.mapOmrsRelationshipToHostNetwork(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotHostNetwork;
      }
    /**
      * update relationship
      * @param HostNetwork relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public HostNetwork updateHostNetworkRelationship(String userId,HostNetwork hostNetwork)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateHostNetworkRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = HostNetworkMapper.mapHostNetworkToOmrsRelationship(hostNetwork);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        HostNetwork updatedHostNetwork = HostNetworkMapper.mapOmrsRelationshipToHostNetwork(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedHostNetwork;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteHostNetworkRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteHostNetworkRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("HostNetwork")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type hostNetwork
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeHostNetworkRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeHostNetworkRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("HostNetwork")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type hostNetwork
             }
     }
    /**
      * Create relationship
      * @param AttributeForSchema relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public AttributeForSchema createAttributeForSchemaRelationship(String userId,AttributeForSchema relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createAttributeForSchemaRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = AttributeForSchemaMapper.mapAttributeForSchemaToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        AttributeForSchema reclassifiedAttributeForSchema =  AttributeForSchemaMapper.mapOmrsRelationshipToAttributeForSchema(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedAttributeForSchema;
    }
    /**
      * get relationship
      * @param AttributeForSchema relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public AttributeForSchema getAttributeForSchemaRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getAttributeForSchemaRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            AttributeForSchema gotAttributeForSchema = AttributeForSchemaMapper.mapOmrsRelationshipToAttributeForSchema(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotAttributeForSchema;
      }
    /**
      * update relationship
      * @param AttributeForSchema relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public AttributeForSchema updateAttributeForSchemaRelationship(String userId,AttributeForSchema attributeForSchema)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateAttributeForSchemaRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = AttributeForSchemaMapper.mapAttributeForSchemaToOmrsRelationship(attributeForSchema);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        AttributeForSchema updatedAttributeForSchema = AttributeForSchemaMapper.mapOmrsRelationshipToAttributeForSchema(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedAttributeForSchema;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteAttributeForSchemaRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteAttributeForSchemaRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("AttributeForSchema")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type attributeForSchema
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeAttributeForSchemaRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeAttributeForSchemaRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("AttributeForSchema")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type attributeForSchema
             }
     }
    /**
      * Create relationship
      * @param AssetLocation relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public AssetLocation createAssetLocationRelationship(String userId,AssetLocation relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createAssetLocationRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = AssetLocationMapper.mapAssetLocationToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        AssetLocation reclassifiedAssetLocation =  AssetLocationMapper.mapOmrsRelationshipToAssetLocation(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedAssetLocation;
    }
    /**
      * get relationship
      * @param AssetLocation relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public AssetLocation getAssetLocationRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getAssetLocationRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            AssetLocation gotAssetLocation = AssetLocationMapper.mapOmrsRelationshipToAssetLocation(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotAssetLocation;
      }
    /**
      * update relationship
      * @param AssetLocation relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public AssetLocation updateAssetLocationRelationship(String userId,AssetLocation assetLocation)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateAssetLocationRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = AssetLocationMapper.mapAssetLocationToOmrsRelationship(assetLocation);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        AssetLocation updatedAssetLocation = AssetLocationMapper.mapOmrsRelationshipToAssetLocation(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedAssetLocation;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteAssetLocationRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteAssetLocationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("AssetLocation")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type assetLocation
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeAssetLocationRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeAssetLocationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("AssetLocation")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type assetLocation
             }
     }
    /**
      * Create relationship
      * @param SchemaAttributeType relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public SchemaAttributeType createSchemaAttributeTypeRelationship(String userId,SchemaAttributeType relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createSchemaAttributeTypeRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = SchemaAttributeTypeMapper.mapSchemaAttributeTypeToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        SchemaAttributeType reclassifiedSchemaAttributeType =  SchemaAttributeTypeMapper.mapOmrsRelationshipToSchemaAttributeType(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedSchemaAttributeType;
    }
    /**
      * get relationship
      * @param SchemaAttributeType relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public SchemaAttributeType getSchemaAttributeTypeRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getSchemaAttributeTypeRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            SchemaAttributeType gotSchemaAttributeType = SchemaAttributeTypeMapper.mapOmrsRelationshipToSchemaAttributeType(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotSchemaAttributeType;
      }
    /**
      * update relationship
      * @param SchemaAttributeType relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public SchemaAttributeType updateSchemaAttributeTypeRelationship(String userId,SchemaAttributeType schemaAttributeType)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateSchemaAttributeTypeRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = SchemaAttributeTypeMapper.mapSchemaAttributeTypeToOmrsRelationship(schemaAttributeType);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        SchemaAttributeType updatedSchemaAttributeType = SchemaAttributeTypeMapper.mapOmrsRelationshipToSchemaAttributeType(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedSchemaAttributeType;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteSchemaAttributeTypeRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteSchemaAttributeTypeRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("SchemaAttributeType")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type schemaAttributeType
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeSchemaAttributeTypeRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeSchemaAttributeTypeRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("SchemaAttributeType")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type schemaAttributeType
             }
     }
    /**
      * Create relationship
      * @param GovernanceImplementation relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public GovernanceImplementation createGovernanceImplementationRelationship(String userId,GovernanceImplementation relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createGovernanceImplementationRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = GovernanceImplementationMapper.mapGovernanceImplementationToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        GovernanceImplementation reclassifiedGovernanceImplementation =  GovernanceImplementationMapper.mapOmrsRelationshipToGovernanceImplementation(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedGovernanceImplementation;
    }
    /**
      * get relationship
      * @param GovernanceImplementation relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public GovernanceImplementation getGovernanceImplementationRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getGovernanceImplementationRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            GovernanceImplementation gotGovernanceImplementation = GovernanceImplementationMapper.mapOmrsRelationshipToGovernanceImplementation(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotGovernanceImplementation;
      }
    /**
      * update relationship
      * @param GovernanceImplementation relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public GovernanceImplementation updateGovernanceImplementationRelationship(String userId,GovernanceImplementation governanceImplementation)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateGovernanceImplementationRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = GovernanceImplementationMapper.mapGovernanceImplementationToOmrsRelationship(governanceImplementation);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        GovernanceImplementation updatedGovernanceImplementation = GovernanceImplementationMapper.mapOmrsRelationshipToGovernanceImplementation(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedGovernanceImplementation;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteGovernanceImplementationRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteGovernanceImplementationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("GovernanceImplementation")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type governanceImplementation
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeGovernanceImplementationRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeGovernanceImplementationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("GovernanceImplementation")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type governanceImplementation
             }
     }
    /**
      * Create relationship
      * @param LinkedMedia relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public LinkedMedia createLinkedMediaRelationship(String userId,LinkedMedia relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createLinkedMediaRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = LinkedMediaMapper.mapLinkedMediaToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        LinkedMedia reclassifiedLinkedMedia =  LinkedMediaMapper.mapOmrsRelationshipToLinkedMedia(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedLinkedMedia;
    }
    /**
      * get relationship
      * @param LinkedMedia relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public LinkedMedia getLinkedMediaRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getLinkedMediaRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            LinkedMedia gotLinkedMedia = LinkedMediaMapper.mapOmrsRelationshipToLinkedMedia(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotLinkedMedia;
      }
    /**
      * update relationship
      * @param LinkedMedia relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public LinkedMedia updateLinkedMediaRelationship(String userId,LinkedMedia linkedMedia)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateLinkedMediaRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = LinkedMediaMapper.mapLinkedMediaToOmrsRelationship(linkedMedia);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        LinkedMedia updatedLinkedMedia = LinkedMediaMapper.mapOmrsRelationshipToLinkedMedia(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedLinkedMedia;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteLinkedMediaRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteLinkedMediaRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("LinkedMedia")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type linkedMedia
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeLinkedMediaRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeLinkedMediaRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("LinkedMedia")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type linkedMedia
             }
     }
    /**
      * Create relationship
      * @param MapToElementType relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public MapToElementType createMapToElementTypeRelationship(String userId,MapToElementType relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createMapToElementTypeRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = MapToElementTypeMapper.mapMapToElementTypeToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        MapToElementType reclassifiedMapToElementType =  MapToElementTypeMapper.mapOmrsRelationshipToMapToElementType(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedMapToElementType;
    }
    /**
      * get relationship
      * @param MapToElementType relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public MapToElementType getMapToElementTypeRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getMapToElementTypeRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            MapToElementType gotMapToElementType = MapToElementTypeMapper.mapOmrsRelationshipToMapToElementType(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotMapToElementType;
      }
    /**
      * update relationship
      * @param MapToElementType relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public MapToElementType updateMapToElementTypeRelationship(String userId,MapToElementType mapToElementType)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateMapToElementTypeRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = MapToElementTypeMapper.mapMapToElementTypeToOmrsRelationship(mapToElementType);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        MapToElementType updatedMapToElementType = MapToElementTypeMapper.mapOmrsRelationshipToMapToElementType(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedMapToElementType;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteMapToElementTypeRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteMapToElementTypeRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("MapToElementType")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type mapToElementType
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeMapToElementTypeRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeMapToElementTypeRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("MapToElementType")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type mapToElementType
             }
     }
    /**
      * Create relationship
      * @param ExternallySourcedGlossary relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ExternallySourcedGlossary createExternallySourcedGlossaryRelationship(String userId,ExternallySourcedGlossary relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createExternallySourcedGlossaryRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ExternallySourcedGlossaryMapper.mapExternallySourcedGlossaryToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ExternallySourcedGlossary reclassifiedExternallySourcedGlossary =  ExternallySourcedGlossaryMapper.mapOmrsRelationshipToExternallySourcedGlossary(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedExternallySourcedGlossary;
    }
    /**
      * get relationship
      * @param ExternallySourcedGlossary relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ExternallySourcedGlossary getExternallySourcedGlossaryRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getExternallySourcedGlossaryRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ExternallySourcedGlossary gotExternallySourcedGlossary = ExternallySourcedGlossaryMapper.mapOmrsRelationshipToExternallySourcedGlossary(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotExternallySourcedGlossary;
      }
    /**
      * update relationship
      * @param ExternallySourcedGlossary relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ExternallySourcedGlossary updateExternallySourcedGlossaryRelationship(String userId,ExternallySourcedGlossary externallySourcedGlossary)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateExternallySourcedGlossaryRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ExternallySourcedGlossaryMapper.mapExternallySourcedGlossaryToOmrsRelationship(externallySourcedGlossary);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ExternallySourcedGlossary updatedExternallySourcedGlossary = ExternallySourcedGlossaryMapper.mapOmrsRelationshipToExternallySourcedGlossary(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedExternallySourcedGlossary;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteExternallySourcedGlossaryRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteExternallySourcedGlossaryRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ExternallySourcedGlossary")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type externallySourcedGlossary
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeExternallySourcedGlossaryRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeExternallySourcedGlossaryRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ExternallySourcedGlossary")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type externallySourcedGlossary
             }
     }
    /**
      * Create relationship
      * @param ExternalReferenceLink relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ExternalReferenceLink createExternalReferenceLinkRelationship(String userId,ExternalReferenceLink relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createExternalReferenceLinkRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ExternalReferenceLinkMapper.mapExternalReferenceLinkToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ExternalReferenceLink reclassifiedExternalReferenceLink =  ExternalReferenceLinkMapper.mapOmrsRelationshipToExternalReferenceLink(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedExternalReferenceLink;
    }
    /**
      * get relationship
      * @param ExternalReferenceLink relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ExternalReferenceLink getExternalReferenceLinkRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getExternalReferenceLinkRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ExternalReferenceLink gotExternalReferenceLink = ExternalReferenceLinkMapper.mapOmrsRelationshipToExternalReferenceLink(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotExternalReferenceLink;
      }
    /**
      * update relationship
      * @param ExternalReferenceLink relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ExternalReferenceLink updateExternalReferenceLinkRelationship(String userId,ExternalReferenceLink externalReferenceLink)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateExternalReferenceLinkRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ExternalReferenceLinkMapper.mapExternalReferenceLinkToOmrsRelationship(externalReferenceLink);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ExternalReferenceLink updatedExternalReferenceLink = ExternalReferenceLinkMapper.mapOmrsRelationshipToExternalReferenceLink(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedExternalReferenceLink;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteExternalReferenceLinkRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteExternalReferenceLinkRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ExternalReferenceLink")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type externalReferenceLink
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeExternalReferenceLinkRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeExternalReferenceLinkRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ExternalReferenceLink")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type externalReferenceLink
             }
     }
    /**
      * Create relationship
      * @param MediaReference relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public MediaReference createMediaReferenceRelationship(String userId,MediaReference relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createMediaReferenceRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = MediaReferenceMapper.mapMediaReferenceToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        MediaReference reclassifiedMediaReference =  MediaReferenceMapper.mapOmrsRelationshipToMediaReference(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedMediaReference;
    }
    /**
      * get relationship
      * @param MediaReference relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public MediaReference getMediaReferenceRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getMediaReferenceRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            MediaReference gotMediaReference = MediaReferenceMapper.mapOmrsRelationshipToMediaReference(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotMediaReference;
      }
    /**
      * update relationship
      * @param MediaReference relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public MediaReference updateMediaReferenceRelationship(String userId,MediaReference mediaReference)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateMediaReferenceRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = MediaReferenceMapper.mapMediaReferenceToOmrsRelationship(mediaReference);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        MediaReference updatedMediaReference = MediaReferenceMapper.mapOmrsRelationshipToMediaReference(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedMediaReference;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteMediaReferenceRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteMediaReferenceRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("MediaReference")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type mediaReference
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeMediaReferenceRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeMediaReferenceRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("MediaReference")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type mediaReference
             }
     }
    /**
      * Create relationship
      * @param CommunityMembership relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public CommunityMembership createCommunityMembershipRelationship(String userId,CommunityMembership relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createCommunityMembershipRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = CommunityMembershipMapper.mapCommunityMembershipToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        CommunityMembership reclassifiedCommunityMembership =  CommunityMembershipMapper.mapOmrsRelationshipToCommunityMembership(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedCommunityMembership;
    }
    /**
      * get relationship
      * @param CommunityMembership relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public CommunityMembership getCommunityMembershipRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getCommunityMembershipRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            CommunityMembership gotCommunityMembership = CommunityMembershipMapper.mapOmrsRelationshipToCommunityMembership(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotCommunityMembership;
      }
    /**
      * update relationship
      * @param CommunityMembership relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public CommunityMembership updateCommunityMembershipRelationship(String userId,CommunityMembership communityMembership)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateCommunityMembershipRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = CommunityMembershipMapper.mapCommunityMembershipToOmrsRelationship(communityMembership);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        CommunityMembership updatedCommunityMembership = CommunityMembershipMapper.mapOmrsRelationshipToCommunityMembership(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedCommunityMembership;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteCommunityMembershipRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteCommunityMembershipRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("CommunityMembership")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type communityMembership
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeCommunityMembershipRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeCommunityMembershipRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("CommunityMembership")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type communityMembership
             }
     }
    /**
      * Create relationship
      * @param ExternalIdScope relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ExternalIdScope createExternalIdScopeRelationship(String userId,ExternalIdScope relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createExternalIdScopeRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ExternalIdScopeMapper.mapExternalIdScopeToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ExternalIdScope reclassifiedExternalIdScope =  ExternalIdScopeMapper.mapOmrsRelationshipToExternalIdScope(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedExternalIdScope;
    }
    /**
      * get relationship
      * @param ExternalIdScope relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ExternalIdScope getExternalIdScopeRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getExternalIdScopeRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ExternalIdScope gotExternalIdScope = ExternalIdScopeMapper.mapOmrsRelationshipToExternalIdScope(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotExternalIdScope;
      }
    /**
      * update relationship
      * @param ExternalIdScope relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ExternalIdScope updateExternalIdScopeRelationship(String userId,ExternalIdScope externalIdScope)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateExternalIdScopeRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ExternalIdScopeMapper.mapExternalIdScopeToOmrsRelationship(externalIdScope);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ExternalIdScope updatedExternalIdScope = ExternalIdScopeMapper.mapOmrsRelationshipToExternalIdScope(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedExternalIdScope;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteExternalIdScopeRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteExternalIdScopeRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ExternalIdScope")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type externalIdScope
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeExternalIdScopeRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeExternalIdScopeRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ExternalIdScope")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type externalIdScope
             }
     }
    /**
      * Create relationship
      * @param ValidValue relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ValidValue createValidValueRelationship(String userId,ValidValue relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createValidValueRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ValidValueMapper.mapValidValueToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ValidValue reclassifiedValidValue =  ValidValueMapper.mapOmrsRelationshipToValidValue(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedValidValue;
    }
    /**
      * get relationship
      * @param ValidValue relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ValidValue getValidValueRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getValidValueRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ValidValue gotValidValue = ValidValueMapper.mapOmrsRelationshipToValidValue(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotValidValue;
      }
    /**
      * update relationship
      * @param ValidValue relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ValidValue updateValidValueRelationship(String userId,ValidValue validValue)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateValidValueRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ValidValueMapper.mapValidValueToOmrsRelationship(validValue);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ValidValue updatedValidValue = ValidValueMapper.mapOmrsRelationshipToValidValue(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedValidValue;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteValidValueRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteValidValueRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ValidValue")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type validValue
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeValidValueRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeValidValueRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ValidValue")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type validValue
             }
     }
    /**
      * Create relationship
      * @param AcceptedAnswer relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public AcceptedAnswer createAcceptedAnswerRelationship(String userId,AcceptedAnswer relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createAcceptedAnswerRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = AcceptedAnswerMapper.mapAcceptedAnswerToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        AcceptedAnswer reclassifiedAcceptedAnswer =  AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedAcceptedAnswer;
    }
    /**
      * get relationship
      * @param AcceptedAnswer relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public AcceptedAnswer getAcceptedAnswerRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getAcceptedAnswerRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            AcceptedAnswer gotAcceptedAnswer = AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotAcceptedAnswer;
      }
    /**
      * update relationship
      * @param AcceptedAnswer relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public AcceptedAnswer updateAcceptedAnswerRelationship(String userId,AcceptedAnswer acceptedAnswer)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateAcceptedAnswerRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = AcceptedAnswerMapper.mapAcceptedAnswerToOmrsRelationship(acceptedAnswer);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        AcceptedAnswer updatedAcceptedAnswer = AcceptedAnswerMapper.mapOmrsRelationshipToAcceptedAnswer(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedAcceptedAnswer;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteAcceptedAnswerRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteAcceptedAnswerRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("AcceptedAnswer")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type acceptedAnswer
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeAcceptedAnswerRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeAcceptedAnswerRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("AcceptedAnswer")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type acceptedAnswer
             }
     }
    /**
      * Create relationship
      * @param GovernanceDefinitionMetric relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public GovernanceDefinitionMetric createGovernanceDefinitionMetricRelationship(String userId,GovernanceDefinitionMetric relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createGovernanceDefinitionMetricRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = GovernanceDefinitionMetricMapper.mapGovernanceDefinitionMetricToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        GovernanceDefinitionMetric reclassifiedGovernanceDefinitionMetric =  GovernanceDefinitionMetricMapper.mapOmrsRelationshipToGovernanceDefinitionMetric(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedGovernanceDefinitionMetric;
    }
    /**
      * get relationship
      * @param GovernanceDefinitionMetric relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public GovernanceDefinitionMetric getGovernanceDefinitionMetricRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getGovernanceDefinitionMetricRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            GovernanceDefinitionMetric gotGovernanceDefinitionMetric = GovernanceDefinitionMetricMapper.mapOmrsRelationshipToGovernanceDefinitionMetric(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotGovernanceDefinitionMetric;
      }
    /**
      * update relationship
      * @param GovernanceDefinitionMetric relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public GovernanceDefinitionMetric updateGovernanceDefinitionMetricRelationship(String userId,GovernanceDefinitionMetric governanceDefinitionMetric)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateGovernanceDefinitionMetricRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = GovernanceDefinitionMetricMapper.mapGovernanceDefinitionMetricToOmrsRelationship(governanceDefinitionMetric);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        GovernanceDefinitionMetric updatedGovernanceDefinitionMetric = GovernanceDefinitionMetricMapper.mapOmrsRelationshipToGovernanceDefinitionMetric(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedGovernanceDefinitionMetric;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteGovernanceDefinitionMetricRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteGovernanceDefinitionMetricRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("GovernanceDefinitionMetric")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type governanceDefinitionMetric
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeGovernanceDefinitionMetricRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeGovernanceDefinitionMetricRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("GovernanceDefinitionMetric")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type governanceDefinitionMetric
             }
     }
    /**
      * Create relationship
      * @param SchemaQueryImplementation relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public SchemaQueryImplementation createSchemaQueryImplementationRelationship(String userId,SchemaQueryImplementation relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createSchemaQueryImplementationRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = SchemaQueryImplementationMapper.mapSchemaQueryImplementationToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        SchemaQueryImplementation reclassifiedSchemaQueryImplementation =  SchemaQueryImplementationMapper.mapOmrsRelationshipToSchemaQueryImplementation(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedSchemaQueryImplementation;
    }
    /**
      * get relationship
      * @param SchemaQueryImplementation relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public SchemaQueryImplementation getSchemaQueryImplementationRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getSchemaQueryImplementationRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            SchemaQueryImplementation gotSchemaQueryImplementation = SchemaQueryImplementationMapper.mapOmrsRelationshipToSchemaQueryImplementation(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotSchemaQueryImplementation;
      }
    /**
      * update relationship
      * @param SchemaQueryImplementation relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public SchemaQueryImplementation updateSchemaQueryImplementationRelationship(String userId,SchemaQueryImplementation schemaQueryImplementation)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateSchemaQueryImplementationRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = SchemaQueryImplementationMapper.mapSchemaQueryImplementationToOmrsRelationship(schemaQueryImplementation);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        SchemaQueryImplementation updatedSchemaQueryImplementation = SchemaQueryImplementationMapper.mapOmrsRelationshipToSchemaQueryImplementation(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedSchemaQueryImplementation;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteSchemaQueryImplementationRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteSchemaQueryImplementationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("SchemaQueryImplementation")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type schemaQueryImplementation
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeSchemaQueryImplementationRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeSchemaQueryImplementationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("SchemaQueryImplementation")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type schemaQueryImplementation
             }
     }
    /**
      * Create relationship
      * @param AssetSchemaType relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public AssetSchemaType createAssetSchemaTypeRelationship(String userId,AssetSchemaType relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createAssetSchemaTypeRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = AssetSchemaTypeMapper.mapAssetSchemaTypeToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        AssetSchemaType reclassifiedAssetSchemaType =  AssetSchemaTypeMapper.mapOmrsRelationshipToAssetSchemaType(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedAssetSchemaType;
    }
    /**
      * get relationship
      * @param AssetSchemaType relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public AssetSchemaType getAssetSchemaTypeRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getAssetSchemaTypeRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            AssetSchemaType gotAssetSchemaType = AssetSchemaTypeMapper.mapOmrsRelationshipToAssetSchemaType(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotAssetSchemaType;
      }
    /**
      * update relationship
      * @param AssetSchemaType relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public AssetSchemaType updateAssetSchemaTypeRelationship(String userId,AssetSchemaType assetSchemaType)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateAssetSchemaTypeRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = AssetSchemaTypeMapper.mapAssetSchemaTypeToOmrsRelationship(assetSchemaType);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        AssetSchemaType updatedAssetSchemaType = AssetSchemaTypeMapper.mapOmrsRelationshipToAssetSchemaType(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedAssetSchemaType;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteAssetSchemaTypeRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteAssetSchemaTypeRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("AssetSchemaType")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type assetSchemaType
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeAssetSchemaTypeRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeAssetSchemaTypeRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("AssetSchemaType")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type assetSchemaType
             }
     }
    /**
      * Create relationship
      * @param ProjectDependency relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ProjectDependency createProjectDependencyRelationship(String userId,ProjectDependency relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createProjectDependencyRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ProjectDependencyMapper.mapProjectDependencyToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ProjectDependency reclassifiedProjectDependency =  ProjectDependencyMapper.mapOmrsRelationshipToProjectDependency(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedProjectDependency;
    }
    /**
      * get relationship
      * @param ProjectDependency relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ProjectDependency getProjectDependencyRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getProjectDependencyRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ProjectDependency gotProjectDependency = ProjectDependencyMapper.mapOmrsRelationshipToProjectDependency(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotProjectDependency;
      }
    /**
      * update relationship
      * @param ProjectDependency relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ProjectDependency updateProjectDependencyRelationship(String userId,ProjectDependency projectDependency)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateProjectDependencyRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ProjectDependencyMapper.mapProjectDependencyToOmrsRelationship(projectDependency);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ProjectDependency updatedProjectDependency = ProjectDependencyMapper.mapOmrsRelationshipToProjectDependency(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedProjectDependency;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteProjectDependencyRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteProjectDependencyRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ProjectDependency")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type projectDependency
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeProjectDependencyRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeProjectDependencyRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ProjectDependency")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type projectDependency
             }
     }
    /**
      * Create relationship
      * @param TopicSubscribers relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public TopicSubscribers createTopicSubscribersRelationship(String userId,TopicSubscribers relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createTopicSubscribersRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = TopicSubscribersMapper.mapTopicSubscribersToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        TopicSubscribers reclassifiedTopicSubscribers =  TopicSubscribersMapper.mapOmrsRelationshipToTopicSubscribers(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedTopicSubscribers;
    }
    /**
      * get relationship
      * @param TopicSubscribers relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public TopicSubscribers getTopicSubscribersRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getTopicSubscribersRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            TopicSubscribers gotTopicSubscribers = TopicSubscribersMapper.mapOmrsRelationshipToTopicSubscribers(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotTopicSubscribers;
      }
    /**
      * update relationship
      * @param TopicSubscribers relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public TopicSubscribers updateTopicSubscribersRelationship(String userId,TopicSubscribers topicSubscribers)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateTopicSubscribersRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = TopicSubscribersMapper.mapTopicSubscribersToOmrsRelationship(topicSubscribers);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        TopicSubscribers updatedTopicSubscribers = TopicSubscribersMapper.mapOmrsRelationshipToTopicSubscribers(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedTopicSubscribers;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteTopicSubscribersRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteTopicSubscribersRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("TopicSubscribers")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type topicSubscribers
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeTopicSubscribersRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeTopicSubscribersRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("TopicSubscribers")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type topicSubscribers
             }
     }
    /**
      * Create relationship
      * @param ReplacementTerm relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ReplacementTerm createReplacementTermRelationship(String userId,ReplacementTerm relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createReplacementTermRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ReplacementTermMapper.mapReplacementTermToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ReplacementTerm reclassifiedReplacementTerm =  ReplacementTermMapper.mapOmrsRelationshipToReplacementTerm(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedReplacementTerm;
    }
    /**
      * get relationship
      * @param ReplacementTerm relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ReplacementTerm getReplacementTermRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getReplacementTermRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ReplacementTerm gotReplacementTerm = ReplacementTermMapper.mapOmrsRelationshipToReplacementTerm(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotReplacementTerm;
      }
    /**
      * update relationship
      * @param ReplacementTerm relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ReplacementTerm updateReplacementTermRelationship(String userId,ReplacementTerm replacementTerm)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateReplacementTermRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ReplacementTermMapper.mapReplacementTermToOmrsRelationship(replacementTerm);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ReplacementTerm updatedReplacementTerm = ReplacementTermMapper.mapOmrsRelationshipToReplacementTerm(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedReplacementTerm;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteReplacementTermRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteReplacementTermRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ReplacementTerm")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type replacementTerm
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeReplacementTermRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeReplacementTermRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ReplacementTerm")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type replacementTerm
             }
     }
    /**
      * Create relationship
      * @param OrganizationalCapability relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public OrganizationalCapability createOrganizationalCapabilityRelationship(String userId,OrganizationalCapability relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createOrganizationalCapabilityRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = OrganizationalCapabilityMapper.mapOrganizationalCapabilityToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        OrganizationalCapability reclassifiedOrganizationalCapability =  OrganizationalCapabilityMapper.mapOmrsRelationshipToOrganizationalCapability(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedOrganizationalCapability;
    }
    /**
      * get relationship
      * @param OrganizationalCapability relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public OrganizationalCapability getOrganizationalCapabilityRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getOrganizationalCapabilityRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            OrganizationalCapability gotOrganizationalCapability = OrganizationalCapabilityMapper.mapOmrsRelationshipToOrganizationalCapability(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotOrganizationalCapability;
      }
    /**
      * update relationship
      * @param OrganizationalCapability relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public OrganizationalCapability updateOrganizationalCapabilityRelationship(String userId,OrganizationalCapability organizationalCapability)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateOrganizationalCapabilityRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = OrganizationalCapabilityMapper.mapOrganizationalCapabilityToOmrsRelationship(organizationalCapability);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        OrganizationalCapability updatedOrganizationalCapability = OrganizationalCapabilityMapper.mapOmrsRelationshipToOrganizationalCapability(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedOrganizationalCapability;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteOrganizationalCapabilityRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteOrganizationalCapabilityRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("OrganizationalCapability")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type organizationalCapability
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeOrganizationalCapabilityRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeOrganizationalCapabilityRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("OrganizationalCapability")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type organizationalCapability
             }
     }
    /**
      * Create relationship
      * @param MetadataCohortPeer relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public MetadataCohortPeer createMetadataCohortPeerRelationship(String userId,MetadataCohortPeer relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createMetadataCohortPeerRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = MetadataCohortPeerMapper.mapMetadataCohortPeerToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        MetadataCohortPeer reclassifiedMetadataCohortPeer =  MetadataCohortPeerMapper.mapOmrsRelationshipToMetadataCohortPeer(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedMetadataCohortPeer;
    }
    /**
      * get relationship
      * @param MetadataCohortPeer relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public MetadataCohortPeer getMetadataCohortPeerRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getMetadataCohortPeerRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            MetadataCohortPeer gotMetadataCohortPeer = MetadataCohortPeerMapper.mapOmrsRelationshipToMetadataCohortPeer(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotMetadataCohortPeer;
      }
    /**
      * update relationship
      * @param MetadataCohortPeer relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public MetadataCohortPeer updateMetadataCohortPeerRelationship(String userId,MetadataCohortPeer metadataCohortPeer)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateMetadataCohortPeerRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = MetadataCohortPeerMapper.mapMetadataCohortPeerToOmrsRelationship(metadataCohortPeer);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        MetadataCohortPeer updatedMetadataCohortPeer = MetadataCohortPeerMapper.mapOmrsRelationshipToMetadataCohortPeer(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedMetadataCohortPeer;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteMetadataCohortPeerRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteMetadataCohortPeerRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("MetadataCohortPeer")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type metadataCohortPeer
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeMetadataCohortPeerRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeMetadataCohortPeerRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("MetadataCohortPeer")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type metadataCohortPeer
             }
     }
    /**
      * Create relationship
      * @param AttachedNoteLogEntry relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public AttachedNoteLogEntry createAttachedNoteLogEntryRelationship(String userId,AttachedNoteLogEntry relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createAttachedNoteLogEntryRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = AttachedNoteLogEntryMapper.mapAttachedNoteLogEntryToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        AttachedNoteLogEntry reclassifiedAttachedNoteLogEntry =  AttachedNoteLogEntryMapper.mapOmrsRelationshipToAttachedNoteLogEntry(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedAttachedNoteLogEntry;
    }
    /**
      * get relationship
      * @param AttachedNoteLogEntry relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public AttachedNoteLogEntry getAttachedNoteLogEntryRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getAttachedNoteLogEntryRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            AttachedNoteLogEntry gotAttachedNoteLogEntry = AttachedNoteLogEntryMapper.mapOmrsRelationshipToAttachedNoteLogEntry(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotAttachedNoteLogEntry;
      }
    /**
      * update relationship
      * @param AttachedNoteLogEntry relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public AttachedNoteLogEntry updateAttachedNoteLogEntryRelationship(String userId,AttachedNoteLogEntry attachedNoteLogEntry)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateAttachedNoteLogEntryRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = AttachedNoteLogEntryMapper.mapAttachedNoteLogEntryToOmrsRelationship(attachedNoteLogEntry);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        AttachedNoteLogEntry updatedAttachedNoteLogEntry = AttachedNoteLogEntryMapper.mapOmrsRelationshipToAttachedNoteLogEntry(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedAttachedNoteLogEntry;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteAttachedNoteLogEntryRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteAttachedNoteLogEntryRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("AttachedNoteLogEntry")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type attachedNoteLogEntry
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeAttachedNoteLogEntryRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeAttachedNoteLogEntryRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("AttachedNoteLogEntry")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type attachedNoteLogEntry
             }
     }
    /**
      * Create relationship
      * @param AssetServerUse relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public AssetServerUse createAssetServerUseRelationship(String userId,AssetServerUse relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createAssetServerUseRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = AssetServerUseMapper.mapAssetServerUseToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        AssetServerUse reclassifiedAssetServerUse =  AssetServerUseMapper.mapOmrsRelationshipToAssetServerUse(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedAssetServerUse;
    }
    /**
      * get relationship
      * @param AssetServerUse relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public AssetServerUse getAssetServerUseRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getAssetServerUseRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            AssetServerUse gotAssetServerUse = AssetServerUseMapper.mapOmrsRelationshipToAssetServerUse(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotAssetServerUse;
      }
    /**
      * update relationship
      * @param AssetServerUse relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public AssetServerUse updateAssetServerUseRelationship(String userId,AssetServerUse assetServerUse)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateAssetServerUseRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = AssetServerUseMapper.mapAssetServerUseToOmrsRelationship(assetServerUse);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        AssetServerUse updatedAssetServerUse = AssetServerUseMapper.mapOmrsRelationshipToAssetServerUse(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedAssetServerUse;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteAssetServerUseRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteAssetServerUseRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("AssetServerUse")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type assetServerUse
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeAssetServerUseRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeAssetServerUseRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("AssetServerUse")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type assetServerUse
             }
     }
    /**
      * Create relationship
      * @param RuntimeForProcess relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public RuntimeForProcess createRuntimeForProcessRelationship(String userId,RuntimeForProcess relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createRuntimeForProcessRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = RuntimeForProcessMapper.mapRuntimeForProcessToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        RuntimeForProcess reclassifiedRuntimeForProcess =  RuntimeForProcessMapper.mapOmrsRelationshipToRuntimeForProcess(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedRuntimeForProcess;
    }
    /**
      * get relationship
      * @param RuntimeForProcess relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public RuntimeForProcess getRuntimeForProcessRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getRuntimeForProcessRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            RuntimeForProcess gotRuntimeForProcess = RuntimeForProcessMapper.mapOmrsRelationshipToRuntimeForProcess(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotRuntimeForProcess;
      }
    /**
      * update relationship
      * @param RuntimeForProcess relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public RuntimeForProcess updateRuntimeForProcessRelationship(String userId,RuntimeForProcess runtimeForProcess)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateRuntimeForProcessRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = RuntimeForProcessMapper.mapRuntimeForProcessToOmrsRelationship(runtimeForProcess);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        RuntimeForProcess updatedRuntimeForProcess = RuntimeForProcessMapper.mapOmrsRelationshipToRuntimeForProcess(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedRuntimeForProcess;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteRuntimeForProcessRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteRuntimeForProcessRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("RuntimeForProcess")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type runtimeForProcess
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeRuntimeForProcessRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeRuntimeForProcessRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("RuntimeForProcess")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type runtimeForProcess
             }
     }
    /**
      * Create relationship
      * @param NestedLocation relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public NestedLocation createNestedLocationRelationship(String userId,NestedLocation relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createNestedLocationRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = NestedLocationMapper.mapNestedLocationToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        NestedLocation reclassifiedNestedLocation =  NestedLocationMapper.mapOmrsRelationshipToNestedLocation(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedNestedLocation;
    }
    /**
      * get relationship
      * @param NestedLocation relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public NestedLocation getNestedLocationRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getNestedLocationRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            NestedLocation gotNestedLocation = NestedLocationMapper.mapOmrsRelationshipToNestedLocation(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotNestedLocation;
      }
    /**
      * update relationship
      * @param NestedLocation relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public NestedLocation updateNestedLocationRelationship(String userId,NestedLocation nestedLocation)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateNestedLocationRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = NestedLocationMapper.mapNestedLocationToOmrsRelationship(nestedLocation);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        NestedLocation updatedNestedLocation = NestedLocationMapper.mapOmrsRelationshipToNestedLocation(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedNestedLocation;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteNestedLocationRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteNestedLocationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("NestedLocation")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type nestedLocation
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeNestedLocationRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeNestedLocationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("NestedLocation")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type nestedLocation
             }
     }
    /**
      * Create relationship
      * @param StaffAssignment relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public StaffAssignment createStaffAssignmentRelationship(String userId,StaffAssignment relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createStaffAssignmentRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = StaffAssignmentMapper.mapStaffAssignmentToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        StaffAssignment reclassifiedStaffAssignment =  StaffAssignmentMapper.mapOmrsRelationshipToStaffAssignment(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedStaffAssignment;
    }
    /**
      * get relationship
      * @param StaffAssignment relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public StaffAssignment getStaffAssignmentRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getStaffAssignmentRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            StaffAssignment gotStaffAssignment = StaffAssignmentMapper.mapOmrsRelationshipToStaffAssignment(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotStaffAssignment;
      }
    /**
      * update relationship
      * @param StaffAssignment relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public StaffAssignment updateStaffAssignmentRelationship(String userId,StaffAssignment staffAssignment)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateStaffAssignmentRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = StaffAssignmentMapper.mapStaffAssignmentToOmrsRelationship(staffAssignment);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        StaffAssignment updatedStaffAssignment = StaffAssignmentMapper.mapOmrsRelationshipToStaffAssignment(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedStaffAssignment;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteStaffAssignmentRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteStaffAssignmentRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("StaffAssignment")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type staffAssignment
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeStaffAssignmentRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeStaffAssignmentRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("StaffAssignment")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type staffAssignment
             }
     }
    /**
      * Create relationship
      * @param LinkedFile relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public LinkedFile createLinkedFileRelationship(String userId,LinkedFile relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createLinkedFileRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = LinkedFileMapper.mapLinkedFileToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        LinkedFile reclassifiedLinkedFile =  LinkedFileMapper.mapOmrsRelationshipToLinkedFile(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedLinkedFile;
    }
    /**
      * get relationship
      * @param LinkedFile relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public LinkedFile getLinkedFileRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getLinkedFileRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            LinkedFile gotLinkedFile = LinkedFileMapper.mapOmrsRelationshipToLinkedFile(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotLinkedFile;
      }
    /**
      * update relationship
      * @param LinkedFile relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public LinkedFile updateLinkedFileRelationship(String userId,LinkedFile linkedFile)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateLinkedFileRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = LinkedFileMapper.mapLinkedFileToOmrsRelationship(linkedFile);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        LinkedFile updatedLinkedFile = LinkedFileMapper.mapOmrsRelationshipToLinkedFile(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedLinkedFile;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteLinkedFileRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteLinkedFileRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("LinkedFile")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type linkedFile
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeLinkedFileRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeLinkedFileRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("LinkedFile")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type linkedFile
             }
     }
    /**
      * Create relationship
      * @param TermCategorization relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public TermCategorization createTermCategorizationRelationship(String userId,TermCategorization relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createTermCategorizationRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = TermCategorizationMapper.mapTermCategorizationToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        TermCategorization reclassifiedTermCategorization =  TermCategorizationMapper.mapOmrsRelationshipToTermCategorization(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedTermCategorization;
    }
    /**
      * get relationship
      * @param TermCategorization relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public TermCategorization getTermCategorizationRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getTermCategorizationRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            TermCategorization gotTermCategorization = TermCategorizationMapper.mapOmrsRelationshipToTermCategorization(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotTermCategorization;
      }
    /**
      * update relationship
      * @param TermCategorization relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public TermCategorization updateTermCategorizationRelationship(String userId,TermCategorization termCategorization)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateTermCategorizationRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = TermCategorizationMapper.mapTermCategorizationToOmrsRelationship(termCategorization);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        TermCategorization updatedTermCategorization = TermCategorizationMapper.mapOmrsRelationshipToTermCategorization(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedTermCategorization;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteTermCategorizationRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteTermCategorizationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("TermCategorization")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type termCategorization
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeTermCategorizationRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeTermCategorizationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("TermCategorization")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type termCategorization
             }
     }
    /**
      * Create relationship
      * @param ZoneMembership relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ZoneMembership createZoneMembershipRelationship(String userId,ZoneMembership relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createZoneMembershipRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ZoneMembershipMapper.mapZoneMembershipToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ZoneMembership reclassifiedZoneMembership =  ZoneMembershipMapper.mapOmrsRelationshipToZoneMembership(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedZoneMembership;
    }
    /**
      * get relationship
      * @param ZoneMembership relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ZoneMembership getZoneMembershipRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getZoneMembershipRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ZoneMembership gotZoneMembership = ZoneMembershipMapper.mapOmrsRelationshipToZoneMembership(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotZoneMembership;
      }
    /**
      * update relationship
      * @param ZoneMembership relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ZoneMembership updateZoneMembershipRelationship(String userId,ZoneMembership zoneMembership)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateZoneMembershipRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ZoneMembershipMapper.mapZoneMembershipToOmrsRelationship(zoneMembership);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ZoneMembership updatedZoneMembership = ZoneMembershipMapper.mapOmrsRelationshipToZoneMembership(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedZoneMembership;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteZoneMembershipRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteZoneMembershipRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ZoneMembership")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type zoneMembership
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeZoneMembershipRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeZoneMembershipRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ZoneMembership")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type zoneMembership
             }
     }
    /**
      * Create relationship
      * @param APIEndpoint relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public APIEndpoint createAPIEndpointRelationship(String userId,APIEndpoint relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createAPIEndpointRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = APIEndpointMapper.mapAPIEndpointToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        APIEndpoint reclassifiedAPIEndpoint =  APIEndpointMapper.mapOmrsRelationshipToAPIEndpoint(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedAPIEndpoint;
    }
    /**
      * get relationship
      * @param APIEndpoint relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public APIEndpoint getAPIEndpointRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getAPIEndpointRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            APIEndpoint gotAPIEndpoint = APIEndpointMapper.mapOmrsRelationshipToAPIEndpoint(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotAPIEndpoint;
      }
    /**
      * update relationship
      * @param APIEndpoint relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public APIEndpoint updateAPIEndpointRelationship(String userId,APIEndpoint aPIEndpoint)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateAPIEndpointRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = APIEndpointMapper.mapAPIEndpointToOmrsRelationship(aPIEndpoint);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        APIEndpoint updatedAPIEndpoint = APIEndpointMapper.mapOmrsRelationshipToAPIEndpoint(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedAPIEndpoint;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteAPIEndpointRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteAPIEndpointRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("APIEndpoint")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type aPIEndpoint
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeAPIEndpointRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeAPIEndpointRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("APIEndpoint")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type aPIEndpoint
             }
     }
    /**
      * Create relationship
      * @param ConnectionEndpoint relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ConnectionEndpoint createConnectionEndpointRelationship(String userId,ConnectionEndpoint relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createConnectionEndpointRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ConnectionEndpointMapper.mapConnectionEndpointToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ConnectionEndpoint reclassifiedConnectionEndpoint =  ConnectionEndpointMapper.mapOmrsRelationshipToConnectionEndpoint(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedConnectionEndpoint;
    }
    /**
      * get relationship
      * @param ConnectionEndpoint relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ConnectionEndpoint getConnectionEndpointRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getConnectionEndpointRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ConnectionEndpoint gotConnectionEndpoint = ConnectionEndpointMapper.mapOmrsRelationshipToConnectionEndpoint(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotConnectionEndpoint;
      }
    /**
      * update relationship
      * @param ConnectionEndpoint relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ConnectionEndpoint updateConnectionEndpointRelationship(String userId,ConnectionEndpoint connectionEndpoint)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateConnectionEndpointRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ConnectionEndpointMapper.mapConnectionEndpointToOmrsRelationship(connectionEndpoint);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ConnectionEndpoint updatedConnectionEndpoint = ConnectionEndpointMapper.mapOmrsRelationshipToConnectionEndpoint(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedConnectionEndpoint;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteConnectionEndpointRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteConnectionEndpointRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ConnectionEndpoint")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type connectionEndpoint
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeConnectionEndpointRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeConnectionEndpointRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ConnectionEndpoint")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type connectionEndpoint
             }
     }
    /**
      * Create relationship
      * @param CategoryAnchor relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public CategoryAnchor createCategoryAnchorRelationship(String userId,CategoryAnchor relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createCategoryAnchorRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = CategoryAnchorMapper.mapCategoryAnchorToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        CategoryAnchor reclassifiedCategoryAnchor =  CategoryAnchorMapper.mapOmrsRelationshipToCategoryAnchor(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedCategoryAnchor;
    }
    /**
      * get relationship
      * @param CategoryAnchor relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public CategoryAnchor getCategoryAnchorRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getCategoryAnchorRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            CategoryAnchor gotCategoryAnchor = CategoryAnchorMapper.mapOmrsRelationshipToCategoryAnchor(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotCategoryAnchor;
      }
    /**
      * update relationship
      * @param CategoryAnchor relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public CategoryAnchor updateCategoryAnchorRelationship(String userId,CategoryAnchor categoryAnchor)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateCategoryAnchorRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = CategoryAnchorMapper.mapCategoryAnchorToOmrsRelationship(categoryAnchor);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        CategoryAnchor updatedCategoryAnchor = CategoryAnchorMapper.mapOmrsRelationshipToCategoryAnchor(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedCategoryAnchor;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteCategoryAnchorRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteCategoryAnchorRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("CategoryAnchor")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type categoryAnchor
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeCategoryAnchorRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeCategoryAnchorRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("CategoryAnchor")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type categoryAnchor
             }
     }
    /**
      * Create relationship
      * @param ProjectTeam relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ProjectTeam createProjectTeamRelationship(String userId,ProjectTeam relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createProjectTeamRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ProjectTeamMapper.mapProjectTeamToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ProjectTeam reclassifiedProjectTeam =  ProjectTeamMapper.mapOmrsRelationshipToProjectTeam(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedProjectTeam;
    }
    /**
      * get relationship
      * @param ProjectTeam relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ProjectTeam getProjectTeamRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getProjectTeamRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ProjectTeam gotProjectTeam = ProjectTeamMapper.mapOmrsRelationshipToProjectTeam(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotProjectTeam;
      }
    /**
      * update relationship
      * @param ProjectTeam relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ProjectTeam updateProjectTeamRelationship(String userId,ProjectTeam projectTeam)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateProjectTeamRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ProjectTeamMapper.mapProjectTeamToOmrsRelationship(projectTeam);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ProjectTeam updatedProjectTeam = ProjectTeamMapper.mapOmrsRelationshipToProjectTeam(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedProjectTeam;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteProjectTeamRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteProjectTeamRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ProjectTeam")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type projectTeam
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeProjectTeamRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeProjectTeamRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ProjectTeam")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type projectTeam
             }
     }
    /**
      * Create relationship
      * @param ProcessOutput relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ProcessOutput createProcessOutputRelationship(String userId,ProcessOutput relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createProcessOutputRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ProcessOutputMapper.mapProcessOutputToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ProcessOutput reclassifiedProcessOutput =  ProcessOutputMapper.mapOmrsRelationshipToProcessOutput(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedProcessOutput;
    }
    /**
      * get relationship
      * @param ProcessOutput relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ProcessOutput getProcessOutputRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getProcessOutputRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ProcessOutput gotProcessOutput = ProcessOutputMapper.mapOmrsRelationshipToProcessOutput(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotProcessOutput;
      }
    /**
      * update relationship
      * @param ProcessOutput relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ProcessOutput updateProcessOutputRelationship(String userId,ProcessOutput processOutput)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateProcessOutputRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ProcessOutputMapper.mapProcessOutputToOmrsRelationship(processOutput);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ProcessOutput updatedProcessOutput = ProcessOutputMapper.mapOmrsRelationshipToProcessOutput(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedProcessOutput;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteProcessOutputRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteProcessOutputRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ProcessOutput")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type processOutput
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeProcessOutputRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeProcessOutputRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ProcessOutput")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type processOutput
             }
     }
    /**
      * Create relationship
      * @param APIOperations relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public APIOperations createAPIOperationsRelationship(String userId,APIOperations relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createAPIOperationsRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = APIOperationsMapper.mapAPIOperationsToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        APIOperations reclassifiedAPIOperations =  APIOperationsMapper.mapOmrsRelationshipToAPIOperations(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedAPIOperations;
    }
    /**
      * get relationship
      * @param APIOperations relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public APIOperations getAPIOperationsRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getAPIOperationsRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            APIOperations gotAPIOperations = APIOperationsMapper.mapOmrsRelationshipToAPIOperations(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotAPIOperations;
      }
    /**
      * update relationship
      * @param APIOperations relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public APIOperations updateAPIOperationsRelationship(String userId,APIOperations aPIOperations)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateAPIOperationsRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = APIOperationsMapper.mapAPIOperationsToOmrsRelationship(aPIOperations);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        APIOperations updatedAPIOperations = APIOperationsMapper.mapOmrsRelationshipToAPIOperations(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedAPIOperations;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteAPIOperationsRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteAPIOperationsRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("APIOperations")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type aPIOperations
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeAPIOperationsRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeAPIOperationsRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("APIOperations")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type aPIOperations
             }
     }
    /**
      * Create relationship
      * @param GovernancePolicyLink relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public GovernancePolicyLink createGovernancePolicyLinkRelationship(String userId,GovernancePolicyLink relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createGovernancePolicyLinkRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = GovernancePolicyLinkMapper.mapGovernancePolicyLinkToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        GovernancePolicyLink reclassifiedGovernancePolicyLink =  GovernancePolicyLinkMapper.mapOmrsRelationshipToGovernancePolicyLink(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedGovernancePolicyLink;
    }
    /**
      * get relationship
      * @param GovernancePolicyLink relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public GovernancePolicyLink getGovernancePolicyLinkRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getGovernancePolicyLinkRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            GovernancePolicyLink gotGovernancePolicyLink = GovernancePolicyLinkMapper.mapOmrsRelationshipToGovernancePolicyLink(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotGovernancePolicyLink;
      }
    /**
      * update relationship
      * @param GovernancePolicyLink relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public GovernancePolicyLink updateGovernancePolicyLinkRelationship(String userId,GovernancePolicyLink governancePolicyLink)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateGovernancePolicyLinkRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = GovernancePolicyLinkMapper.mapGovernancePolicyLinkToOmrsRelationship(governancePolicyLink);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        GovernancePolicyLink updatedGovernancePolicyLink = GovernancePolicyLinkMapper.mapOmrsRelationshipToGovernancePolicyLink(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedGovernancePolicyLink;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteGovernancePolicyLinkRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteGovernancePolicyLinkRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("GovernancePolicyLink")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type governancePolicyLink
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeGovernancePolicyLinkRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeGovernancePolicyLinkRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("GovernancePolicyLink")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type governancePolicyLink
             }
     }
    /**
      * Create relationship
      * @param ResponsibilityStaffContact relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ResponsibilityStaffContact createResponsibilityStaffContactRelationship(String userId,ResponsibilityStaffContact relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createResponsibilityStaffContactRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ResponsibilityStaffContactMapper.mapResponsibilityStaffContactToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ResponsibilityStaffContact reclassifiedResponsibilityStaffContact =  ResponsibilityStaffContactMapper.mapOmrsRelationshipToResponsibilityStaffContact(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedResponsibilityStaffContact;
    }
    /**
      * get relationship
      * @param ResponsibilityStaffContact relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ResponsibilityStaffContact getResponsibilityStaffContactRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getResponsibilityStaffContactRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ResponsibilityStaffContact gotResponsibilityStaffContact = ResponsibilityStaffContactMapper.mapOmrsRelationshipToResponsibilityStaffContact(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotResponsibilityStaffContact;
      }
    /**
      * update relationship
      * @param ResponsibilityStaffContact relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ResponsibilityStaffContact updateResponsibilityStaffContactRelationship(String userId,ResponsibilityStaffContact responsibilityStaffContact)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateResponsibilityStaffContactRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ResponsibilityStaffContactMapper.mapResponsibilityStaffContactToOmrsRelationship(responsibilityStaffContact);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ResponsibilityStaffContact updatedResponsibilityStaffContact = ResponsibilityStaffContactMapper.mapOmrsRelationshipToResponsibilityStaffContact(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedResponsibilityStaffContact;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteResponsibilityStaffContactRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteResponsibilityStaffContactRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ResponsibilityStaffContact")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type responsibilityStaffContact
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeResponsibilityStaffContactRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeResponsibilityStaffContactRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ResponsibilityStaffContact")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type responsibilityStaffContact
             }
     }
    /**
      * Create relationship
      * @param Peer relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public Peer createPeerRelationship(String userId,Peer relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createPeerRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = PeerMapper.mapPeerToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        Peer reclassifiedPeer =  PeerMapper.mapOmrsRelationshipToPeer(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedPeer;
    }
    /**
      * get relationship
      * @param Peer relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public Peer getPeerRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getPeerRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            Peer gotPeer = PeerMapper.mapOmrsRelationshipToPeer(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotPeer;
      }
    /**
      * update relationship
      * @param Peer relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public Peer updatePeerRelationship(String userId,Peer peer)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updatePeerRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = PeerMapper.mapPeerToOmrsRelationship(peer);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        Peer updatedPeer = PeerMapper.mapOmrsRelationshipToPeer(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedPeer;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deletePeerRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deletePeerRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("Peer")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type peer
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgePeerRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgePeerRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("Peer")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type peer
             }
     }
    /**
      * Create relationship
      * @param TermTYPEDBYRelationship relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public TermTYPEDBYRelationship createTermTYPEDBYRelationshipRelationship(String userId,TermTYPEDBYRelationship relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createTermTYPEDBYRelationshipRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = TermTYPEDBYRelationshipMapper.mapTermTYPEDBYRelationshipToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        TermTYPEDBYRelationship reclassifiedTermTYPEDBYRelationship =  TermTYPEDBYRelationshipMapper.mapOmrsRelationshipToTermTYPEDBYRelationship(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedTermTYPEDBYRelationship;
    }
    /**
      * get relationship
      * @param TermTYPEDBYRelationship relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public TermTYPEDBYRelationship getTermTYPEDBYRelationshipRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getTermTYPEDBYRelationshipRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            TermTYPEDBYRelationship gotTermTYPEDBYRelationship = TermTYPEDBYRelationshipMapper.mapOmrsRelationshipToTermTYPEDBYRelationship(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotTermTYPEDBYRelationship;
      }
    /**
      * update relationship
      * @param TermTYPEDBYRelationship relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public TermTYPEDBYRelationship updateTermTYPEDBYRelationshipRelationship(String userId,TermTYPEDBYRelationship termTYPEDBYRelationship)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateTermTYPEDBYRelationshipRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = TermTYPEDBYRelationshipMapper.mapTermTYPEDBYRelationshipToOmrsRelationship(termTYPEDBYRelationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        TermTYPEDBYRelationship updatedTermTYPEDBYRelationship = TermTYPEDBYRelationshipMapper.mapOmrsRelationshipToTermTYPEDBYRelationship(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedTermTYPEDBYRelationship;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteTermTYPEDBYRelationshipRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteTermTYPEDBYRelationshipRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("TermTYPEDBYRelationship")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type termTYPEDBYRelationship
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeTermTYPEDBYRelationshipRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeTermTYPEDBYRelationshipRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("TermTYPEDBYRelationship")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type termTYPEDBYRelationship
             }
     }
    /**
      * Create relationship
      * @param MapFromElementType relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public MapFromElementType createMapFromElementTypeRelationship(String userId,MapFromElementType relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createMapFromElementTypeRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = MapFromElementTypeMapper.mapMapFromElementTypeToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        MapFromElementType reclassifiedMapFromElementType =  MapFromElementTypeMapper.mapOmrsRelationshipToMapFromElementType(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedMapFromElementType;
    }
    /**
      * get relationship
      * @param MapFromElementType relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public MapFromElementType getMapFromElementTypeRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getMapFromElementTypeRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            MapFromElementType gotMapFromElementType = MapFromElementTypeMapper.mapOmrsRelationshipToMapFromElementType(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotMapFromElementType;
      }
    /**
      * update relationship
      * @param MapFromElementType relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public MapFromElementType updateMapFromElementTypeRelationship(String userId,MapFromElementType mapFromElementType)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateMapFromElementTypeRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = MapFromElementTypeMapper.mapMapFromElementTypeToOmrsRelationship(mapFromElementType);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        MapFromElementType updatedMapFromElementType = MapFromElementTypeMapper.mapOmrsRelationshipToMapFromElementType(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedMapFromElementType;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteMapFromElementTypeRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteMapFromElementTypeRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("MapFromElementType")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type mapFromElementType
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeMapFromElementTypeRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeMapFromElementTypeRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("MapFromElementType")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type mapFromElementType
             }
     }
    /**
      * Create relationship
      * @param Certification relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public Certification createCertificationRelationship(String userId,Certification relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createCertificationRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = CertificationMapper.mapCertificationToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        Certification reclassifiedCertification =  CertificationMapper.mapOmrsRelationshipToCertification(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedCertification;
    }
    /**
      * get relationship
      * @param Certification relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public Certification getCertificationRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getCertificationRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            Certification gotCertification = CertificationMapper.mapOmrsRelationshipToCertification(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotCertification;
      }
    /**
      * update relationship
      * @param Certification relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public Certification updateCertificationRelationship(String userId,Certification certification)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateCertificationRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = CertificationMapper.mapCertificationToOmrsRelationship(certification);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        Certification updatedCertification = CertificationMapper.mapOmrsRelationshipToCertification(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedCertification;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteCertificationRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteCertificationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("Certification")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type certification
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeCertificationRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeCertificationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("Certification")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type certification
             }
     }
    /**
      * Create relationship
      * @param NetworkGatewayLink relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public NetworkGatewayLink createNetworkGatewayLinkRelationship(String userId,NetworkGatewayLink relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createNetworkGatewayLinkRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = NetworkGatewayLinkMapper.mapNetworkGatewayLinkToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        NetworkGatewayLink reclassifiedNetworkGatewayLink =  NetworkGatewayLinkMapper.mapOmrsRelationshipToNetworkGatewayLink(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedNetworkGatewayLink;
    }
    /**
      * get relationship
      * @param NetworkGatewayLink relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public NetworkGatewayLink getNetworkGatewayLinkRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getNetworkGatewayLinkRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            NetworkGatewayLink gotNetworkGatewayLink = NetworkGatewayLinkMapper.mapOmrsRelationshipToNetworkGatewayLink(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotNetworkGatewayLink;
      }
    /**
      * update relationship
      * @param NetworkGatewayLink relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public NetworkGatewayLink updateNetworkGatewayLinkRelationship(String userId,NetworkGatewayLink networkGatewayLink)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateNetworkGatewayLinkRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = NetworkGatewayLinkMapper.mapNetworkGatewayLinkToOmrsRelationship(networkGatewayLink);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        NetworkGatewayLink updatedNetworkGatewayLink = NetworkGatewayLinkMapper.mapOmrsRelationshipToNetworkGatewayLink(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedNetworkGatewayLink;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteNetworkGatewayLinkRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteNetworkGatewayLinkRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("NetworkGatewayLink")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type networkGatewayLink
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeNetworkGatewayLinkRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeNetworkGatewayLinkRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("NetworkGatewayLink")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type networkGatewayLink
             }
     }
    /**
      * Create relationship
      * @param ConnectionConnectorType relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ConnectionConnectorType createConnectionConnectorTypeRelationship(String userId,ConnectionConnectorType relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createConnectionConnectorTypeRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ConnectionConnectorTypeMapper.mapConnectionConnectorTypeToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ConnectionConnectorType reclassifiedConnectionConnectorType =  ConnectionConnectorTypeMapper.mapOmrsRelationshipToConnectionConnectorType(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedConnectionConnectorType;
    }
    /**
      * get relationship
      * @param ConnectionConnectorType relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ConnectionConnectorType getConnectionConnectorTypeRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getConnectionConnectorTypeRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ConnectionConnectorType gotConnectionConnectorType = ConnectionConnectorTypeMapper.mapOmrsRelationshipToConnectionConnectorType(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotConnectionConnectorType;
      }
    /**
      * update relationship
      * @param ConnectionConnectorType relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ConnectionConnectorType updateConnectionConnectorTypeRelationship(String userId,ConnectionConnectorType connectionConnectorType)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateConnectionConnectorTypeRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ConnectionConnectorTypeMapper.mapConnectionConnectorTypeToOmrsRelationship(connectionConnectorType);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ConnectionConnectorType updatedConnectionConnectorType = ConnectionConnectorTypeMapper.mapOmrsRelationshipToConnectionConnectorType(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedConnectionConnectorType;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteConnectionConnectorTypeRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteConnectionConnectorTypeRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ConnectionConnectorType")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type connectionConnectorType
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeConnectionConnectorTypeRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeConnectionConnectorTypeRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ConnectionConnectorType")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type connectionConnectorType
             }
     }
    /**
      * Create relationship
      * @param Synonym relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public Synonym createSynonymRelationship(String userId,Synonym relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createSynonymRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = SynonymMapper.mapSynonymToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        Synonym reclassifiedSynonym =  SynonymMapper.mapOmrsRelationshipToSynonym(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedSynonym;
    }
    /**
      * get relationship
      * @param Synonym relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public Synonym getSynonymRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getSynonymRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            Synonym gotSynonym = SynonymMapper.mapOmrsRelationshipToSynonym(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotSynonym;
      }
    /**
      * update relationship
      * @param Synonym relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public Synonym updateSynonymRelationship(String userId,Synonym synonym)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateSynonymRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = SynonymMapper.mapSynonymToOmrsRelationship(synonym);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        Synonym updatedSynonym = SynonymMapper.mapOmrsRelationshipToSynonym(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedSynonym;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteSynonymRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteSynonymRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("Synonym")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type synonym
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeSynonymRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeSynonymRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("Synonym")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type synonym
             }
     }
    /**
      * Create relationship
      * @param Antonym relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public Antonym createAntonymRelationship(String userId,Antonym relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createAntonymRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = AntonymMapper.mapAntonymToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        Antonym reclassifiedAntonym =  AntonymMapper.mapOmrsRelationshipToAntonym(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedAntonym;
    }
    /**
      * get relationship
      * @param Antonym relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public Antonym getAntonymRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getAntonymRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            Antonym gotAntonym = AntonymMapper.mapOmrsRelationshipToAntonym(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotAntonym;
      }
    /**
      * update relationship
      * @param Antonym relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public Antonym updateAntonymRelationship(String userId,Antonym antonym)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateAntonymRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = AntonymMapper.mapAntonymToOmrsRelationship(antonym);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        Antonym updatedAntonym = AntonymMapper.mapOmrsRelationshipToAntonym(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedAntonym;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteAntonymRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteAntonymRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("Antonym")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type antonym
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeAntonymRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeAntonymRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("Antonym")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type antonym
             }
     }
    /**
      * Create relationship
      * @param GraphEdgeLink relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public GraphEdgeLink createGraphEdgeLinkRelationship(String userId,GraphEdgeLink relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createGraphEdgeLinkRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = GraphEdgeLinkMapper.mapGraphEdgeLinkToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        GraphEdgeLink reclassifiedGraphEdgeLink =  GraphEdgeLinkMapper.mapOmrsRelationshipToGraphEdgeLink(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedGraphEdgeLink;
    }
    /**
      * get relationship
      * @param GraphEdgeLink relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public GraphEdgeLink getGraphEdgeLinkRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getGraphEdgeLinkRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            GraphEdgeLink gotGraphEdgeLink = GraphEdgeLinkMapper.mapOmrsRelationshipToGraphEdgeLink(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotGraphEdgeLink;
      }
    /**
      * update relationship
      * @param GraphEdgeLink relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public GraphEdgeLink updateGraphEdgeLinkRelationship(String userId,GraphEdgeLink graphEdgeLink)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateGraphEdgeLinkRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = GraphEdgeLinkMapper.mapGraphEdgeLinkToOmrsRelationship(graphEdgeLink);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        GraphEdgeLink updatedGraphEdgeLink = GraphEdgeLinkMapper.mapOmrsRelationshipToGraphEdgeLink(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedGraphEdgeLink;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteGraphEdgeLinkRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteGraphEdgeLinkRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("GraphEdgeLink")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type graphEdgeLink
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeGraphEdgeLinkRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeGraphEdgeLinkRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("GraphEdgeLink")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type graphEdgeLink
             }
     }
    /**
      * Create relationship
      * @param ToDoOnReferenceable relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ToDoOnReferenceable createToDoOnReferenceableRelationship(String userId,ToDoOnReferenceable relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createToDoOnReferenceableRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ToDoOnReferenceableMapper.mapToDoOnReferenceableToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ToDoOnReferenceable reclassifiedToDoOnReferenceable =  ToDoOnReferenceableMapper.mapOmrsRelationshipToToDoOnReferenceable(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedToDoOnReferenceable;
    }
    /**
      * get relationship
      * @param ToDoOnReferenceable relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ToDoOnReferenceable getToDoOnReferenceableRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getToDoOnReferenceableRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ToDoOnReferenceable gotToDoOnReferenceable = ToDoOnReferenceableMapper.mapOmrsRelationshipToToDoOnReferenceable(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotToDoOnReferenceable;
      }
    /**
      * update relationship
      * @param ToDoOnReferenceable relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ToDoOnReferenceable updateToDoOnReferenceableRelationship(String userId,ToDoOnReferenceable toDoOnReferenceable)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateToDoOnReferenceableRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ToDoOnReferenceableMapper.mapToDoOnReferenceableToOmrsRelationship(toDoOnReferenceable);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ToDoOnReferenceable updatedToDoOnReferenceable = ToDoOnReferenceableMapper.mapOmrsRelationshipToToDoOnReferenceable(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedToDoOnReferenceable;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteToDoOnReferenceableRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteToDoOnReferenceableRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ToDoOnReferenceable")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type toDoOnReferenceable
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeToDoOnReferenceableRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeToDoOnReferenceableRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ToDoOnReferenceable")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type toDoOnReferenceable
             }
     }
    /**
      * Create relationship
      * @param ProjectScope relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ProjectScope createProjectScopeRelationship(String userId,ProjectScope relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createProjectScopeRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ProjectScopeMapper.mapProjectScopeToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ProjectScope reclassifiedProjectScope =  ProjectScopeMapper.mapOmrsRelationshipToProjectScope(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedProjectScope;
    }
    /**
      * get relationship
      * @param ProjectScope relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ProjectScope getProjectScopeRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getProjectScopeRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ProjectScope gotProjectScope = ProjectScopeMapper.mapOmrsRelationshipToProjectScope(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotProjectScope;
      }
    /**
      * update relationship
      * @param ProjectScope relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ProjectScope updateProjectScopeRelationship(String userId,ProjectScope projectScope)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateProjectScopeRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ProjectScopeMapper.mapProjectScopeToOmrsRelationship(projectScope);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ProjectScope updatedProjectScope = ProjectScopeMapper.mapOmrsRelationshipToProjectScope(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedProjectScope;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteProjectScopeRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteProjectScopeRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ProjectScope")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type projectScope
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeProjectScopeRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeProjectScopeRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ProjectScope")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type projectScope
             }
     }
    /**
      * Create relationship
      * @param ISARelationship relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ISARelationship createISARelationshipRelationship(String userId,ISARelationship relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createISARelationshipRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ISARelationshipMapper.mapISARelationshipToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ISARelationship reclassifiedISARelationship =  ISARelationshipMapper.mapOmrsRelationshipToISARelationship(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedISARelationship;
    }
    /**
      * get relationship
      * @param ISARelationship relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ISARelationship getISARelationshipRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getISARelationshipRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ISARelationship gotISARelationship = ISARelationshipMapper.mapOmrsRelationshipToISARelationship(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotISARelationship;
      }
    /**
      * update relationship
      * @param ISARelationship relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ISARelationship updateISARelationshipRelationship(String userId,ISARelationship iSARelationship)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateISARelationshipRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ISARelationshipMapper.mapISARelationshipToOmrsRelationship(iSARelationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ISARelationship updatedISARelationship = ISARelationshipMapper.mapOmrsRelationshipToISARelationship(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedISARelationship;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteISARelationshipRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteISARelationshipRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ISARelationship")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type iSARelationship
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeISARelationshipRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeISARelationshipRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ISARelationship")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type iSARelationship
             }
     }
    /**
      * Create relationship
      * @param TermISATypeOFRelationship relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public TermISATypeOFRelationship createTermISATypeOFRelationshipRelationship(String userId,TermISATypeOFRelationship relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createTermISATypeOFRelationshipRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = TermISATypeOFRelationshipMapper.mapTermISATypeOFRelationshipToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        TermISATypeOFRelationship reclassifiedTermISATypeOFRelationship =  TermISATypeOFRelationshipMapper.mapOmrsRelationshipToTermISATypeOFRelationship(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedTermISATypeOFRelationship;
    }
    /**
      * get relationship
      * @param TermISATypeOFRelationship relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public TermISATypeOFRelationship getTermISATypeOFRelationshipRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getTermISATypeOFRelationshipRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            TermISATypeOFRelationship gotTermISATypeOFRelationship = TermISATypeOFRelationshipMapper.mapOmrsRelationshipToTermISATypeOFRelationship(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotTermISATypeOFRelationship;
      }
    /**
      * update relationship
      * @param TermISATypeOFRelationship relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public TermISATypeOFRelationship updateTermISATypeOFRelationshipRelationship(String userId,TermISATypeOFRelationship termISATypeOFRelationship)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateTermISATypeOFRelationshipRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = TermISATypeOFRelationshipMapper.mapTermISATypeOFRelationshipToOmrsRelationship(termISATypeOFRelationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        TermISATypeOFRelationship updatedTermISATypeOFRelationship = TermISATypeOFRelationshipMapper.mapOmrsRelationshipToTermISATypeOFRelationship(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedTermISATypeOFRelationship;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteTermISATypeOFRelationshipRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteTermISATypeOFRelationshipRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("TermISATypeOFRelationship")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type termISATypeOFRelationship
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeTermISATypeOFRelationshipRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeTermISATypeOFRelationshipRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("TermISATypeOFRelationship")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type termISATypeOFRelationship
             }
     }
    /**
      * Create relationship
      * @param Contributor relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public Contributor createContributorRelationship(String userId,Contributor relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createContributorRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ContributorMapper.mapContributorToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        Contributor reclassifiedContributor =  ContributorMapper.mapOmrsRelationshipToContributor(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedContributor;
    }
    /**
      * get relationship
      * @param Contributor relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public Contributor getContributorRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getContributorRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            Contributor gotContributor = ContributorMapper.mapOmrsRelationshipToContributor(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotContributor;
      }
    /**
      * update relationship
      * @param Contributor relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public Contributor updateContributorRelationship(String userId,Contributor contributor)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateContributorRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ContributorMapper.mapContributorToOmrsRelationship(contributor);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        Contributor updatedContributor = ContributorMapper.mapOmrsRelationshipToContributor(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedContributor;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteContributorRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteContributorRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("Contributor")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type contributor
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeContributorRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeContributorRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("Contributor")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type contributor
             }
     }
    /**
      * Create relationship
      * @param EmbeddedConnection relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public EmbeddedConnection createEmbeddedConnectionRelationship(String userId,EmbeddedConnection relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createEmbeddedConnectionRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = EmbeddedConnectionMapper.mapEmbeddedConnectionToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        EmbeddedConnection reclassifiedEmbeddedConnection =  EmbeddedConnectionMapper.mapOmrsRelationshipToEmbeddedConnection(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedEmbeddedConnection;
    }
    /**
      * get relationship
      * @param EmbeddedConnection relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public EmbeddedConnection getEmbeddedConnectionRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getEmbeddedConnectionRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            EmbeddedConnection gotEmbeddedConnection = EmbeddedConnectionMapper.mapOmrsRelationshipToEmbeddedConnection(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotEmbeddedConnection;
      }
    /**
      * update relationship
      * @param EmbeddedConnection relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public EmbeddedConnection updateEmbeddedConnectionRelationship(String userId,EmbeddedConnection embeddedConnection)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateEmbeddedConnectionRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = EmbeddedConnectionMapper.mapEmbeddedConnectionToOmrsRelationship(embeddedConnection);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        EmbeddedConnection updatedEmbeddedConnection = EmbeddedConnectionMapper.mapOmrsRelationshipToEmbeddedConnection(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedEmbeddedConnection;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteEmbeddedConnectionRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteEmbeddedConnectionRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("EmbeddedConnection")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type embeddedConnection
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeEmbeddedConnectionRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeEmbeddedConnectionRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("EmbeddedConnection")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type embeddedConnection
             }
     }
    /**
      * Create relationship
      * @param GovernanceControlLink relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public GovernanceControlLink createGovernanceControlLinkRelationship(String userId,GovernanceControlLink relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createGovernanceControlLinkRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = GovernanceControlLinkMapper.mapGovernanceControlLinkToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        GovernanceControlLink reclassifiedGovernanceControlLink =  GovernanceControlLinkMapper.mapOmrsRelationshipToGovernanceControlLink(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedGovernanceControlLink;
    }
    /**
      * get relationship
      * @param GovernanceControlLink relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public GovernanceControlLink getGovernanceControlLinkRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getGovernanceControlLinkRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            GovernanceControlLink gotGovernanceControlLink = GovernanceControlLinkMapper.mapOmrsRelationshipToGovernanceControlLink(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotGovernanceControlLink;
      }
    /**
      * update relationship
      * @param GovernanceControlLink relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public GovernanceControlLink updateGovernanceControlLinkRelationship(String userId,GovernanceControlLink governanceControlLink)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateGovernanceControlLinkRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = GovernanceControlLinkMapper.mapGovernanceControlLinkToOmrsRelationship(governanceControlLink);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        GovernanceControlLink updatedGovernanceControlLink = GovernanceControlLinkMapper.mapOmrsRelationshipToGovernanceControlLink(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedGovernanceControlLink;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteGovernanceControlLinkRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteGovernanceControlLinkRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("GovernanceControlLink")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type governanceControlLink
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeGovernanceControlLinkRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeGovernanceControlLinkRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("GovernanceControlLink")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type governanceControlLink
             }
     }
    /**
      * Create relationship
      * @param AttachedRating relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public AttachedRating createAttachedRatingRelationship(String userId,AttachedRating relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createAttachedRatingRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = AttachedRatingMapper.mapAttachedRatingToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        AttachedRating reclassifiedAttachedRating =  AttachedRatingMapper.mapOmrsRelationshipToAttachedRating(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedAttachedRating;
    }
    /**
      * get relationship
      * @param AttachedRating relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public AttachedRating getAttachedRatingRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getAttachedRatingRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            AttachedRating gotAttachedRating = AttachedRatingMapper.mapOmrsRelationshipToAttachedRating(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotAttachedRating;
      }
    /**
      * update relationship
      * @param AttachedRating relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public AttachedRating updateAttachedRatingRelationship(String userId,AttachedRating attachedRating)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateAttachedRatingRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = AttachedRatingMapper.mapAttachedRatingToOmrsRelationship(attachedRating);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        AttachedRating updatedAttachedRating = AttachedRatingMapper.mapOmrsRelationshipToAttachedRating(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedAttachedRating;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteAttachedRatingRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteAttachedRatingRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("AttachedRating")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type attachedRating
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeAttachedRatingRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeAttachedRatingRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("AttachedRating")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type attachedRating
             }
     }
    /**
      * Create relationship
      * @param AttachedNoteLog relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public AttachedNoteLog createAttachedNoteLogRelationship(String userId,AttachedNoteLog relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createAttachedNoteLogRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = AttachedNoteLogMapper.mapAttachedNoteLogToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        AttachedNoteLog reclassifiedAttachedNoteLog =  AttachedNoteLogMapper.mapOmrsRelationshipToAttachedNoteLog(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedAttachedNoteLog;
    }
    /**
      * get relationship
      * @param AttachedNoteLog relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public AttachedNoteLog getAttachedNoteLogRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getAttachedNoteLogRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            AttachedNoteLog gotAttachedNoteLog = AttachedNoteLogMapper.mapOmrsRelationshipToAttachedNoteLog(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotAttachedNoteLog;
      }
    /**
      * update relationship
      * @param AttachedNoteLog relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public AttachedNoteLog updateAttachedNoteLogRelationship(String userId,AttachedNoteLog attachedNoteLog)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateAttachedNoteLogRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = AttachedNoteLogMapper.mapAttachedNoteLogToOmrsRelationship(attachedNoteLog);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        AttachedNoteLog updatedAttachedNoteLog = AttachedNoteLogMapper.mapOmrsRelationshipToAttachedNoteLog(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedAttachedNoteLog;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteAttachedNoteLogRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteAttachedNoteLogRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("AttachedNoteLog")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type attachedNoteLog
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeAttachedNoteLogRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeAttachedNoteLogRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("AttachedNoteLog")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type attachedNoteLog
             }
     }
    /**
      * Create relationship
      * @param ConnectionToAsset relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ConnectionToAsset createConnectionToAssetRelationship(String userId,ConnectionToAsset relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createConnectionToAssetRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ConnectionToAssetMapper.mapConnectionToAssetToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ConnectionToAsset reclassifiedConnectionToAsset =  ConnectionToAssetMapper.mapOmrsRelationshipToConnectionToAsset(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedConnectionToAsset;
    }
    /**
      * get relationship
      * @param ConnectionToAsset relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ConnectionToAsset getConnectionToAssetRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getConnectionToAssetRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ConnectionToAsset gotConnectionToAsset = ConnectionToAssetMapper.mapOmrsRelationshipToConnectionToAsset(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotConnectionToAsset;
      }
    /**
      * update relationship
      * @param ConnectionToAsset relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ConnectionToAsset updateConnectionToAssetRelationship(String userId,ConnectionToAsset connectionToAsset)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateConnectionToAssetRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ConnectionToAssetMapper.mapConnectionToAssetToOmrsRelationship(connectionToAsset);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ConnectionToAsset updatedConnectionToAsset = ConnectionToAssetMapper.mapOmrsRelationshipToConnectionToAsset(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedConnectionToAsset;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteConnectionToAssetRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteConnectionToAssetRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ConnectionToAsset")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type connectionToAsset
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeConnectionToAssetRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeConnectionToAssetRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ConnectionToAsset")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type connectionToAsset
             }
     }
    /**
      * Create relationship
      * @param RegulationCertificationType relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public RegulationCertificationType createRegulationCertificationTypeRelationship(String userId,RegulationCertificationType relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createRegulationCertificationTypeRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = RegulationCertificationTypeMapper.mapRegulationCertificationTypeToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        RegulationCertificationType reclassifiedRegulationCertificationType =  RegulationCertificationTypeMapper.mapOmrsRelationshipToRegulationCertificationType(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedRegulationCertificationType;
    }
    /**
      * get relationship
      * @param RegulationCertificationType relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public RegulationCertificationType getRegulationCertificationTypeRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getRegulationCertificationTypeRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            RegulationCertificationType gotRegulationCertificationType = RegulationCertificationTypeMapper.mapOmrsRelationshipToRegulationCertificationType(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotRegulationCertificationType;
      }
    /**
      * update relationship
      * @param RegulationCertificationType relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public RegulationCertificationType updateRegulationCertificationTypeRelationship(String userId,RegulationCertificationType regulationCertificationType)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateRegulationCertificationTypeRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = RegulationCertificationTypeMapper.mapRegulationCertificationTypeToOmrsRelationship(regulationCertificationType);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        RegulationCertificationType updatedRegulationCertificationType = RegulationCertificationTypeMapper.mapOmrsRelationshipToRegulationCertificationType(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedRegulationCertificationType;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteRegulationCertificationTypeRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteRegulationCertificationTypeRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("RegulationCertificationType")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type regulationCertificationType
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeRegulationCertificationTypeRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeRegulationCertificationTypeRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("RegulationCertificationType")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type regulationCertificationType
             }
     }
    /**
      * Create relationship
      * @param LinkedType relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public LinkedType createLinkedTypeRelationship(String userId,LinkedType relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createLinkedTypeRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = LinkedTypeMapper.mapLinkedTypeToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        LinkedType reclassifiedLinkedType =  LinkedTypeMapper.mapOmrsRelationshipToLinkedType(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedLinkedType;
    }
    /**
      * get relationship
      * @param LinkedType relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public LinkedType getLinkedTypeRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getLinkedTypeRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            LinkedType gotLinkedType = LinkedTypeMapper.mapOmrsRelationshipToLinkedType(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotLinkedType;
      }
    /**
      * update relationship
      * @param LinkedType relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public LinkedType updateLinkedTypeRelationship(String userId,LinkedType linkedType)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateLinkedTypeRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = LinkedTypeMapper.mapLinkedTypeToOmrsRelationship(linkedType);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        LinkedType updatedLinkedType = LinkedTypeMapper.mapOmrsRelationshipToLinkedType(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedLinkedType;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteLinkedTypeRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteLinkedTypeRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("LinkedType")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type linkedType
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeLinkedTypeRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeLinkedTypeRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("LinkedType")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type linkedType
             }
     }
    /**
      * Create relationship
      * @param GovernanceRuleImplementation relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public GovernanceRuleImplementation createGovernanceRuleImplementationRelationship(String userId,GovernanceRuleImplementation relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createGovernanceRuleImplementationRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = GovernanceRuleImplementationMapper.mapGovernanceRuleImplementationToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        GovernanceRuleImplementation reclassifiedGovernanceRuleImplementation =  GovernanceRuleImplementationMapper.mapOmrsRelationshipToGovernanceRuleImplementation(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedGovernanceRuleImplementation;
    }
    /**
      * get relationship
      * @param GovernanceRuleImplementation relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public GovernanceRuleImplementation getGovernanceRuleImplementationRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getGovernanceRuleImplementationRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            GovernanceRuleImplementation gotGovernanceRuleImplementation = GovernanceRuleImplementationMapper.mapOmrsRelationshipToGovernanceRuleImplementation(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotGovernanceRuleImplementation;
      }
    /**
      * update relationship
      * @param GovernanceRuleImplementation relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public GovernanceRuleImplementation updateGovernanceRuleImplementationRelationship(String userId,GovernanceRuleImplementation governanceRuleImplementation)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateGovernanceRuleImplementationRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = GovernanceRuleImplementationMapper.mapGovernanceRuleImplementationToOmrsRelationship(governanceRuleImplementation);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        GovernanceRuleImplementation updatedGovernanceRuleImplementation = GovernanceRuleImplementationMapper.mapOmrsRelationshipToGovernanceRuleImplementation(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedGovernanceRuleImplementation;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteGovernanceRuleImplementationRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteGovernanceRuleImplementationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("GovernanceRuleImplementation")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type governanceRuleImplementation
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeGovernanceRuleImplementationRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeGovernanceRuleImplementationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("GovernanceRuleImplementation")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type governanceRuleImplementation
             }
     }
    /**
      * Create relationship
      * @param AdjacentLocation relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public AdjacentLocation createAdjacentLocationRelationship(String userId,AdjacentLocation relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createAdjacentLocationRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = AdjacentLocationMapper.mapAdjacentLocationToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        AdjacentLocation reclassifiedAdjacentLocation =  AdjacentLocationMapper.mapOmrsRelationshipToAdjacentLocation(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedAdjacentLocation;
    }
    /**
      * get relationship
      * @param AdjacentLocation relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public AdjacentLocation getAdjacentLocationRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getAdjacentLocationRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            AdjacentLocation gotAdjacentLocation = AdjacentLocationMapper.mapOmrsRelationshipToAdjacentLocation(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotAdjacentLocation;
      }
    /**
      * update relationship
      * @param AdjacentLocation relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public AdjacentLocation updateAdjacentLocationRelationship(String userId,AdjacentLocation adjacentLocation)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateAdjacentLocationRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = AdjacentLocationMapper.mapAdjacentLocationToOmrsRelationship(adjacentLocation);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        AdjacentLocation updatedAdjacentLocation = AdjacentLocationMapper.mapOmrsRelationshipToAdjacentLocation(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedAdjacentLocation;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteAdjacentLocationRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteAdjacentLocationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("AdjacentLocation")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type adjacentLocation
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeAdjacentLocationRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeAdjacentLocationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("AdjacentLocation")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type adjacentLocation
             }
     }
    /**
      * Create relationship
      * @param SemanticAssignment relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public SemanticAssignment createSemanticAssignmentRelationship(String userId,SemanticAssignment relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createSemanticAssignmentRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = SemanticAssignmentMapper.mapSemanticAssignmentToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        SemanticAssignment reclassifiedSemanticAssignment =  SemanticAssignmentMapper.mapOmrsRelationshipToSemanticAssignment(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedSemanticAssignment;
    }
    /**
      * get relationship
      * @param SemanticAssignment relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public SemanticAssignment getSemanticAssignmentRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getSemanticAssignmentRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            SemanticAssignment gotSemanticAssignment = SemanticAssignmentMapper.mapOmrsRelationshipToSemanticAssignment(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotSemanticAssignment;
      }
    /**
      * update relationship
      * @param SemanticAssignment relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public SemanticAssignment updateSemanticAssignmentRelationship(String userId,SemanticAssignment semanticAssignment)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateSemanticAssignmentRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = SemanticAssignmentMapper.mapSemanticAssignmentToOmrsRelationship(semanticAssignment);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        SemanticAssignment updatedSemanticAssignment = SemanticAssignmentMapper.mapOmrsRelationshipToSemanticAssignment(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedSemanticAssignment;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteSemanticAssignmentRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteSemanticAssignmentRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("SemanticAssignment")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type semanticAssignment
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeSemanticAssignmentRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeSemanticAssignmentRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("SemanticAssignment")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type semanticAssignment
             }
     }
    /**
      * Create relationship
      * @param HostLocation relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public HostLocation createHostLocationRelationship(String userId,HostLocation relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createHostLocationRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = HostLocationMapper.mapHostLocationToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        HostLocation reclassifiedHostLocation =  HostLocationMapper.mapOmrsRelationshipToHostLocation(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedHostLocation;
    }
    /**
      * get relationship
      * @param HostLocation relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public HostLocation getHostLocationRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getHostLocationRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            HostLocation gotHostLocation = HostLocationMapper.mapOmrsRelationshipToHostLocation(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotHostLocation;
      }
    /**
      * update relationship
      * @param HostLocation relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public HostLocation updateHostLocationRelationship(String userId,HostLocation hostLocation)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateHostLocationRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = HostLocationMapper.mapHostLocationToOmrsRelationship(hostLocation);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        HostLocation updatedHostLocation = HostLocationMapper.mapOmrsRelationshipToHostLocation(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedHostLocation;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteHostLocationRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteHostLocationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("HostLocation")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type hostLocation
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeHostLocationRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeHostLocationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("HostLocation")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type hostLocation
             }
     }
    /**
      * Create relationship
      * @param ServerDeployment relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ServerDeployment createServerDeploymentRelationship(String userId,ServerDeployment relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createServerDeploymentRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ServerDeploymentMapper.mapServerDeploymentToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ServerDeployment reclassifiedServerDeployment =  ServerDeploymentMapper.mapOmrsRelationshipToServerDeployment(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedServerDeployment;
    }
    /**
      * get relationship
      * @param ServerDeployment relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ServerDeployment getServerDeploymentRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getServerDeploymentRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ServerDeployment gotServerDeployment = ServerDeploymentMapper.mapOmrsRelationshipToServerDeployment(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotServerDeployment;
      }
    /**
      * update relationship
      * @param ServerDeployment relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ServerDeployment updateServerDeploymentRelationship(String userId,ServerDeployment serverDeployment)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateServerDeploymentRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ServerDeploymentMapper.mapServerDeploymentToOmrsRelationship(serverDeployment);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ServerDeployment updatedServerDeployment = ServerDeploymentMapper.mapOmrsRelationshipToServerDeployment(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedServerDeployment;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteServerDeploymentRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteServerDeploymentRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ServerDeployment")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type serverDeployment
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeServerDeploymentRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeServerDeploymentRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ServerDeployment")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type serverDeployment
             }
     }
    /**
      * Create relationship
      * @param RelatedTerm relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public RelatedTerm createRelatedTermRelationship(String userId,RelatedTerm relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createRelatedTermRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = RelatedTermMapper.mapRelatedTermToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        RelatedTerm reclassifiedRelatedTerm =  RelatedTermMapper.mapOmrsRelationshipToRelatedTerm(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedRelatedTerm;
    }
    /**
      * get relationship
      * @param RelatedTerm relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public RelatedTerm getRelatedTermRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getRelatedTermRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            RelatedTerm gotRelatedTerm = RelatedTermMapper.mapOmrsRelationshipToRelatedTerm(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotRelatedTerm;
      }
    /**
      * update relationship
      * @param RelatedTerm relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public RelatedTerm updateRelatedTermRelationship(String userId,RelatedTerm relatedTerm)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateRelatedTermRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = RelatedTermMapper.mapRelatedTermToOmrsRelationship(relatedTerm);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        RelatedTerm updatedRelatedTerm = RelatedTermMapper.mapOmrsRelationshipToRelatedTerm(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedRelatedTerm;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteRelatedTermRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteRelatedTermRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("RelatedTerm")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type relatedTerm
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeRelatedTermRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeRelatedTermRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("RelatedTerm")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type relatedTerm
             }
     }
    /**
      * Create relationship
      * @param SchemaTypeImplementation relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public SchemaTypeImplementation createSchemaTypeImplementationRelationship(String userId,SchemaTypeImplementation relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createSchemaTypeImplementationRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = SchemaTypeImplementationMapper.mapSchemaTypeImplementationToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        SchemaTypeImplementation reclassifiedSchemaTypeImplementation =  SchemaTypeImplementationMapper.mapOmrsRelationshipToSchemaTypeImplementation(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedSchemaTypeImplementation;
    }
    /**
      * get relationship
      * @param SchemaTypeImplementation relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public SchemaTypeImplementation getSchemaTypeImplementationRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getSchemaTypeImplementationRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            SchemaTypeImplementation gotSchemaTypeImplementation = SchemaTypeImplementationMapper.mapOmrsRelationshipToSchemaTypeImplementation(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotSchemaTypeImplementation;
      }
    /**
      * update relationship
      * @param SchemaTypeImplementation relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public SchemaTypeImplementation updateSchemaTypeImplementationRelationship(String userId,SchemaTypeImplementation schemaTypeImplementation)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateSchemaTypeImplementationRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = SchemaTypeImplementationMapper.mapSchemaTypeImplementationToOmrsRelationship(schemaTypeImplementation);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        SchemaTypeImplementation updatedSchemaTypeImplementation = SchemaTypeImplementationMapper.mapOmrsRelationshipToSchemaTypeImplementation(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedSchemaTypeImplementation;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteSchemaTypeImplementationRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteSchemaTypeImplementationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("SchemaTypeImplementation")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type schemaTypeImplementation
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeSchemaTypeImplementationRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeSchemaTypeImplementationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("SchemaTypeImplementation")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type schemaTypeImplementation
             }
     }
    /**
      * Create relationship
      * @param ProcessInput relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ProcessInput createProcessInputRelationship(String userId,ProcessInput relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createProcessInputRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ProcessInputMapper.mapProcessInputToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ProcessInput reclassifiedProcessInput =  ProcessInputMapper.mapOmrsRelationshipToProcessInput(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedProcessInput;
    }
    /**
      * get relationship
      * @param ProcessInput relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ProcessInput getProcessInputRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getProcessInputRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ProcessInput gotProcessInput = ProcessInputMapper.mapOmrsRelationshipToProcessInput(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotProcessInput;
      }
    /**
      * update relationship
      * @param ProcessInput relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ProcessInput updateProcessInputRelationship(String userId,ProcessInput processInput)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateProcessInputRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ProcessInputMapper.mapProcessInputToOmrsRelationship(processInput);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ProcessInput updatedProcessInput = ProcessInputMapper.mapOmrsRelationshipToProcessInput(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedProcessInput;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteProcessInputRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteProcessInputRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ProcessInput")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type processInput
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeProcessInputRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeProcessInputRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ProcessInput")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type processInput
             }
     }
    /**
      * Create relationship
      * @param APIHeader relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public APIHeader createAPIHeaderRelationship(String userId,APIHeader relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createAPIHeaderRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = APIHeaderMapper.mapAPIHeaderToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        APIHeader reclassifiedAPIHeader =  APIHeaderMapper.mapOmrsRelationshipToAPIHeader(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedAPIHeader;
    }
    /**
      * get relationship
      * @param APIHeader relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public APIHeader getAPIHeaderRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getAPIHeaderRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            APIHeader gotAPIHeader = APIHeaderMapper.mapOmrsRelationshipToAPIHeader(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotAPIHeader;
      }
    /**
      * update relationship
      * @param APIHeader relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public APIHeader updateAPIHeaderRelationship(String userId,APIHeader aPIHeader)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateAPIHeaderRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = APIHeaderMapper.mapAPIHeaderToOmrsRelationship(aPIHeader);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        APIHeader updatedAPIHeader = APIHeaderMapper.mapOmrsRelationshipToAPIHeader(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedAPIHeader;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteAPIHeaderRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteAPIHeaderRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("APIHeader")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type aPIHeader
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeAPIHeaderRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeAPIHeaderRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("APIHeader")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type aPIHeader
             }
     }
    /**
      * Create relationship
      * @param MeetingOnReferenceable relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public MeetingOnReferenceable createMeetingOnReferenceableRelationship(String userId,MeetingOnReferenceable relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createMeetingOnReferenceableRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = MeetingOnReferenceableMapper.mapMeetingOnReferenceableToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        MeetingOnReferenceable reclassifiedMeetingOnReferenceable =  MeetingOnReferenceableMapper.mapOmrsRelationshipToMeetingOnReferenceable(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedMeetingOnReferenceable;
    }
    /**
      * get relationship
      * @param MeetingOnReferenceable relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public MeetingOnReferenceable getMeetingOnReferenceableRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getMeetingOnReferenceableRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            MeetingOnReferenceable gotMeetingOnReferenceable = MeetingOnReferenceableMapper.mapOmrsRelationshipToMeetingOnReferenceable(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotMeetingOnReferenceable;
      }
    /**
      * update relationship
      * @param MeetingOnReferenceable relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public MeetingOnReferenceable updateMeetingOnReferenceableRelationship(String userId,MeetingOnReferenceable meetingOnReferenceable)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateMeetingOnReferenceableRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = MeetingOnReferenceableMapper.mapMeetingOnReferenceableToOmrsRelationship(meetingOnReferenceable);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        MeetingOnReferenceable updatedMeetingOnReferenceable = MeetingOnReferenceableMapper.mapOmrsRelationshipToMeetingOnReferenceable(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedMeetingOnReferenceable;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteMeetingOnReferenceableRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteMeetingOnReferenceableRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("MeetingOnReferenceable")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type meetingOnReferenceable
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeMeetingOnReferenceableRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeMeetingOnReferenceableRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("MeetingOnReferenceable")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type meetingOnReferenceable
             }
     }
    /**
      * Create relationship
      * @param AttachedTag relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public AttachedTag createAttachedTagRelationship(String userId,AttachedTag relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createAttachedTagRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = AttachedTagMapper.mapAttachedTagToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        AttachedTag reclassifiedAttachedTag =  AttachedTagMapper.mapOmrsRelationshipToAttachedTag(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedAttachedTag;
    }
    /**
      * get relationship
      * @param AttachedTag relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public AttachedTag getAttachedTagRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getAttachedTagRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            AttachedTag gotAttachedTag = AttachedTagMapper.mapOmrsRelationshipToAttachedTag(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotAttachedTag;
      }
    /**
      * update relationship
      * @param AttachedTag relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public AttachedTag updateAttachedTagRelationship(String userId,AttachedTag attachedTag)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateAttachedTagRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = AttachedTagMapper.mapAttachedTagToOmrsRelationship(attachedTag);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        AttachedTag updatedAttachedTag = AttachedTagMapper.mapOmrsRelationshipToAttachedTag(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedAttachedTag;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteAttachedTagRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteAttachedTagRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("AttachedTag")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type attachedTag
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeAttachedTagRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeAttachedTagRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("AttachedTag")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type attachedTag
             }
     }
    /**
      * Create relationship
      * @param TermHASARelationship relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public TermHASARelationship createTermHASARelationshipRelationship(String userId,TermHASARelationship relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createTermHASARelationshipRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = TermHASARelationshipMapper.mapTermHASARelationshipToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        TermHASARelationship reclassifiedTermHASARelationship =  TermHASARelationshipMapper.mapOmrsRelationshipToTermHASARelationship(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedTermHASARelationship;
    }
    /**
      * get relationship
      * @param TermHASARelationship relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public TermHASARelationship getTermHASARelationshipRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getTermHASARelationshipRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            TermHASARelationship gotTermHASARelationship = TermHASARelationshipMapper.mapOmrsRelationshipToTermHASARelationship(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotTermHASARelationship;
      }
    /**
      * update relationship
      * @param TermHASARelationship relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public TermHASARelationship updateTermHASARelationshipRelationship(String userId,TermHASARelationship termHASARelationship)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateTermHASARelationshipRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = TermHASARelationshipMapper.mapTermHASARelationshipToOmrsRelationship(termHASARelationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        TermHASARelationship updatedTermHASARelationship = TermHASARelationshipMapper.mapOmrsRelationshipToTermHASARelationship(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedTermHASARelationship;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteTermHASARelationshipRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteTermHASARelationshipRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("TermHASARelationship")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type termHASARelationship
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeTermHASARelationshipRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeTermHASARelationshipRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("TermHASARelationship")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type termHASARelationship
             }
     }
    /**
      * Create relationship
      * @param GovernanceProcessImplementation relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public GovernanceProcessImplementation createGovernanceProcessImplementationRelationship(String userId,GovernanceProcessImplementation relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createGovernanceProcessImplementationRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = GovernanceProcessImplementationMapper.mapGovernanceProcessImplementationToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        GovernanceProcessImplementation reclassifiedGovernanceProcessImplementation =  GovernanceProcessImplementationMapper.mapOmrsRelationshipToGovernanceProcessImplementation(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedGovernanceProcessImplementation;
    }
    /**
      * get relationship
      * @param GovernanceProcessImplementation relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public GovernanceProcessImplementation getGovernanceProcessImplementationRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getGovernanceProcessImplementationRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            GovernanceProcessImplementation gotGovernanceProcessImplementation = GovernanceProcessImplementationMapper.mapOmrsRelationshipToGovernanceProcessImplementation(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotGovernanceProcessImplementation;
      }
    /**
      * update relationship
      * @param GovernanceProcessImplementation relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public GovernanceProcessImplementation updateGovernanceProcessImplementationRelationship(String userId,GovernanceProcessImplementation governanceProcessImplementation)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateGovernanceProcessImplementationRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = GovernanceProcessImplementationMapper.mapGovernanceProcessImplementationToOmrsRelationship(governanceProcessImplementation);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        GovernanceProcessImplementation updatedGovernanceProcessImplementation = GovernanceProcessImplementationMapper.mapOmrsRelationshipToGovernanceProcessImplementation(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedGovernanceProcessImplementation;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteGovernanceProcessImplementationRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteGovernanceProcessImplementationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("GovernanceProcessImplementation")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type governanceProcessImplementation
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeGovernanceProcessImplementationRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeGovernanceProcessImplementationRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("GovernanceProcessImplementation")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type governanceProcessImplementation
             }
     }
    /**
      * Create relationship
      * @param GroupedMedia relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public GroupedMedia createGroupedMediaRelationship(String userId,GroupedMedia relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createGroupedMediaRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = GroupedMediaMapper.mapGroupedMediaToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        GroupedMedia reclassifiedGroupedMedia =  GroupedMediaMapper.mapOmrsRelationshipToGroupedMedia(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedGroupedMedia;
    }
    /**
      * get relationship
      * @param GroupedMedia relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public GroupedMedia getGroupedMediaRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getGroupedMediaRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            GroupedMedia gotGroupedMedia = GroupedMediaMapper.mapOmrsRelationshipToGroupedMedia(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotGroupedMedia;
      }
    /**
      * update relationship
      * @param GroupedMedia relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public GroupedMedia updateGroupedMediaRelationship(String userId,GroupedMedia groupedMedia)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateGroupedMediaRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = GroupedMediaMapper.mapGroupedMediaToOmrsRelationship(groupedMedia);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        GroupedMedia updatedGroupedMedia = GroupedMediaMapper.mapOmrsRelationshipToGroupedMedia(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedGroupedMedia;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteGroupedMediaRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteGroupedMediaRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("GroupedMedia")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type groupedMedia
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeGroupedMediaRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeGroupedMediaRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("GroupedMedia")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type groupedMedia
             }
     }
    /**
      * Create relationship
      * @param GovernanceResponse relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public GovernanceResponse createGovernanceResponseRelationship(String userId,GovernanceResponse relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createGovernanceResponseRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = GovernanceResponseMapper.mapGovernanceResponseToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        GovernanceResponse reclassifiedGovernanceResponse =  GovernanceResponseMapper.mapOmrsRelationshipToGovernanceResponse(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedGovernanceResponse;
    }
    /**
      * get relationship
      * @param GovernanceResponse relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public GovernanceResponse getGovernanceResponseRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getGovernanceResponseRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            GovernanceResponse gotGovernanceResponse = GovernanceResponseMapper.mapOmrsRelationshipToGovernanceResponse(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotGovernanceResponse;
      }
    /**
      * update relationship
      * @param GovernanceResponse relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public GovernanceResponse updateGovernanceResponseRelationship(String userId,GovernanceResponse governanceResponse)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateGovernanceResponseRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = GovernanceResponseMapper.mapGovernanceResponseToOmrsRelationship(governanceResponse);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        GovernanceResponse updatedGovernanceResponse = GovernanceResponseMapper.mapOmrsRelationshipToGovernanceResponse(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedGovernanceResponse;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteGovernanceResponseRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteGovernanceResponseRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("GovernanceResponse")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type governanceResponse
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeGovernanceResponseRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeGovernanceResponseRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("GovernanceResponse")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type governanceResponse
             }
     }
    /**
      * Create relationship
      * @param NestedFile relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public NestedFile createNestedFileRelationship(String userId,NestedFile relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createNestedFileRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = NestedFileMapper.mapNestedFileToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        NestedFile reclassifiedNestedFile =  NestedFileMapper.mapOmrsRelationshipToNestedFile(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedNestedFile;
    }
    /**
      * get relationship
      * @param NestedFile relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public NestedFile getNestedFileRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getNestedFileRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            NestedFile gotNestedFile = NestedFileMapper.mapOmrsRelationshipToNestedFile(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotNestedFile;
      }
    /**
      * update relationship
      * @param NestedFile relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public NestedFile updateNestedFileRelationship(String userId,NestedFile nestedFile)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateNestedFileRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = NestedFileMapper.mapNestedFileToOmrsRelationship(nestedFile);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        NestedFile updatedNestedFile = NestedFileMapper.mapOmrsRelationshipToNestedFile(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedNestedFile;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteNestedFileRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteNestedFileRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("NestedFile")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type nestedFile
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeNestedFileRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeNestedFileRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("NestedFile")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type nestedFile
             }
     }
    /**
      * Create relationship
      * @param HostOperatingPlatform relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public HostOperatingPlatform createHostOperatingPlatformRelationship(String userId,HostOperatingPlatform relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createHostOperatingPlatformRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = HostOperatingPlatformMapper.mapHostOperatingPlatformToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        HostOperatingPlatform reclassifiedHostOperatingPlatform =  HostOperatingPlatformMapper.mapOmrsRelationshipToHostOperatingPlatform(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedHostOperatingPlatform;
    }
    /**
      * get relationship
      * @param HostOperatingPlatform relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public HostOperatingPlatform getHostOperatingPlatformRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getHostOperatingPlatformRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            HostOperatingPlatform gotHostOperatingPlatform = HostOperatingPlatformMapper.mapOmrsRelationshipToHostOperatingPlatform(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotHostOperatingPlatform;
      }
    /**
      * update relationship
      * @param HostOperatingPlatform relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public HostOperatingPlatform updateHostOperatingPlatformRelationship(String userId,HostOperatingPlatform hostOperatingPlatform)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateHostOperatingPlatformRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = HostOperatingPlatformMapper.mapHostOperatingPlatformToOmrsRelationship(hostOperatingPlatform);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        HostOperatingPlatform updatedHostOperatingPlatform = HostOperatingPlatformMapper.mapOmrsRelationshipToHostOperatingPlatform(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedHostOperatingPlatform;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteHostOperatingPlatformRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteHostOperatingPlatformRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("HostOperatingPlatform")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type hostOperatingPlatform
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeHostOperatingPlatformRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeHostOperatingPlatformRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("HostOperatingPlatform")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type hostOperatingPlatform
             }
     }
    /**
      * Create relationship
      * @param ActorCollection relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ActorCollection createActorCollectionRelationship(String userId,ActorCollection relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createActorCollectionRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ActorCollectionMapper.mapActorCollectionToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ActorCollection reclassifiedActorCollection =  ActorCollectionMapper.mapOmrsRelationshipToActorCollection(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedActorCollection;
    }
    /**
      * get relationship
      * @param ActorCollection relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ActorCollection getActorCollectionRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getActorCollectionRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ActorCollection gotActorCollection = ActorCollectionMapper.mapOmrsRelationshipToActorCollection(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotActorCollection;
      }
    /**
      * update relationship
      * @param ActorCollection relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ActorCollection updateActorCollectionRelationship(String userId,ActorCollection actorCollection)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateActorCollectionRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ActorCollectionMapper.mapActorCollectionToOmrsRelationship(actorCollection);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ActorCollection updatedActorCollection = ActorCollectionMapper.mapOmrsRelationshipToActorCollection(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedActorCollection;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteActorCollectionRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteActorCollectionRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ActorCollection")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type actorCollection
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeActorCollectionRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeActorCollectionRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ActorCollection")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type actorCollection
             }
     }
    /**
      * Create relationship
      * @param TermAnchor relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public TermAnchor createTermAnchorRelationship(String userId,TermAnchor relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createTermAnchorRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = TermAnchorMapper.mapTermAnchorToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        TermAnchor reclassifiedTermAnchor =  TermAnchorMapper.mapOmrsRelationshipToTermAnchor(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedTermAnchor;
    }
    /**
      * get relationship
      * @param TermAnchor relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public TermAnchor getTermAnchorRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getTermAnchorRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            TermAnchor gotTermAnchor = TermAnchorMapper.mapOmrsRelationshipToTermAnchor(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotTermAnchor;
      }
    /**
      * update relationship
      * @param TermAnchor relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public TermAnchor updateTermAnchorRelationship(String userId,TermAnchor termAnchor)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateTermAnchorRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = TermAnchorMapper.mapTermAnchorToOmrsRelationship(termAnchor);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        TermAnchor updatedTermAnchor = TermAnchorMapper.mapOmrsRelationshipToTermAnchor(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedTermAnchor;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteTermAnchorRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteTermAnchorRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("TermAnchor")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type termAnchor
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeTermAnchorRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeTermAnchorRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("TermAnchor")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type termAnchor
             }
     }
    /**
      * Create relationship
      * @param ProjectResources relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ProjectResources createProjectResourcesRelationship(String userId,ProjectResources relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createProjectResourcesRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ProjectResourcesMapper.mapProjectResourcesToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ProjectResources reclassifiedProjectResources =  ProjectResourcesMapper.mapOmrsRelationshipToProjectResources(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedProjectResources;
    }
    /**
      * get relationship
      * @param ProjectResources relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ProjectResources getProjectResourcesRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getProjectResourcesRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ProjectResources gotProjectResources = ProjectResourcesMapper.mapOmrsRelationshipToProjectResources(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotProjectResources;
      }
    /**
      * update relationship
      * @param ProjectResources relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ProjectResources updateProjectResourcesRelationship(String userId,ProjectResources projectResources)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateProjectResourcesRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ProjectResourcesMapper.mapProjectResourcesToOmrsRelationship(projectResources);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ProjectResources updatedProjectResources = ProjectResourcesMapper.mapOmrsRelationshipToProjectResources(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedProjectResources;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteProjectResourcesRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteProjectResourcesRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ProjectResources")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type projectResources
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeProjectResourcesRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeProjectResourcesRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ProjectResources")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type projectResources
             }
     }
    /**
      * Create relationship
      * @param APIRequest relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public APIRequest createAPIRequestRelationship(String userId,APIRequest relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createAPIRequestRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = APIRequestMapper.mapAPIRequestToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        APIRequest reclassifiedAPIRequest =  APIRequestMapper.mapOmrsRelationshipToAPIRequest(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedAPIRequest;
    }
    /**
      * get relationship
      * @param APIRequest relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public APIRequest getAPIRequestRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getAPIRequestRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            APIRequest gotAPIRequest = APIRequestMapper.mapOmrsRelationshipToAPIRequest(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotAPIRequest;
      }
    /**
      * update relationship
      * @param APIRequest relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public APIRequest updateAPIRequestRelationship(String userId,APIRequest aPIRequest)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateAPIRequestRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = APIRequestMapper.mapAPIRequestToOmrsRelationship(aPIRequest);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        APIRequest updatedAPIRequest = APIRequestMapper.mapOmrsRelationshipToAPIRequest(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedAPIRequest;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteAPIRequestRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteAPIRequestRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("APIRequest")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type aPIRequest
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeAPIRequestRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeAPIRequestRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("APIRequest")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type aPIRequest
             }
     }
    /**
      * Create relationship
      * @param SoftwareComponentDeployment relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public SoftwareComponentDeployment createSoftwareComponentDeploymentRelationship(String userId,SoftwareComponentDeployment relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createSoftwareComponentDeploymentRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = SoftwareComponentDeploymentMapper.mapSoftwareComponentDeploymentToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        SoftwareComponentDeployment reclassifiedSoftwareComponentDeployment =  SoftwareComponentDeploymentMapper.mapOmrsRelationshipToSoftwareComponentDeployment(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedSoftwareComponentDeployment;
    }
    /**
      * get relationship
      * @param SoftwareComponentDeployment relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public SoftwareComponentDeployment getSoftwareComponentDeploymentRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getSoftwareComponentDeploymentRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            SoftwareComponentDeployment gotSoftwareComponentDeployment = SoftwareComponentDeploymentMapper.mapOmrsRelationshipToSoftwareComponentDeployment(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotSoftwareComponentDeployment;
      }
    /**
      * update relationship
      * @param SoftwareComponentDeployment relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public SoftwareComponentDeployment updateSoftwareComponentDeploymentRelationship(String userId,SoftwareComponentDeployment softwareComponentDeployment)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateSoftwareComponentDeploymentRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = SoftwareComponentDeploymentMapper.mapSoftwareComponentDeploymentToOmrsRelationship(softwareComponentDeployment);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        SoftwareComponentDeployment updatedSoftwareComponentDeployment = SoftwareComponentDeploymentMapper.mapOmrsRelationshipToSoftwareComponentDeployment(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedSoftwareComponentDeployment;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteSoftwareComponentDeploymentRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteSoftwareComponentDeploymentRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("SoftwareComponentDeployment")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type softwareComponentDeployment
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeSoftwareComponentDeploymentRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeSoftwareComponentDeploymentRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("SoftwareComponentDeployment")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type softwareComponentDeployment
             }
     }
    /**
      * Create relationship
      * @param CohortMemberMetadataCollection relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public CohortMemberMetadataCollection createCohortMemberMetadataCollectionRelationship(String userId,CohortMemberMetadataCollection relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createCohortMemberMetadataCollectionRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = CohortMemberMetadataCollectionMapper.mapCohortMemberMetadataCollectionToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        CohortMemberMetadataCollection reclassifiedCohortMemberMetadataCollection =  CohortMemberMetadataCollectionMapper.mapOmrsRelationshipToCohortMemberMetadataCollection(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedCohortMemberMetadataCollection;
    }
    /**
      * get relationship
      * @param CohortMemberMetadataCollection relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public CohortMemberMetadataCollection getCohortMemberMetadataCollectionRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getCohortMemberMetadataCollectionRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            CohortMemberMetadataCollection gotCohortMemberMetadataCollection = CohortMemberMetadataCollectionMapper.mapOmrsRelationshipToCohortMemberMetadataCollection(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotCohortMemberMetadataCollection;
      }
    /**
      * update relationship
      * @param CohortMemberMetadataCollection relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public CohortMemberMetadataCollection updateCohortMemberMetadataCollectionRelationship(String userId,CohortMemberMetadataCollection cohortMemberMetadataCollection)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateCohortMemberMetadataCollectionRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = CohortMemberMetadataCollectionMapper.mapCohortMemberMetadataCollectionToOmrsRelationship(cohortMemberMetadataCollection);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        CohortMemberMetadataCollection updatedCohortMemberMetadataCollection = CohortMemberMetadataCollectionMapper.mapOmrsRelationshipToCohortMemberMetadataCollection(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedCohortMemberMetadataCollection;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteCohortMemberMetadataCollectionRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteCohortMemberMetadataCollectionRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("CohortMemberMetadataCollection")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type cohortMemberMetadataCollection
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeCohortMemberMetadataCollectionRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeCohortMemberMetadataCollectionRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("CohortMemberMetadataCollection")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type cohortMemberMetadataCollection
             }
     }
    /**
      * Create relationship
      * @param ReferenceableFacet relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public ReferenceableFacet createReferenceableFacetRelationship(String userId,ReferenceableFacet relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createReferenceableFacetRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = ReferenceableFacetMapper.mapReferenceableFacetToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        ReferenceableFacet reclassifiedReferenceableFacet =  ReferenceableFacetMapper.mapOmrsRelationshipToReferenceableFacet(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedReferenceableFacet;
    }
    /**
      * get relationship
      * @param ReferenceableFacet relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public ReferenceableFacet getReferenceableFacetRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getReferenceableFacetRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            ReferenceableFacet gotReferenceableFacet = ReferenceableFacetMapper.mapOmrsRelationshipToReferenceableFacet(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotReferenceableFacet;
      }
    /**
      * update relationship
      * @param ReferenceableFacet relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public ReferenceableFacet updateReferenceableFacetRelationship(String userId,ReferenceableFacet referenceableFacet)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateReferenceableFacetRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = ReferenceableFacetMapper.mapReferenceableFacetToOmrsRelationship(referenceableFacet);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        ReferenceableFacet updatedReferenceableFacet = ReferenceableFacetMapper.mapOmrsRelationshipToReferenceableFacet(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedReferenceableFacet;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteReferenceableFacetRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteReferenceableFacetRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("ReferenceableFacet")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type referenceableFacet
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeReferenceableFacetRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeReferenceableFacetRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("ReferenceableFacet")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type referenceableFacet
             }
     }
    /**
      * Create relationship
      * @param AttachedLike relationship to create
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws  UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
    public AttachedLike createAttachedLikeRelationship(String userId,AttachedLike relationship)
          throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException,  UnrecognizedGUIDException,StatusNotSupportedException {
        final String methodName = "createAttachedLikeRelationship";
        if (log.isDebugEnabled()) {
            log.debug("==> Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);

        Relationship omrsRelationship = AttachedLikeMapper.mapAttachedLikeToOmrsRelationship(relationship);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSAddRelationship(userId,omrsRelationship);
        AttachedLike reclassifiedAttachedLike =  AttachedLikeMapper.mapOmrsRelationshipToAttachedLike(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationship="+relationship);
        }
        return reclassifiedAttachedLike;
    }
    /**
      * get relationship
      * @param AttachedLike relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      */
    public AttachedLike getAttachedLikeRelationshipByGuid( String userId, String relationshipGuid)
         throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException {
            final String methodName = "getAttachedLikeRelationshipByGuid";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship returnedRelationship = oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            AttachedLike gotAttachedLike = AttachedLikeMapper.mapOmrsRelationshipToAttachedLike(returnedRelationship);
            if (log.isDebugEnabled()) {
                log.debug("<== successful Method: " + methodName + ",userId="+userId+",relationshipGuid="+relationshipGuid);
            }
            return gotAttachedLike;
      }
    /**
      * update relationship
      * @param AttachedLike relationship
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws StatusNotSupportedException
      */
      public AttachedLike updateAttachedLikeRelationship(String userId,AttachedLike attachedLike)
            throws UserNotAuthorizedException, MetadataServerUncontactableException, InvalidParameterException, StatusNotSupportedException, UnrecognizedGUIDException {
        final String methodName = "updateAttachedLikeRelationship";
        if (log.isDebugEnabled()) {
           log.debug("==> Method: " + methodName + ",userId="+userId);
        }
        RestValidator.validateUserIdNotNull(className,methodName,userId);


        Relationship omrsRelationship = AttachedLikeMapper.mapAttachedLikeToOmrsRelationship(attachedLike);
        Relationship returnedRelationship = oMRSAPIHelper.callOMRSUpdateRelationship(userId,omrsRelationship);
        AttachedLike updatedAttachedLike = AttachedLikeMapper.mapOmrsRelationshipToAttachedLike(returnedRelationship);
        if (log.isDebugEnabled()) {
            log.debug("<== successful Method: " + methodName + ",userId="+userId);
        }
        return updatedAttachedLike;
    }
    /**
      * delete relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws FunctionNotSupportedException
      */
     public void deleteAttachedLikeRelationshipById(String userId,String relationshipGuid)
              throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, FunctionNotSupportedException, UnrecognizedGUIDException {
            final String methodName = "deleteAttachedLikeRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
             RestValidator.validateUserIdNotNull(className,methodName,userId);
             RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

             Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
             String typeGuid = relationship.getType().getTypeDefGUID();
             String typeName = relationship.getType().getTypeDefName();
             if (typeName.equals("AttachedLike")) {
                oMRSAPIHelper.callOMRSDeleteRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type attachedLike
             }
     }
    /**
      * purge relationship
      * @param relationshipGuid relationshipGuid
      * @throws MetadataServerUncontactableException
      * @throws UserNotAuthorizedException
      * @throws InvalidParameterException
      * @throws UnrecognizedGUIDException
      * @throws RelationshipNotDeletedException
      * @throws GUIDNotPurgedException
      */
     public void purgeAttachedLikeRelationshipById(String userId,String relationshipGuid)
            throws MetadataServerUncontactableException, UserNotAuthorizedException, InvalidParameterException, UnrecognizedGUIDException, RelationshipNotDeletedException, GUIDNotPurgedException {
            final String methodName = "purgeAttachedLikeRelationshipById";
            if (log.isDebugEnabled()) {
                log.debug("==> Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
            }
            RestValidator.validateUserIdNotNull(className,methodName,userId);
            RestValidator.validateGUIDNotNull(className,methodName,relationshipGuid,"relationshipGuid");

            Relationship relationship =  oMRSAPIHelper.callOMRSGetRelationshipByGuid(userId,relationshipGuid);
            String typeGuid = relationship.getType().getTypeDefGUID();
            String typeName = relationship.getType().getTypeDefName();
            if (typeName.equals("AttachedLike")) {
                oMRSAPIHelper.callOMRSPurgeRelationship(userId, typeGuid, typeName, relationshipGuid);
                if (log.isDebugEnabled()) {
                    log.debug("<== successful Method: " + methodName + ",userId="+userId+",guid="+relationshipGuid);
                 }
             } else {
                 // error guid supplied is not for a relationship of type attachedLike
             }
     }

}
