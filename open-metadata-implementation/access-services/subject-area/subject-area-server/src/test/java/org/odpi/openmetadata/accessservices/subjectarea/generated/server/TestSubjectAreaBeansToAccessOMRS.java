/* SPDX-License-Identifier: Apache-2.0 */

// This is a generated file - do not edit - changes should be made to the templates amd/or generator to generate this file with changes.

package org.odpi.openmetadata.accessservices.subjectarea.generated.server;

import java.util.*;

import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.ArrayPropertyValue;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.EntityDetail;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstanceProperties;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.PrimitivePropertyValue;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.typedefs.PrimitiveDefCategory;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.EnumPropertyValue;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.MapPropertyValue;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.InstanceType;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.EntityProxy;
import org.odpi.openmetadata.repositoryservices.connectors.stores.metadatacollectionstore.properties.instances.Relationship;
import org.odpi.openmetadata.accessservices.subjectarea.ffdc.exceptions.*;
import org.odpi.openmetadata.accessservices.subjectarea.properties.objects.common.SystemAttributes;
import org.odpi.openmetadata.accessservices.subjectarea.utilities.OMRSAPIHelper;

import org.odpi.openmetadata.accessservices.subjectarea.properties.enums.*;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;
import static org.testng.Assert.assertEquals;
import org.odpi.openmetadata.accessservices.subjectarea.responses.*;

import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.CertificationType.CertificationType;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.CertificationType.CertificationTypeReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.APISchemaType.APISchemaType;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.APISchemaType.APISchemaTypeReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DataSet.DataSet;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DataSet.DataSetReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.OperatingPlatform.OperatingPlatform;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.OperatingPlatform.OperatingPlatformReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernancePolicy.GovernancePolicy;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernancePolicy.GovernancePolicyReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DerivedSchemaAttribute.DerivedSchemaAttribute;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DerivedSchemaAttribute.DerivedSchemaAttributeReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Process.Process;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Process.ProcessReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MapSchemaType.MapSchemaType;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MapSchemaType.MapSchemaTypeReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DeployedSoftwareComponent.DeployedSoftwareComponent;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DeployedSoftwareComponent.DeployedSoftwareComponentReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SchemaType.SchemaType;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SchemaType.SchemaTypeReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DataFile.DataFile;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DataFile.DataFileReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Like.Like;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Like.LikeReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Referenceable.Referenceable;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Referenceable.ReferenceableReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ExternalReference.ExternalReference;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ExternalReference.ExternalReferenceReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Endpoint.Endpoint;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Endpoint.EndpointReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ContactDetails.ContactDetails;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ContactDetails.ContactDetailsReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceDefinition.GovernanceDefinition;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceDefinition.GovernanceDefinitionReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.FileFolder.FileFolder;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.FileFolder.FileFolderReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Network.Network;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Network.NetworkReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ActorProfile.ActorProfile;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ActorProfile.ActorProfileReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Asset.Asset;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Asset.AssetReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.APIOperation.APIOperation;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.APIOperation.APIOperationReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ToDo.ToDo;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ToDo.ToDoReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.NetworkGateway.NetworkGateway;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.NetworkGateway.NetworkGatewayReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceResponsibility.GovernanceResponsibility;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceResponsibility.GovernanceResponsibilityReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ImplementationSnippet.ImplementationSnippet;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ImplementationSnippet.ImplementationSnippetReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.UserIdentity.UserIdentity;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.UserIdentity.UserIdentityReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.NoteEntry.NoteEntry;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.NoteEntry.NoteEntryReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.PropertyFacet.PropertyFacet;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.PropertyFacet.PropertyFacetReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Project.Project;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Project.ProjectReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.HostCluster.HostCluster;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.HostCluster.HostClusterReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Glossary.Glossary;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Glossary.GlossaryReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GlossaryCategory.GlossaryCategory;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GlossaryCategory.GlossaryCategoryReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MediaCollection.MediaCollection;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MediaCollection.MediaCollectionReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Collection.Collection;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Collection.CollectionReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.InformalTag.InformalTag;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.InformalTag.InformalTagReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceZone.GovernanceZone;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceZone.GovernanceZoneReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Person.Person;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Person.PersonReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Application.Application;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Application.ApplicationReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.VirtualContainer.VirtualContainer;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.VirtualContainer.VirtualContainerReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceDriver.GovernanceDriver;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceDriver.GovernanceDriverReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Meeting.Meeting;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Meeting.MeetingReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Rating.Rating;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Rating.RatingReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ProjectCharter.ProjectCharter;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ProjectCharter.ProjectCharterReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SoftwareServerCapability.SoftwareServerCapability;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SoftwareServerCapability.SoftwareServerCapabilityReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.LicenseType.LicenseType;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.LicenseType.LicenseTypeReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GraphVertex.GraphVertex;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GraphVertex.GraphVertexReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GlossaryTerm.GlossaryTerm;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GlossaryTerm.GlossaryTermReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Team.Team;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Team.TeamReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MetadataCollection.MetadataCollection;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MetadataCollection.MetadataCollectionReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceControl.GovernanceControl;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceControl.GovernanceControlReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Topic.Topic;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Topic.TopicReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SoftwareServer.SoftwareServer;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SoftwareServer.SoftwareServerReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DeployedAPI.DeployedAPI;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.DeployedAPI.DeployedAPIReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MediaFile.MediaFile;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MediaFile.MediaFileReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Comment.Comment;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Comment.CommentReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.RelatedMedia.RelatedMedia;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.RelatedMedia.RelatedMediaReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ConnectorType.ConnectorType;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ConnectorType.ConnectorTypeReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.CohortMember.CohortMember;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.CohortMember.CohortMemberReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ComplexSchemaType.ComplexSchemaType;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ComplexSchemaType.ComplexSchemaTypeReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceMetric.GovernanceMetric;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceMetric.GovernanceMetricReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ExternalId.ExternalId;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ExternalId.ExternalIdReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Connection.Connection;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Connection.ConnectionReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Host.Host;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Host.HostReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SubscriberList.SubscriberList;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SubscriberList.SubscriberListReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceRule.GovernanceRule;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceRule.GovernanceRuleReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MetadataRepositoryCohort.MetadataRepositoryCohort;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.MetadataRepositoryCohort.MetadataRepositoryCohortReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.NoteLog.NoteLog;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.NoteLog.NoteLogReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ExternalGlossaryLink.ExternalGlossaryLink;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.ExternalGlossaryLink.ExternalGlossaryLinkReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.VirtualConnection.VirtualConnection;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.VirtualConnection.VirtualConnectionReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Regulation.Regulation;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Regulation.RegulationReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceProcess.GovernanceProcess;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GovernanceProcess.GovernanceProcessReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SchemaAttribute.SchemaAttribute;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SchemaAttribute.SchemaAttributeReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GraphEdge.GraphEdge;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.GraphEdge.GraphEdgeReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Community.Community;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Community.CommunityReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Location.Location;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.Location.LocationReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.BusinessCapability.BusinessCapability;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.BusinessCapability.BusinessCapabilityReferences;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SchemaLinkElement.SchemaLinkElement;
import org.odpi.openmetadata.accessservices.subjectarea.generated.entities.SchemaLinkElement.SchemaLinkElementReferences;

 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.UsedInContext.UsedInContext;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.Leadership.Leadership;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AttachedComment.AttachedComment;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ContactThrough.ContactThrough;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.License.License;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ZoneGovernance.ZoneGovernance;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.FolderHierarchy.FolderHierarchy;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.HostClusterMember.HostClusterMember;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.LibraryCategoryReference.LibraryCategoryReference;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProjectCharterLink.ProjectCharterLink;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProfileIdentity.ProfileIdentity;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ToDoSource.ToDoSource;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.Translation.Translation;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.SchemaLinkToType.SchemaLinkToType;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.CommunityResources.CommunityResources;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.DataContentForDataSet.DataContentForDataSet;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ServerEndpoint.ServerEndpoint;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ExternalIdLink.ExternalIdLink;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.CategoryHierarchyLink.CategoryHierarchyLink;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.PreferredTerm.PreferredTerm;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProjectHierarchy.ProjectHierarchy;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.DeployedVirtualContainer.DeployedVirtualContainer;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProjectMeeting.ProjectMeeting;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernanceResults.GovernanceResults;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.APIResponse.APIResponse;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ServerSupportedCapability.ServerSupportedCapability;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.CollectionMember.CollectionMember;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.HostNetwork.HostNetwork;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AttributeForSchema.AttributeForSchema;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AssetLocation.AssetLocation;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.SchemaAttributeType.SchemaAttributeType;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernanceImplementation.GovernanceImplementation;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.LinkedMedia.LinkedMedia;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.MapToElementType.MapToElementType;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ExternallySourcedGlossary.ExternallySourcedGlossary;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ExternalReferenceLink.ExternalReferenceLink;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.MediaReference.MediaReference;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.CommunityMembership.CommunityMembership;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ExternalIdScope.ExternalIdScope;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ValidValue.ValidValue;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AcceptedAnswer.AcceptedAnswer;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernanceDefinitionMetric.GovernanceDefinitionMetric;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.SchemaQueryImplementation.SchemaQueryImplementation;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AssetSchemaType.AssetSchemaType;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProjectDependency.ProjectDependency;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.TopicSubscribers.TopicSubscribers;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ReplacementTerm.ReplacementTerm;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.OrganizationalCapability.OrganizationalCapability;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.MetadataCohortPeer.MetadataCohortPeer;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AttachedNoteLogEntry.AttachedNoteLogEntry;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AssetServerUse.AssetServerUse;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.RuntimeForProcess.RuntimeForProcess;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.NestedLocation.NestedLocation;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.StaffAssignment.StaffAssignment;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.LinkedFile.LinkedFile;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.TermCategorization.TermCategorization;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ZoneMembership.ZoneMembership;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.APIEndpoint.APIEndpoint;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ConnectionEndpoint.ConnectionEndpoint;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.CategoryAnchor.CategoryAnchor;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProjectTeam.ProjectTeam;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProcessOutput.ProcessOutput;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.APIOperations.APIOperations;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernancePolicyLink.GovernancePolicyLink;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ResponsibilityStaffContact.ResponsibilityStaffContact;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.Peer.Peer;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.TermTYPEDBYRelationship.TermTYPEDBYRelationship;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.MapFromElementType.MapFromElementType;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.Certification.Certification;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.NetworkGatewayLink.NetworkGatewayLink;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ConnectionConnectorType.ConnectionConnectorType;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.Synonym.Synonym;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.Antonym.Antonym;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GraphEdgeLink.GraphEdgeLink;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ToDoOnReferenceable.ToDoOnReferenceable;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProjectScope.ProjectScope;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ISARelationship.ISARelationship;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.TermISATypeOFRelationship.TermISATypeOFRelationship;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.Contributor.Contributor;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.EmbeddedConnection.EmbeddedConnection;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernanceControlLink.GovernanceControlLink;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AttachedRating.AttachedRating;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AttachedNoteLog.AttachedNoteLog;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ConnectionToAsset.ConnectionToAsset;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.RegulationCertificationType.RegulationCertificationType;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.LinkedType.LinkedType;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernanceRuleImplementation.GovernanceRuleImplementation;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AdjacentLocation.AdjacentLocation;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.SemanticAssignment.SemanticAssignment;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.HostLocation.HostLocation;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ServerDeployment.ServerDeployment;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.RelatedTerm.RelatedTerm;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.SchemaTypeImplementation.SchemaTypeImplementation;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProcessInput.ProcessInput;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.APIHeader.APIHeader;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.MeetingOnReferenceable.MeetingOnReferenceable;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AttachedTag.AttachedTag;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.TermHASARelationship.TermHASARelationship;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernanceProcessImplementation.GovernanceProcessImplementation;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GroupedMedia.GroupedMedia;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.GovernanceResponse.GovernanceResponse;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.NestedFile.NestedFile;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.HostOperatingPlatform.HostOperatingPlatform;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ActorCollection.ActorCollection;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.TermAnchor.TermAnchor;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ProjectResources.ProjectResources;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.APIRequest.APIRequest;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.SoftwareComponentDeployment.SoftwareComponentDeployment;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.CohortMemberMetadataCollection.CohortMemberMetadataCollection;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.ReferenceableFacet.ReferenceableFacet;
 import org.odpi.openmetadata.accessservices.subjectarea.generated.relationships.AttachedLike.AttachedLike;

public class TestSubjectAreaBeansToAccessOMRS {

    @Mock
    private OMRSAPIHelper oMRSAPIHelper;

    @BeforeMethod

    public void setup() throws Exception{
        MockitoAnnotations.initMocks(this);
    }
@Test
    public void testCreateCertificationType() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateCertificationType";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String details = "string0";
        primitivePropertyValue.setPrimitiveValue(details);
        instanceProperties.setProperty("details", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String title = "string1";
        primitivePropertyValue.setPrimitiveValue(title);
        instanceProperties.setProperty("title", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String summary = "string2";
        primitivePropertyValue.setPrimitiveValue(summary);
        instanceProperties.setProperty("summary", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string3";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String scope = "string4";
        primitivePropertyValue.setPrimitiveValue(scope);
        instanceProperties.setProperty("scope", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String priority = "string5";
        primitivePropertyValue.setPrimitiveValue(priority);
        instanceProperties.setProperty("priority", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string9";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String implications = "string6";
        primitivePropertyValue.setPrimitiveValue(implications);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("implications", arrayPropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String outcomes = "string7";
        primitivePropertyValue.setPrimitiveValue(outcomes);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("outcomes", arrayPropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String results = "string8";
        primitivePropertyValue.setPrimitiveValue(results);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("results", arrayPropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", enumPropertyValue);

        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("CertificationType");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        CertificationType requestedCertificationType = new CertificationType();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedCertificationType.setSystemAttributes(systemAttributes);

        requestedCertificationType.setDetails(details);

        requestedCertificationType.setTitle(title);

        requestedCertificationType.setSummary(summary);

        requestedCertificationType.setDescription(description);

        requestedCertificationType.setScope(scope);

        requestedCertificationType.setPriority(priority);

        requestedCertificationType.setQualifiedName(qualifiedName);

        EnumPropertyValue GovernanceDomainEnumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        GovernanceDomainEnumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", GovernanceDomainEnumPropertyValue);

        requestedCertificationType.setDomain(GovernanceDomain.values()[0]);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedCertificationType.setAdditionalProperties(mapValue);
        CertificationType returnedCertificationType = subjectAreaBeansToAccessOMRS.createCertificationType(testuserid, requestedCertificationType);
        assertEquals(requestedCertificationType.getDetails(),returnedCertificationType.getDetails());

        assertEquals(requestedCertificationType.getTitle(),returnedCertificationType.getTitle());

        assertEquals(requestedCertificationType.getSummary(),returnedCertificationType.getSummary());

        assertEquals(requestedCertificationType.getDescription(),returnedCertificationType.getDescription());

        assertEquals(requestedCertificationType.getScope(),returnedCertificationType.getScope());

        assertEquals(requestedCertificationType.getPriority(),returnedCertificationType.getPriority());

        assertEquals(requestedCertificationType.getQualifiedName(),returnedCertificationType.getQualifiedName());

        assertEquals(requestedCertificationType.getDomain(),returnedCertificationType.getDomain());

        assertEquals(requestedCertificationType.getAdditionalProperties(),returnedCertificationType.getAdditionalProperties());

    }    
    @Test
    public void testGetCertificationTypeById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-CertificationType-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String details = "string0";
        primitivePropertyValue.setPrimitiveValue(details);
        instanceProperties.setProperty("details", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String title = "string1";
        primitivePropertyValue.setPrimitiveValue(title);
        instanceProperties.setProperty("title", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String summary = "string2";
        primitivePropertyValue.setPrimitiveValue(summary);
        instanceProperties.setProperty("summary", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string3";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String scope = "string4";
        primitivePropertyValue.setPrimitiveValue(scope);
        instanceProperties.setProperty("scope", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String priority = "string5";
        primitivePropertyValue.setPrimitiveValue(priority);
        instanceProperties.setProperty("priority", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string9";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", enumPropertyValue);

        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("CertificationType");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        CertificationType certificationTypeEntity = subjectAreaBeansToAccessOMRS.getCertificationTypeById(testuserid, testguid1);
        assertEquals(certificationTypeEntity.getDetails(),details);
        assertEquals(certificationTypeEntity.getTitle(),title);
        assertEquals(certificationTypeEntity.getSummary(),summary);
        assertEquals(certificationTypeEntity.getDescription(),description);
        assertEquals(certificationTypeEntity.getScope(),scope);
        assertEquals(certificationTypeEntity.getPriority(),priority);
        assertEquals(certificationTypeEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateCertificationType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateCertificationType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String details = "string0";
            primitivePropertyValue.setPrimitiveValue(details);
            instanceProperties.setProperty("details", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String title = "string1";
            primitivePropertyValue.setPrimitiveValue(title);
            instanceProperties.setProperty("title", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String summary = "string2";
            primitivePropertyValue.setPrimitiveValue(summary);
            instanceProperties.setProperty("summary", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string3";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String scope = "string4";
            primitivePropertyValue.setPrimitiveValue(scope);
            instanceProperties.setProperty("scope", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String priority = "string5";
            primitivePropertyValue.setPrimitiveValue(priority);
            instanceProperties.setProperty("priority", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string9";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
            instanceProperties.setProperty("domain", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("CertificationType");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            CertificationType requestedCertificationType = new CertificationType();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedCertificationType.setSystemAttributes(systemAttributes);

            requestedCertificationType.setDetails(details);

            requestedCertificationType.setTitle(title);

            requestedCertificationType.setSummary(summary);

            requestedCertificationType.setDescription(description);

            requestedCertificationType.setScope(scope);

            requestedCertificationType.setPriority(priority);

            requestedCertificationType.setQualifiedName(qualifiedName);

            EnumPropertyValue GovernanceDomainEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            GovernanceDomainEnumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
            instanceProperties.setProperty("domain", GovernanceDomainEnumPropertyValue);

            requestedCertificationType.setDomain(GovernanceDomain.values()[0]);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedCertificationType.setAdditionalProperties(mapValue);
            CertificationType returnedCertificationType = subjectAreaBeansToAccessOMRS.updateCertificationType(testuserid,requestedCertificationType);
            assertEquals(requestedCertificationType.getDetails(),returnedCertificationType.getDetails());

            assertEquals(requestedCertificationType.getTitle(),returnedCertificationType.getTitle());

            assertEquals(requestedCertificationType.getSummary(),returnedCertificationType.getSummary());

            assertEquals(requestedCertificationType.getDescription(),returnedCertificationType.getDescription());

            assertEquals(requestedCertificationType.getScope(),returnedCertificationType.getScope());

            assertEquals(requestedCertificationType.getPriority(),returnedCertificationType.getPriority());

            assertEquals(requestedCertificationType.getQualifiedName(),returnedCertificationType.getQualifiedName());

            assertEquals(requestedCertificationType.getDomain(),returnedCertificationType.getDomain());

            assertEquals(requestedCertificationType.getAdditionalProperties(),returnedCertificationType.getAdditionalProperties());

        }
@Test
    public void testCreateAPISchemaType() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateAPISchemaType";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string0";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("APISchemaType");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        APISchemaType requestedAPISchemaType = new APISchemaType();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedAPISchemaType.setSystemAttributes(systemAttributes);

        requestedAPISchemaType.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedAPISchemaType.setAdditionalProperties(mapValue);
        APISchemaType returnedAPISchemaType = subjectAreaBeansToAccessOMRS.createAPISchemaType(testuserid, requestedAPISchemaType);
        assertEquals(requestedAPISchemaType.getQualifiedName(),returnedAPISchemaType.getQualifiedName());

        assertEquals(requestedAPISchemaType.getAdditionalProperties(),returnedAPISchemaType.getAdditionalProperties());

    }    
    @Test
    public void testGetAPISchemaTypeById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-APISchemaType-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string0";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("APISchemaType");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        APISchemaType aPISchemaTypeEntity = subjectAreaBeansToAccessOMRS.getAPISchemaTypeById(testuserid, testguid1);
        assertEquals(aPISchemaTypeEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateAPISchemaType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateAPISchemaType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string0";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("APISchemaType");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            APISchemaType requestedAPISchemaType = new APISchemaType();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedAPISchemaType.setSystemAttributes(systemAttributes);

            requestedAPISchemaType.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedAPISchemaType.setAdditionalProperties(mapValue);
            APISchemaType returnedAPISchemaType = subjectAreaBeansToAccessOMRS.updateAPISchemaType(testuserid,requestedAPISchemaType);
            assertEquals(requestedAPISchemaType.getQualifiedName(),returnedAPISchemaType.getQualifiedName());

            assertEquals(requestedAPISchemaType.getAdditionalProperties(),returnedAPISchemaType.getAdditionalProperties());

        }
@Test
    public void testCreateDataSet() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateDataSet";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string2";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("DataSet");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        DataSet requestedDataSet = new DataSet();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedDataSet.setSystemAttributes(systemAttributes);

        requestedDataSet.setName(name);

        requestedDataSet.setDescription(description);

        requestedDataSet.setOwner(owner);

        requestedDataSet.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedDataSet.setAdditionalProperties(mapValue);
        DataSet returnedDataSet = subjectAreaBeansToAccessOMRS.createDataSet(testuserid, requestedDataSet);
        assertEquals(requestedDataSet.getName(),returnedDataSet.getName());

        assertEquals(requestedDataSet.getDescription(),returnedDataSet.getDescription());

        assertEquals(requestedDataSet.getOwner(),returnedDataSet.getOwner());

        assertEquals(requestedDataSet.getQualifiedName(),returnedDataSet.getQualifiedName());

        assertEquals(requestedDataSet.getAdditionalProperties(),returnedDataSet.getAdditionalProperties());

    }    
    @Test
    public void testGetDataSetById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-DataSet-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string2";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("DataSet");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        DataSet dataSetEntity = subjectAreaBeansToAccessOMRS.getDataSetById(testuserid, testguid1);
        assertEquals(dataSetEntity.getName(),name);
        assertEquals(dataSetEntity.getDescription(),description);
        assertEquals(dataSetEntity.getOwner(),owner);
        assertEquals(dataSetEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateDataSet() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateDataSet";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String owner = "string2";
            primitivePropertyValue.setPrimitiveValue(owner);
            instanceProperties.setProperty("owner", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string3";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("DataSet");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            DataSet requestedDataSet = new DataSet();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedDataSet.setSystemAttributes(systemAttributes);

            requestedDataSet.setName(name);

            requestedDataSet.setDescription(description);

            requestedDataSet.setOwner(owner);

            requestedDataSet.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedDataSet.setAdditionalProperties(mapValue);
            DataSet returnedDataSet = subjectAreaBeansToAccessOMRS.updateDataSet(testuserid,requestedDataSet);
            assertEquals(requestedDataSet.getName(),returnedDataSet.getName());

            assertEquals(requestedDataSet.getDescription(),returnedDataSet.getDescription());

            assertEquals(requestedDataSet.getOwner(),returnedDataSet.getOwner());

            assertEquals(requestedDataSet.getQualifiedName(),returnedDataSet.getQualifiedName());

            assertEquals(requestedDataSet.getAdditionalProperties(),returnedDataSet.getAdditionalProperties());

        }
@Test
    public void testCreateOperatingPlatform() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateOperatingPlatform";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String operatingSystem = "string2";
        primitivePropertyValue.setPrimitiveValue(operatingSystem);
        instanceProperties.setProperty("operatingSystem", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String endianness = "string3";
        primitivePropertyValue.setPrimitiveValue(endianness);
        instanceProperties.setProperty("endianness", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("OperatingPlatform");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        OperatingPlatform requestedOperatingPlatform = new OperatingPlatform();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedOperatingPlatform.setSystemAttributes(systemAttributes);

        requestedOperatingPlatform.setName(name);

        requestedOperatingPlatform.setDescription(description);

        requestedOperatingPlatform.setOperatingSystem(operatingSystem);

        requestedOperatingPlatform.setEndianness(endianness);

        Map<String,String>  mapValue=null;

        OperatingPlatform returnedOperatingPlatform = subjectAreaBeansToAccessOMRS.createOperatingPlatform(testuserid, requestedOperatingPlatform);
        assertEquals(requestedOperatingPlatform.getName(),returnedOperatingPlatform.getName());

        assertEquals(requestedOperatingPlatform.getDescription(),returnedOperatingPlatform.getDescription());

        assertEquals(requestedOperatingPlatform.getOperatingSystem(),returnedOperatingPlatform.getOperatingSystem());

        assertEquals(requestedOperatingPlatform.getEndianness(),returnedOperatingPlatform.getEndianness());

    }    
    @Test
    public void testGetOperatingPlatformById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-OperatingPlatform-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String operatingSystem = "string2";
        primitivePropertyValue.setPrimitiveValue(operatingSystem);
        instanceProperties.setProperty("operatingSystem", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String endianness = "string3";
        primitivePropertyValue.setPrimitiveValue(endianness);
        instanceProperties.setProperty("endianness", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("OperatingPlatform");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        OperatingPlatform operatingPlatformEntity = subjectAreaBeansToAccessOMRS.getOperatingPlatformById(testuserid, testguid1);
        assertEquals(operatingPlatformEntity.getName(),name);
        assertEquals(operatingPlatformEntity.getDescription(),description);
        assertEquals(operatingPlatformEntity.getOperatingSystem(),operatingSystem);
        assertEquals(operatingPlatformEntity.getEndianness(),endianness);
    }
    @Test
        public void testUpdateOperatingPlatform() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateOperatingPlatform";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String operatingSystem = "string2";
            primitivePropertyValue.setPrimitiveValue(operatingSystem);
            instanceProperties.setProperty("operatingSystem", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String endianness = "string3";
            primitivePropertyValue.setPrimitiveValue(endianness);
            instanceProperties.setProperty("endianness", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("OperatingPlatform");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            OperatingPlatform requestedOperatingPlatform = new OperatingPlatform();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedOperatingPlatform.setSystemAttributes(systemAttributes);

            requestedOperatingPlatform.setName(name);

            requestedOperatingPlatform.setDescription(description);

            requestedOperatingPlatform.setOperatingSystem(operatingSystem);

            requestedOperatingPlatform.setEndianness(endianness);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            OperatingPlatform returnedOperatingPlatform = subjectAreaBeansToAccessOMRS.updateOperatingPlatform(testuserid,requestedOperatingPlatform);
            assertEquals(requestedOperatingPlatform.getName(),returnedOperatingPlatform.getName());

            assertEquals(requestedOperatingPlatform.getDescription(),returnedOperatingPlatform.getDescription());

            assertEquals(requestedOperatingPlatform.getOperatingSystem(),returnedOperatingPlatform.getOperatingSystem());

            assertEquals(requestedOperatingPlatform.getEndianness(),returnedOperatingPlatform.getEndianness());

        }
@Test
    public void testCreateGovernancePolicy() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateGovernancePolicy";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String title = "string0";
        primitivePropertyValue.setPrimitiveValue(title);
        instanceProperties.setProperty("title", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String summary = "string1";
        primitivePropertyValue.setPrimitiveValue(summary);
        instanceProperties.setProperty("summary", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string2";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String scope = "string3";
        primitivePropertyValue.setPrimitiveValue(scope);
        instanceProperties.setProperty("scope", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String priority = "string4";
        primitivePropertyValue.setPrimitiveValue(priority);
        instanceProperties.setProperty("priority", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string8";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String implications = "string5";
        primitivePropertyValue.setPrimitiveValue(implications);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("implications", arrayPropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String outcomes = "string6";
        primitivePropertyValue.setPrimitiveValue(outcomes);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("outcomes", arrayPropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String results = "string7";
        primitivePropertyValue.setPrimitiveValue(results);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("results", arrayPropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", enumPropertyValue);

        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GovernancePolicy");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GovernancePolicy requestedGovernancePolicy = new GovernancePolicy();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedGovernancePolicy.setSystemAttributes(systemAttributes);

        requestedGovernancePolicy.setTitle(title);

        requestedGovernancePolicy.setSummary(summary);

        requestedGovernancePolicy.setDescription(description);

        requestedGovernancePolicy.setScope(scope);

        requestedGovernancePolicy.setPriority(priority);

        requestedGovernancePolicy.setQualifiedName(qualifiedName);

        EnumPropertyValue GovernanceDomainEnumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        GovernanceDomainEnumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", GovernanceDomainEnumPropertyValue);

        requestedGovernancePolicy.setDomain(GovernanceDomain.values()[0]);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedGovernancePolicy.setAdditionalProperties(mapValue);
        GovernancePolicy returnedGovernancePolicy = subjectAreaBeansToAccessOMRS.createGovernancePolicy(testuserid, requestedGovernancePolicy);
        assertEquals(requestedGovernancePolicy.getTitle(),returnedGovernancePolicy.getTitle());

        assertEquals(requestedGovernancePolicy.getSummary(),returnedGovernancePolicy.getSummary());

        assertEquals(requestedGovernancePolicy.getDescription(),returnedGovernancePolicy.getDescription());

        assertEquals(requestedGovernancePolicy.getScope(),returnedGovernancePolicy.getScope());

        assertEquals(requestedGovernancePolicy.getPriority(),returnedGovernancePolicy.getPriority());

        assertEquals(requestedGovernancePolicy.getQualifiedName(),returnedGovernancePolicy.getQualifiedName());

        assertEquals(requestedGovernancePolicy.getDomain(),returnedGovernancePolicy.getDomain());

        assertEquals(requestedGovernancePolicy.getAdditionalProperties(),returnedGovernancePolicy.getAdditionalProperties());

    }    
    @Test
    public void testGetGovernancePolicyById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-GovernancePolicy-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String title = "string0";
        primitivePropertyValue.setPrimitiveValue(title);
        instanceProperties.setProperty("title", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String summary = "string1";
        primitivePropertyValue.setPrimitiveValue(summary);
        instanceProperties.setProperty("summary", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string2";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String scope = "string3";
        primitivePropertyValue.setPrimitiveValue(scope);
        instanceProperties.setProperty("scope", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String priority = "string4";
        primitivePropertyValue.setPrimitiveValue(priority);
        instanceProperties.setProperty("priority", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string8";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", enumPropertyValue);

        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GovernancePolicy");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GovernancePolicy governancePolicyEntity = subjectAreaBeansToAccessOMRS.getGovernancePolicyById(testuserid, testguid1);
        assertEquals(governancePolicyEntity.getTitle(),title);
        assertEquals(governancePolicyEntity.getSummary(),summary);
        assertEquals(governancePolicyEntity.getDescription(),description);
        assertEquals(governancePolicyEntity.getScope(),scope);
        assertEquals(governancePolicyEntity.getPriority(),priority);
        assertEquals(governancePolicyEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateGovernancePolicy() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGovernancePolicy";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String title = "string0";
            primitivePropertyValue.setPrimitiveValue(title);
            instanceProperties.setProperty("title", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String summary = "string1";
            primitivePropertyValue.setPrimitiveValue(summary);
            instanceProperties.setProperty("summary", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string2";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String scope = "string3";
            primitivePropertyValue.setPrimitiveValue(scope);
            instanceProperties.setProperty("scope", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String priority = "string4";
            primitivePropertyValue.setPrimitiveValue(priority);
            instanceProperties.setProperty("priority", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string8";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
            instanceProperties.setProperty("domain", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("GovernancePolicy");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernancePolicy requestedGovernancePolicy = new GovernancePolicy();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedGovernancePolicy.setSystemAttributes(systemAttributes);

            requestedGovernancePolicy.setTitle(title);

            requestedGovernancePolicy.setSummary(summary);

            requestedGovernancePolicy.setDescription(description);

            requestedGovernancePolicy.setScope(scope);

            requestedGovernancePolicy.setPriority(priority);

            requestedGovernancePolicy.setQualifiedName(qualifiedName);

            EnumPropertyValue GovernanceDomainEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            GovernanceDomainEnumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
            instanceProperties.setProperty("domain", GovernanceDomainEnumPropertyValue);

            requestedGovernancePolicy.setDomain(GovernanceDomain.values()[0]);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedGovernancePolicy.setAdditionalProperties(mapValue);
            GovernancePolicy returnedGovernancePolicy = subjectAreaBeansToAccessOMRS.updateGovernancePolicy(testuserid,requestedGovernancePolicy);
            assertEquals(requestedGovernancePolicy.getTitle(),returnedGovernancePolicy.getTitle());

            assertEquals(requestedGovernancePolicy.getSummary(),returnedGovernancePolicy.getSummary());

            assertEquals(requestedGovernancePolicy.getDescription(),returnedGovernancePolicy.getDescription());

            assertEquals(requestedGovernancePolicy.getScope(),returnedGovernancePolicy.getScope());

            assertEquals(requestedGovernancePolicy.getPriority(),returnedGovernancePolicy.getPriority());

            assertEquals(requestedGovernancePolicy.getQualifiedName(),returnedGovernancePolicy.getQualifiedName());

            assertEquals(requestedGovernancePolicy.getDomain(),returnedGovernancePolicy.getDomain());

            assertEquals(requestedGovernancePolicy.getAdditionalProperties(),returnedGovernancePolicy.getAdditionalProperties());

        }
@Test
    public void testCreateDerivedSchemaAttribute() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateDerivedSchemaAttribute";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String formula = "string0";
        primitivePropertyValue.setPrimitiveValue(formula);
        instanceProperties.setProperty("formula", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string1";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_INT);
        Integer position = new Integer(2);
        primitivePropertyValue.setPrimitiveValue(position);
        instanceProperties.setProperty("position", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String cardinality = "string3";
        primitivePropertyValue.setPrimitiveValue(cardinality);
        instanceProperties.setProperty("cardinality", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String defaultValueOverride = "string4";
        primitivePropertyValue.setPrimitiveValue(defaultValueOverride);
        instanceProperties.setProperty("defaultValueOverride", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("DerivedSchemaAttribute");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        DerivedSchemaAttribute requestedDerivedSchemaAttribute = new DerivedSchemaAttribute();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedDerivedSchemaAttribute.setSystemAttributes(systemAttributes);

        requestedDerivedSchemaAttribute.setFormula(formula);

        requestedDerivedSchemaAttribute.setName(name);

        requestedDerivedSchemaAttribute.setPosition(position);

        requestedDerivedSchemaAttribute.setCardinality(cardinality);

        requestedDerivedSchemaAttribute.setDefaultValueOverride(defaultValueOverride);

        requestedDerivedSchemaAttribute.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedDerivedSchemaAttribute.setAdditionalProperties(mapValue);
        DerivedSchemaAttribute returnedDerivedSchemaAttribute = subjectAreaBeansToAccessOMRS.createDerivedSchemaAttribute(testuserid, requestedDerivedSchemaAttribute);
        assertEquals(requestedDerivedSchemaAttribute.getFormula(),returnedDerivedSchemaAttribute.getFormula());

        assertEquals(requestedDerivedSchemaAttribute.getName(),returnedDerivedSchemaAttribute.getName());

        assertEquals(requestedDerivedSchemaAttribute.getPosition(),returnedDerivedSchemaAttribute.getPosition());

        assertEquals(requestedDerivedSchemaAttribute.getCardinality(),returnedDerivedSchemaAttribute.getCardinality());

        assertEquals(requestedDerivedSchemaAttribute.getDefaultValueOverride(),returnedDerivedSchemaAttribute.getDefaultValueOverride());

        assertEquals(requestedDerivedSchemaAttribute.getQualifiedName(),returnedDerivedSchemaAttribute.getQualifiedName());

        assertEquals(requestedDerivedSchemaAttribute.getAdditionalProperties(),returnedDerivedSchemaAttribute.getAdditionalProperties());

    }    
    @Test
    public void testGetDerivedSchemaAttributeById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-DerivedSchemaAttribute-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String formula = "string0";
        primitivePropertyValue.setPrimitiveValue(formula);
        instanceProperties.setProperty("formula", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string1";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_INT);
        Integer position = new Integer(2);
        primitivePropertyValue.setPrimitiveValue(position);
        instanceProperties.setProperty("position", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String cardinality = "string3";
        primitivePropertyValue.setPrimitiveValue(cardinality);
        instanceProperties.setProperty("cardinality", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String defaultValueOverride = "string4";
        primitivePropertyValue.setPrimitiveValue(defaultValueOverride);
        instanceProperties.setProperty("defaultValueOverride", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("DerivedSchemaAttribute");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        DerivedSchemaAttribute derivedSchemaAttributeEntity = subjectAreaBeansToAccessOMRS.getDerivedSchemaAttributeById(testuserid, testguid1);
        assertEquals(derivedSchemaAttributeEntity.getFormula(),formula);
        assertEquals(derivedSchemaAttributeEntity.getName(),name);
        assertEquals(derivedSchemaAttributeEntity.getPosition(),position);
        assertEquals(derivedSchemaAttributeEntity.getCardinality(),cardinality);
        assertEquals(derivedSchemaAttributeEntity.getDefaultValueOverride(),defaultValueOverride);
        assertEquals(derivedSchemaAttributeEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateDerivedSchemaAttribute() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateDerivedSchemaAttribute";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String formula = "string0";
            primitivePropertyValue.setPrimitiveValue(formula);
            instanceProperties.setProperty("formula", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string1";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_INT);
            Integer position = new Integer(2);
            primitivePropertyValue.setPrimitiveValue(position);
            instanceProperties.setProperty("position", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String cardinality = "string3";
            primitivePropertyValue.setPrimitiveValue(cardinality);
            instanceProperties.setProperty("cardinality", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String defaultValueOverride = "string4";
            primitivePropertyValue.setPrimitiveValue(defaultValueOverride);
            instanceProperties.setProperty("defaultValueOverride", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string5";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("DerivedSchemaAttribute");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            DerivedSchemaAttribute requestedDerivedSchemaAttribute = new DerivedSchemaAttribute();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedDerivedSchemaAttribute.setSystemAttributes(systemAttributes);

            requestedDerivedSchemaAttribute.setFormula(formula);

            requestedDerivedSchemaAttribute.setName(name);

            requestedDerivedSchemaAttribute.setPosition(position);

            requestedDerivedSchemaAttribute.setCardinality(cardinality);

            requestedDerivedSchemaAttribute.setDefaultValueOverride(defaultValueOverride);

            requestedDerivedSchemaAttribute.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedDerivedSchemaAttribute.setAdditionalProperties(mapValue);
            DerivedSchemaAttribute returnedDerivedSchemaAttribute = subjectAreaBeansToAccessOMRS.updateDerivedSchemaAttribute(testuserid,requestedDerivedSchemaAttribute);
            assertEquals(requestedDerivedSchemaAttribute.getFormula(),returnedDerivedSchemaAttribute.getFormula());

            assertEquals(requestedDerivedSchemaAttribute.getName(),returnedDerivedSchemaAttribute.getName());

            assertEquals(requestedDerivedSchemaAttribute.getPosition(),returnedDerivedSchemaAttribute.getPosition());

            assertEquals(requestedDerivedSchemaAttribute.getCardinality(),returnedDerivedSchemaAttribute.getCardinality());

            assertEquals(requestedDerivedSchemaAttribute.getDefaultValueOverride(),returnedDerivedSchemaAttribute.getDefaultValueOverride());

            assertEquals(requestedDerivedSchemaAttribute.getQualifiedName(),returnedDerivedSchemaAttribute.getQualifiedName());

            assertEquals(requestedDerivedSchemaAttribute.getAdditionalProperties(),returnedDerivedSchemaAttribute.getAdditionalProperties());

        }
@Test
    public void testCreateProcess() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateProcess";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string2";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Process");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Process requestedProcess = new Process();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedProcess.setSystemAttributes(systemAttributes);

        requestedProcess.setName(name);

        requestedProcess.setDescription(description);

        requestedProcess.setOwner(owner);

        requestedProcess.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedProcess.setAdditionalProperties(mapValue);
        Process returnedProcess = subjectAreaBeansToAccessOMRS.createProcess(testuserid, requestedProcess);
        assertEquals(requestedProcess.getName(),returnedProcess.getName());

        assertEquals(requestedProcess.getDescription(),returnedProcess.getDescription());

        assertEquals(requestedProcess.getOwner(),returnedProcess.getOwner());

        assertEquals(requestedProcess.getQualifiedName(),returnedProcess.getQualifiedName());

        assertEquals(requestedProcess.getAdditionalProperties(),returnedProcess.getAdditionalProperties());

    }    
    @Test
    public void testGetProcessById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-Process-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string2";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Process");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Process processEntity = subjectAreaBeansToAccessOMRS.getProcessById(testuserid, testguid1);
        assertEquals(processEntity.getName(),name);
        assertEquals(processEntity.getDescription(),description);
        assertEquals(processEntity.getOwner(),owner);
        assertEquals(processEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateProcess() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateProcess";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String owner = "string2";
            primitivePropertyValue.setPrimitiveValue(owner);
            instanceProperties.setProperty("owner", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string3";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("Process");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Process requestedProcess = new Process();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedProcess.setSystemAttributes(systemAttributes);

            requestedProcess.setName(name);

            requestedProcess.setDescription(description);

            requestedProcess.setOwner(owner);

            requestedProcess.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedProcess.setAdditionalProperties(mapValue);
            Process returnedProcess = subjectAreaBeansToAccessOMRS.updateProcess(testuserid,requestedProcess);
            assertEquals(requestedProcess.getName(),returnedProcess.getName());

            assertEquals(requestedProcess.getDescription(),returnedProcess.getDescription());

            assertEquals(requestedProcess.getOwner(),returnedProcess.getOwner());

            assertEquals(requestedProcess.getQualifiedName(),returnedProcess.getQualifiedName());

            assertEquals(requestedProcess.getAdditionalProperties(),returnedProcess.getAdditionalProperties());

        }
@Test
    public void testCreateMapSchemaType() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateMapSchemaType";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String versionNumber = "string1";
        primitivePropertyValue.setPrimitiveValue(versionNumber);
        instanceProperties.setProperty("versionNumber", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String author = "string2";
        primitivePropertyValue.setPrimitiveValue(author);
        instanceProperties.setProperty("author", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String usage = "string3";
        primitivePropertyValue.setPrimitiveValue(usage);
        instanceProperties.setProperty("usage", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String encodingStandard = "string4";
        primitivePropertyValue.setPrimitiveValue(encodingStandard);
        instanceProperties.setProperty("encodingStandard", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("MapSchemaType");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        MapSchemaType requestedMapSchemaType = new MapSchemaType();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedMapSchemaType.setSystemAttributes(systemAttributes);

        requestedMapSchemaType.setDisplayName(displayName);

        requestedMapSchemaType.setVersionNumber(versionNumber);

        requestedMapSchemaType.setAuthor(author);

        requestedMapSchemaType.setUsage(usage);

        requestedMapSchemaType.setEncodingStandard(encodingStandard);

        requestedMapSchemaType.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedMapSchemaType.setAdditionalProperties(mapValue);
        MapSchemaType returnedMapSchemaType = subjectAreaBeansToAccessOMRS.createMapSchemaType(testuserid, requestedMapSchemaType);
        assertEquals(requestedMapSchemaType.getDisplayName(),returnedMapSchemaType.getDisplayName());

        assertEquals(requestedMapSchemaType.getVersionNumber(),returnedMapSchemaType.getVersionNumber());

        assertEquals(requestedMapSchemaType.getAuthor(),returnedMapSchemaType.getAuthor());

        assertEquals(requestedMapSchemaType.getUsage(),returnedMapSchemaType.getUsage());

        assertEquals(requestedMapSchemaType.getEncodingStandard(),returnedMapSchemaType.getEncodingStandard());

        assertEquals(requestedMapSchemaType.getQualifiedName(),returnedMapSchemaType.getQualifiedName());

        assertEquals(requestedMapSchemaType.getAdditionalProperties(),returnedMapSchemaType.getAdditionalProperties());

    }    
    @Test
    public void testGetMapSchemaTypeById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-MapSchemaType-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String versionNumber = "string1";
        primitivePropertyValue.setPrimitiveValue(versionNumber);
        instanceProperties.setProperty("versionNumber", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String author = "string2";
        primitivePropertyValue.setPrimitiveValue(author);
        instanceProperties.setProperty("author", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String usage = "string3";
        primitivePropertyValue.setPrimitiveValue(usage);
        instanceProperties.setProperty("usage", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String encodingStandard = "string4";
        primitivePropertyValue.setPrimitiveValue(encodingStandard);
        instanceProperties.setProperty("encodingStandard", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("MapSchemaType");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        MapSchemaType mapSchemaTypeEntity = subjectAreaBeansToAccessOMRS.getMapSchemaTypeById(testuserid, testguid1);
        assertEquals(mapSchemaTypeEntity.getDisplayName(),displayName);
        assertEquals(mapSchemaTypeEntity.getVersionNumber(),versionNumber);
        assertEquals(mapSchemaTypeEntity.getAuthor(),author);
        assertEquals(mapSchemaTypeEntity.getUsage(),usage);
        assertEquals(mapSchemaTypeEntity.getEncodingStandard(),encodingStandard);
        assertEquals(mapSchemaTypeEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateMapSchemaType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateMapSchemaType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String displayName = "string0";
            primitivePropertyValue.setPrimitiveValue(displayName);
            instanceProperties.setProperty("displayName", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String versionNumber = "string1";
            primitivePropertyValue.setPrimitiveValue(versionNumber);
            instanceProperties.setProperty("versionNumber", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String author = "string2";
            primitivePropertyValue.setPrimitiveValue(author);
            instanceProperties.setProperty("author", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String usage = "string3";
            primitivePropertyValue.setPrimitiveValue(usage);
            instanceProperties.setProperty("usage", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String encodingStandard = "string4";
            primitivePropertyValue.setPrimitiveValue(encodingStandard);
            instanceProperties.setProperty("encodingStandard", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string5";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("MapSchemaType");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            MapSchemaType requestedMapSchemaType = new MapSchemaType();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedMapSchemaType.setSystemAttributes(systemAttributes);

            requestedMapSchemaType.setDisplayName(displayName);

            requestedMapSchemaType.setVersionNumber(versionNumber);

            requestedMapSchemaType.setAuthor(author);

            requestedMapSchemaType.setUsage(usage);

            requestedMapSchemaType.setEncodingStandard(encodingStandard);

            requestedMapSchemaType.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedMapSchemaType.setAdditionalProperties(mapValue);
            MapSchemaType returnedMapSchemaType = subjectAreaBeansToAccessOMRS.updateMapSchemaType(testuserid,requestedMapSchemaType);
            assertEquals(requestedMapSchemaType.getDisplayName(),returnedMapSchemaType.getDisplayName());

            assertEquals(requestedMapSchemaType.getVersionNumber(),returnedMapSchemaType.getVersionNumber());

            assertEquals(requestedMapSchemaType.getAuthor(),returnedMapSchemaType.getAuthor());

            assertEquals(requestedMapSchemaType.getUsage(),returnedMapSchemaType.getUsage());

            assertEquals(requestedMapSchemaType.getEncodingStandard(),returnedMapSchemaType.getEncodingStandard());

            assertEquals(requestedMapSchemaType.getQualifiedName(),returnedMapSchemaType.getQualifiedName());

            assertEquals(requestedMapSchemaType.getAdditionalProperties(),returnedMapSchemaType.getAdditionalProperties());

        }
@Test
    public void testCreateDeployedSoftwareComponent() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateDeployedSoftwareComponent";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string0";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("DeployedSoftwareComponent");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        DeployedSoftwareComponent requestedDeployedSoftwareComponent = new DeployedSoftwareComponent();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedDeployedSoftwareComponent.setSystemAttributes(systemAttributes);

        requestedDeployedSoftwareComponent.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedDeployedSoftwareComponent.setAdditionalProperties(mapValue);
        DeployedSoftwareComponent returnedDeployedSoftwareComponent = subjectAreaBeansToAccessOMRS.createDeployedSoftwareComponent(testuserid, requestedDeployedSoftwareComponent);
        assertEquals(requestedDeployedSoftwareComponent.getQualifiedName(),returnedDeployedSoftwareComponent.getQualifiedName());

        assertEquals(requestedDeployedSoftwareComponent.getAdditionalProperties(),returnedDeployedSoftwareComponent.getAdditionalProperties());

    }    
    @Test
    public void testGetDeployedSoftwareComponentById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-DeployedSoftwareComponent-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string0";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("DeployedSoftwareComponent");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        DeployedSoftwareComponent deployedSoftwareComponentEntity = subjectAreaBeansToAccessOMRS.getDeployedSoftwareComponentById(testuserid, testguid1);
        assertEquals(deployedSoftwareComponentEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateDeployedSoftwareComponent() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateDeployedSoftwareComponent";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string0";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("DeployedSoftwareComponent");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            DeployedSoftwareComponent requestedDeployedSoftwareComponent = new DeployedSoftwareComponent();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedDeployedSoftwareComponent.setSystemAttributes(systemAttributes);

            requestedDeployedSoftwareComponent.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedDeployedSoftwareComponent.setAdditionalProperties(mapValue);
            DeployedSoftwareComponent returnedDeployedSoftwareComponent = subjectAreaBeansToAccessOMRS.updateDeployedSoftwareComponent(testuserid,requestedDeployedSoftwareComponent);
            assertEquals(requestedDeployedSoftwareComponent.getQualifiedName(),returnedDeployedSoftwareComponent.getQualifiedName());

            assertEquals(requestedDeployedSoftwareComponent.getAdditionalProperties(),returnedDeployedSoftwareComponent.getAdditionalProperties());

        }
@Test
    public void testCreateSchemaType() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateSchemaType";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String versionNumber = "string1";
        primitivePropertyValue.setPrimitiveValue(versionNumber);
        instanceProperties.setProperty("versionNumber", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String author = "string2";
        primitivePropertyValue.setPrimitiveValue(author);
        instanceProperties.setProperty("author", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String usage = "string3";
        primitivePropertyValue.setPrimitiveValue(usage);
        instanceProperties.setProperty("usage", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String encodingStandard = "string4";
        primitivePropertyValue.setPrimitiveValue(encodingStandard);
        instanceProperties.setProperty("encodingStandard", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("SchemaType");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        SchemaType requestedSchemaType = new SchemaType();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedSchemaType.setSystemAttributes(systemAttributes);

        requestedSchemaType.setDisplayName(displayName);

        requestedSchemaType.setVersionNumber(versionNumber);

        requestedSchemaType.setAuthor(author);

        requestedSchemaType.setUsage(usage);

        requestedSchemaType.setEncodingStandard(encodingStandard);

        requestedSchemaType.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedSchemaType.setAdditionalProperties(mapValue);
        SchemaType returnedSchemaType = subjectAreaBeansToAccessOMRS.createSchemaType(testuserid, requestedSchemaType);
        assertEquals(requestedSchemaType.getDisplayName(),returnedSchemaType.getDisplayName());

        assertEquals(requestedSchemaType.getVersionNumber(),returnedSchemaType.getVersionNumber());

        assertEquals(requestedSchemaType.getAuthor(),returnedSchemaType.getAuthor());

        assertEquals(requestedSchemaType.getUsage(),returnedSchemaType.getUsage());

        assertEquals(requestedSchemaType.getEncodingStandard(),returnedSchemaType.getEncodingStandard());

        assertEquals(requestedSchemaType.getQualifiedName(),returnedSchemaType.getQualifiedName());

        assertEquals(requestedSchemaType.getAdditionalProperties(),returnedSchemaType.getAdditionalProperties());

    }    
    @Test
    public void testGetSchemaTypeById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-SchemaType-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String versionNumber = "string1";
        primitivePropertyValue.setPrimitiveValue(versionNumber);
        instanceProperties.setProperty("versionNumber", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String author = "string2";
        primitivePropertyValue.setPrimitiveValue(author);
        instanceProperties.setProperty("author", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String usage = "string3";
        primitivePropertyValue.setPrimitiveValue(usage);
        instanceProperties.setProperty("usage", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String encodingStandard = "string4";
        primitivePropertyValue.setPrimitiveValue(encodingStandard);
        instanceProperties.setProperty("encodingStandard", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("SchemaType");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        SchemaType schemaTypeEntity = subjectAreaBeansToAccessOMRS.getSchemaTypeById(testuserid, testguid1);
        assertEquals(schemaTypeEntity.getDisplayName(),displayName);
        assertEquals(schemaTypeEntity.getVersionNumber(),versionNumber);
        assertEquals(schemaTypeEntity.getAuthor(),author);
        assertEquals(schemaTypeEntity.getUsage(),usage);
        assertEquals(schemaTypeEntity.getEncodingStandard(),encodingStandard);
        assertEquals(schemaTypeEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateSchemaType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateSchemaType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String displayName = "string0";
            primitivePropertyValue.setPrimitiveValue(displayName);
            instanceProperties.setProperty("displayName", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String versionNumber = "string1";
            primitivePropertyValue.setPrimitiveValue(versionNumber);
            instanceProperties.setProperty("versionNumber", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String author = "string2";
            primitivePropertyValue.setPrimitiveValue(author);
            instanceProperties.setProperty("author", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String usage = "string3";
            primitivePropertyValue.setPrimitiveValue(usage);
            instanceProperties.setProperty("usage", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String encodingStandard = "string4";
            primitivePropertyValue.setPrimitiveValue(encodingStandard);
            instanceProperties.setProperty("encodingStandard", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string5";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("SchemaType");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SchemaType requestedSchemaType = new SchemaType();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedSchemaType.setSystemAttributes(systemAttributes);

            requestedSchemaType.setDisplayName(displayName);

            requestedSchemaType.setVersionNumber(versionNumber);

            requestedSchemaType.setAuthor(author);

            requestedSchemaType.setUsage(usage);

            requestedSchemaType.setEncodingStandard(encodingStandard);

            requestedSchemaType.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedSchemaType.setAdditionalProperties(mapValue);
            SchemaType returnedSchemaType = subjectAreaBeansToAccessOMRS.updateSchemaType(testuserid,requestedSchemaType);
            assertEquals(requestedSchemaType.getDisplayName(),returnedSchemaType.getDisplayName());

            assertEquals(requestedSchemaType.getVersionNumber(),returnedSchemaType.getVersionNumber());

            assertEquals(requestedSchemaType.getAuthor(),returnedSchemaType.getAuthor());

            assertEquals(requestedSchemaType.getUsage(),returnedSchemaType.getUsage());

            assertEquals(requestedSchemaType.getEncodingStandard(),returnedSchemaType.getEncodingStandard());

            assertEquals(requestedSchemaType.getQualifiedName(),returnedSchemaType.getQualifiedName());

            assertEquals(requestedSchemaType.getAdditionalProperties(),returnedSchemaType.getAdditionalProperties());

        }
@Test
    public void testCreateDataFile() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateDataFile";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string0";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("DataFile");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        DataFile requestedDataFile = new DataFile();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedDataFile.setSystemAttributes(systemAttributes);

        requestedDataFile.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedDataFile.setAdditionalProperties(mapValue);
        DataFile returnedDataFile = subjectAreaBeansToAccessOMRS.createDataFile(testuserid, requestedDataFile);
        assertEquals(requestedDataFile.getQualifiedName(),returnedDataFile.getQualifiedName());

        assertEquals(requestedDataFile.getAdditionalProperties(),returnedDataFile.getAdditionalProperties());

    }    
    @Test
    public void testGetDataFileById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-DataFile-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string0";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("DataFile");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        DataFile dataFileEntity = subjectAreaBeansToAccessOMRS.getDataFileById(testuserid, testguid1);
        assertEquals(dataFileEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateDataFile() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateDataFile";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string0";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("DataFile");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            DataFile requestedDataFile = new DataFile();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedDataFile.setSystemAttributes(systemAttributes);

            requestedDataFile.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedDataFile.setAdditionalProperties(mapValue);
            DataFile returnedDataFile = subjectAreaBeansToAccessOMRS.updateDataFile(testuserid,requestedDataFile);
            assertEquals(requestedDataFile.getQualifiedName(),returnedDataFile.getQualifiedName());

            assertEquals(requestedDataFile.getAdditionalProperties(),returnedDataFile.getAdditionalProperties());

        }
@Test
    public void testCreateLike() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateLike";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Like");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Like requestedLike = new Like();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedLike.setSystemAttributes(systemAttributes);

        Map<String,String>  mapValue=null;

        Like returnedLike = subjectAreaBeansToAccessOMRS.createLike(testuserid, requestedLike);
    }    
    @Test
    public void testGetLikeById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-Like-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Like");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Like likeEntity = subjectAreaBeansToAccessOMRS.getLikeById(testuserid, testguid1);
    }
    @Test
        public void testUpdateLike() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateLike";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("Like");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Like requestedLike = new Like();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedLike.setSystemAttributes(systemAttributes);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            Like returnedLike = subjectAreaBeansToAccessOMRS.updateLike(testuserid,requestedLike);
        }
@Test
    public void testCreateReferenceable() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateReferenceable";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string0";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Referenceable");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Referenceable requestedReferenceable = new Referenceable();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedReferenceable.setSystemAttributes(systemAttributes);

        requestedReferenceable.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedReferenceable.setAdditionalProperties(mapValue);
        Referenceable returnedReferenceable = subjectAreaBeansToAccessOMRS.createReferenceable(testuserid, requestedReferenceable);
        assertEquals(requestedReferenceable.getQualifiedName(),returnedReferenceable.getQualifiedName());

        assertEquals(requestedReferenceable.getAdditionalProperties(),returnedReferenceable.getAdditionalProperties());

    }    
    @Test
    public void testGetReferenceableById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-Referenceable-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string0";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Referenceable");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Referenceable referenceableEntity = subjectAreaBeansToAccessOMRS.getReferenceableById(testuserid, testguid1);
        assertEquals(referenceableEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateReferenceable() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateReferenceable";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string0";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("Referenceable");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Referenceable requestedReferenceable = new Referenceable();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedReferenceable.setSystemAttributes(systemAttributes);

            requestedReferenceable.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedReferenceable.setAdditionalProperties(mapValue);
            Referenceable returnedReferenceable = subjectAreaBeansToAccessOMRS.updateReferenceable(testuserid,requestedReferenceable);
            assertEquals(requestedReferenceable.getQualifiedName(),returnedReferenceable.getQualifiedName());

            assertEquals(requestedReferenceable.getAdditionalProperties(),returnedReferenceable.getAdditionalProperties());

        }
@Test
    public void testCreateExternalReference() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateExternalReference";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String url = "string1";
        primitivePropertyValue.setPrimitiveValue(url);
        instanceProperties.setProperty("url", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String version = "string2";
        primitivePropertyValue.setPrimitiveValue(version);
        instanceProperties.setProperty("version", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string3";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String organization = "string4";
        primitivePropertyValue.setPrimitiveValue(organization);
        instanceProperties.setProperty("organization", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("ExternalReference");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        ExternalReference requestedExternalReference = new ExternalReference();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedExternalReference.setSystemAttributes(systemAttributes);

        requestedExternalReference.setDisplayName(displayName);

        requestedExternalReference.setUrl(url);

        requestedExternalReference.setVersion(version);

        requestedExternalReference.setDescription(description);

        requestedExternalReference.setOrganization(organization);

        requestedExternalReference.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedExternalReference.setAdditionalProperties(mapValue);
        ExternalReference returnedExternalReference = subjectAreaBeansToAccessOMRS.createExternalReference(testuserid, requestedExternalReference);
        assertEquals(requestedExternalReference.getDisplayName(),returnedExternalReference.getDisplayName());

        assertEquals(requestedExternalReference.getUrl(),returnedExternalReference.getUrl());

        assertEquals(requestedExternalReference.getVersion(),returnedExternalReference.getVersion());

        assertEquals(requestedExternalReference.getDescription(),returnedExternalReference.getDescription());

        assertEquals(requestedExternalReference.getOrganization(),returnedExternalReference.getOrganization());

        assertEquals(requestedExternalReference.getQualifiedName(),returnedExternalReference.getQualifiedName());

        assertEquals(requestedExternalReference.getAdditionalProperties(),returnedExternalReference.getAdditionalProperties());

    }    
    @Test
    public void testGetExternalReferenceById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-ExternalReference-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String url = "string1";
        primitivePropertyValue.setPrimitiveValue(url);
        instanceProperties.setProperty("url", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String version = "string2";
        primitivePropertyValue.setPrimitiveValue(version);
        instanceProperties.setProperty("version", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string3";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String organization = "string4";
        primitivePropertyValue.setPrimitiveValue(organization);
        instanceProperties.setProperty("organization", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("ExternalReference");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        ExternalReference externalReferenceEntity = subjectAreaBeansToAccessOMRS.getExternalReferenceById(testuserid, testguid1);
        assertEquals(externalReferenceEntity.getDisplayName(),displayName);
        assertEquals(externalReferenceEntity.getUrl(),url);
        assertEquals(externalReferenceEntity.getVersion(),version);
        assertEquals(externalReferenceEntity.getDescription(),description);
        assertEquals(externalReferenceEntity.getOrganization(),organization);
        assertEquals(externalReferenceEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateExternalReference() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateExternalReference";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String displayName = "string0";
            primitivePropertyValue.setPrimitiveValue(displayName);
            instanceProperties.setProperty("displayName", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String url = "string1";
            primitivePropertyValue.setPrimitiveValue(url);
            instanceProperties.setProperty("url", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String version = "string2";
            primitivePropertyValue.setPrimitiveValue(version);
            instanceProperties.setProperty("version", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string3";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String organization = "string4";
            primitivePropertyValue.setPrimitiveValue(organization);
            instanceProperties.setProperty("organization", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string5";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("ExternalReference");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ExternalReference requestedExternalReference = new ExternalReference();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedExternalReference.setSystemAttributes(systemAttributes);

            requestedExternalReference.setDisplayName(displayName);

            requestedExternalReference.setUrl(url);

            requestedExternalReference.setVersion(version);

            requestedExternalReference.setDescription(description);

            requestedExternalReference.setOrganization(organization);

            requestedExternalReference.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedExternalReference.setAdditionalProperties(mapValue);
            ExternalReference returnedExternalReference = subjectAreaBeansToAccessOMRS.updateExternalReference(testuserid,requestedExternalReference);
            assertEquals(requestedExternalReference.getDisplayName(),returnedExternalReference.getDisplayName());

            assertEquals(requestedExternalReference.getUrl(),returnedExternalReference.getUrl());

            assertEquals(requestedExternalReference.getVersion(),returnedExternalReference.getVersion());

            assertEquals(requestedExternalReference.getDescription(),returnedExternalReference.getDescription());

            assertEquals(requestedExternalReference.getOrganization(),returnedExternalReference.getOrganization());

            assertEquals(requestedExternalReference.getQualifiedName(),returnedExternalReference.getQualifiedName());

            assertEquals(requestedExternalReference.getAdditionalProperties(),returnedExternalReference.getAdditionalProperties());

        }
@Test
    public void testCreateEndpoint() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateEndpoint";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String networkAddress = "string2";
        primitivePropertyValue.setPrimitiveValue(networkAddress);
        instanceProperties.setProperty("networkAddress", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String protocol = "string3";
        primitivePropertyValue.setPrimitiveValue(protocol);
        instanceProperties.setProperty("protocol", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String encryptionMethod = "string4";
        primitivePropertyValue.setPrimitiveValue(encryptionMethod);
        instanceProperties.setProperty("encryptionMethod", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Endpoint");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Endpoint requestedEndpoint = new Endpoint();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedEndpoint.setSystemAttributes(systemAttributes);

        requestedEndpoint.setName(name);

        requestedEndpoint.setDescription(description);

        requestedEndpoint.setNetworkAddress(networkAddress);

        requestedEndpoint.setProtocol(protocol);

        requestedEndpoint.setEncryptionMethod(encryptionMethod);

        requestedEndpoint.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedEndpoint.setAdditionalProperties(mapValue);
        Endpoint returnedEndpoint = subjectAreaBeansToAccessOMRS.createEndpoint(testuserid, requestedEndpoint);
        assertEquals(requestedEndpoint.getName(),returnedEndpoint.getName());

        assertEquals(requestedEndpoint.getDescription(),returnedEndpoint.getDescription());

        assertEquals(requestedEndpoint.getNetworkAddress(),returnedEndpoint.getNetworkAddress());

        assertEquals(requestedEndpoint.getProtocol(),returnedEndpoint.getProtocol());

        assertEquals(requestedEndpoint.getEncryptionMethod(),returnedEndpoint.getEncryptionMethod());

        assertEquals(requestedEndpoint.getQualifiedName(),returnedEndpoint.getQualifiedName());

        assertEquals(requestedEndpoint.getAdditionalProperties(),returnedEndpoint.getAdditionalProperties());

    }    
    @Test
    public void testGetEndpointById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-Endpoint-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String networkAddress = "string2";
        primitivePropertyValue.setPrimitiveValue(networkAddress);
        instanceProperties.setProperty("networkAddress", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String protocol = "string3";
        primitivePropertyValue.setPrimitiveValue(protocol);
        instanceProperties.setProperty("protocol", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String encryptionMethod = "string4";
        primitivePropertyValue.setPrimitiveValue(encryptionMethod);
        instanceProperties.setProperty("encryptionMethod", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Endpoint");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Endpoint endpointEntity = subjectAreaBeansToAccessOMRS.getEndpointById(testuserid, testguid1);
        assertEquals(endpointEntity.getName(),name);
        assertEquals(endpointEntity.getDescription(),description);
        assertEquals(endpointEntity.getNetworkAddress(),networkAddress);
        assertEquals(endpointEntity.getProtocol(),protocol);
        assertEquals(endpointEntity.getEncryptionMethod(),encryptionMethod);
        assertEquals(endpointEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateEndpoint() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateEndpoint";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String networkAddress = "string2";
            primitivePropertyValue.setPrimitiveValue(networkAddress);
            instanceProperties.setProperty("networkAddress", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String protocol = "string3";
            primitivePropertyValue.setPrimitiveValue(protocol);
            instanceProperties.setProperty("protocol", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String encryptionMethod = "string4";
            primitivePropertyValue.setPrimitiveValue(encryptionMethod);
            instanceProperties.setProperty("encryptionMethod", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string5";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("Endpoint");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Endpoint requestedEndpoint = new Endpoint();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedEndpoint.setSystemAttributes(systemAttributes);

            requestedEndpoint.setName(name);

            requestedEndpoint.setDescription(description);

            requestedEndpoint.setNetworkAddress(networkAddress);

            requestedEndpoint.setProtocol(protocol);

            requestedEndpoint.setEncryptionMethod(encryptionMethod);

            requestedEndpoint.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedEndpoint.setAdditionalProperties(mapValue);
            Endpoint returnedEndpoint = subjectAreaBeansToAccessOMRS.updateEndpoint(testuserid,requestedEndpoint);
            assertEquals(requestedEndpoint.getName(),returnedEndpoint.getName());

            assertEquals(requestedEndpoint.getDescription(),returnedEndpoint.getDescription());

            assertEquals(requestedEndpoint.getNetworkAddress(),returnedEndpoint.getNetworkAddress());

            assertEquals(requestedEndpoint.getProtocol(),returnedEndpoint.getProtocol());

            assertEquals(requestedEndpoint.getEncryptionMethod(),returnedEndpoint.getEncryptionMethod());

            assertEquals(requestedEndpoint.getQualifiedName(),returnedEndpoint.getQualifiedName());

            assertEquals(requestedEndpoint.getAdditionalProperties(),returnedEndpoint.getAdditionalProperties());

        }
@Test
    public void testCreateContactDetails() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateContactDetails";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String contactMethodValue = "string0";
        primitivePropertyValue.setPrimitiveValue(contactMethodValue);
        instanceProperties.setProperty("contactMethodValue", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string1";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(ContactMethodType.values()[0].name());
        instanceProperties.setProperty("contactMethodType", enumPropertyValue);

        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("ContactDetails");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        ContactDetails requestedContactDetails = new ContactDetails();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedContactDetails.setSystemAttributes(systemAttributes);

        requestedContactDetails.setContactMethodValue(contactMethodValue);

        requestedContactDetails.setQualifiedName(qualifiedName);

        EnumPropertyValue ContactMethodTypeEnumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        ContactMethodTypeEnumPropertyValue.setSymbolicName(ContactMethodType.values()[0].name());
        instanceProperties.setProperty("contactMethodType", ContactMethodTypeEnumPropertyValue);

        requestedContactDetails.setContactMethodType(ContactMethodType.values()[0]);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedContactDetails.setAdditionalProperties(mapValue);
        ContactDetails returnedContactDetails = subjectAreaBeansToAccessOMRS.createContactDetails(testuserid, requestedContactDetails);
        assertEquals(requestedContactDetails.getContactMethodValue(),returnedContactDetails.getContactMethodValue());

        assertEquals(requestedContactDetails.getQualifiedName(),returnedContactDetails.getQualifiedName());

        assertEquals(requestedContactDetails.getContactMethodType(),returnedContactDetails.getContactMethodType());

        assertEquals(requestedContactDetails.getAdditionalProperties(),returnedContactDetails.getAdditionalProperties());

    }    
    @Test
    public void testGetContactDetailsById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-ContactDetails-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String contactMethodValue = "string0";
        primitivePropertyValue.setPrimitiveValue(contactMethodValue);
        instanceProperties.setProperty("contactMethodValue", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string1";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(ContactMethodType.values()[0].name());
        instanceProperties.setProperty("contactMethodType", enumPropertyValue);

        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("ContactDetails");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        ContactDetails contactDetailsEntity = subjectAreaBeansToAccessOMRS.getContactDetailsById(testuserid, testguid1);
        assertEquals(contactDetailsEntity.getContactMethodValue(),contactMethodValue);
        assertEquals(contactDetailsEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateContactDetails() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateContactDetails";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String contactMethodValue = "string0";
            primitivePropertyValue.setPrimitiveValue(contactMethodValue);
            instanceProperties.setProperty("contactMethodValue", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string1";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(ContactMethodType.values()[0].name());
            instanceProperties.setProperty("contactMethodType", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("ContactDetails");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ContactDetails requestedContactDetails = new ContactDetails();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedContactDetails.setSystemAttributes(systemAttributes);

            requestedContactDetails.setContactMethodValue(contactMethodValue);

            requestedContactDetails.setQualifiedName(qualifiedName);

            EnumPropertyValue ContactMethodTypeEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            ContactMethodTypeEnumPropertyValue.setSymbolicName(ContactMethodType.values()[0].name());
            instanceProperties.setProperty("contactMethodType", ContactMethodTypeEnumPropertyValue);

            requestedContactDetails.setContactMethodType(ContactMethodType.values()[0]);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedContactDetails.setAdditionalProperties(mapValue);
            ContactDetails returnedContactDetails = subjectAreaBeansToAccessOMRS.updateContactDetails(testuserid,requestedContactDetails);
            assertEquals(requestedContactDetails.getContactMethodValue(),returnedContactDetails.getContactMethodValue());

            assertEquals(requestedContactDetails.getQualifiedName(),returnedContactDetails.getQualifiedName());

            assertEquals(requestedContactDetails.getContactMethodType(),returnedContactDetails.getContactMethodType());

            assertEquals(requestedContactDetails.getAdditionalProperties(),returnedContactDetails.getAdditionalProperties());

        }
@Test
    public void testCreateGovernanceDefinition() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateGovernanceDefinition";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String title = "string0";
        primitivePropertyValue.setPrimitiveValue(title);
        instanceProperties.setProperty("title", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String summary = "string1";
        primitivePropertyValue.setPrimitiveValue(summary);
        instanceProperties.setProperty("summary", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string2";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String scope = "string3";
        primitivePropertyValue.setPrimitiveValue(scope);
        instanceProperties.setProperty("scope", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String priority = "string4";
        primitivePropertyValue.setPrimitiveValue(priority);
        instanceProperties.setProperty("priority", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string8";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String implications = "string5";
        primitivePropertyValue.setPrimitiveValue(implications);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("implications", arrayPropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String outcomes = "string6";
        primitivePropertyValue.setPrimitiveValue(outcomes);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("outcomes", arrayPropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String results = "string7";
        primitivePropertyValue.setPrimitiveValue(results);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("results", arrayPropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", enumPropertyValue);

        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GovernanceDefinition");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GovernanceDefinition requestedGovernanceDefinition = new GovernanceDefinition();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedGovernanceDefinition.setSystemAttributes(systemAttributes);

        requestedGovernanceDefinition.setTitle(title);

        requestedGovernanceDefinition.setSummary(summary);

        requestedGovernanceDefinition.setDescription(description);

        requestedGovernanceDefinition.setScope(scope);

        requestedGovernanceDefinition.setPriority(priority);

        requestedGovernanceDefinition.setQualifiedName(qualifiedName);

        EnumPropertyValue GovernanceDomainEnumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        GovernanceDomainEnumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", GovernanceDomainEnumPropertyValue);

        requestedGovernanceDefinition.setDomain(GovernanceDomain.values()[0]);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedGovernanceDefinition.setAdditionalProperties(mapValue);
        GovernanceDefinition returnedGovernanceDefinition = subjectAreaBeansToAccessOMRS.createGovernanceDefinition(testuserid, requestedGovernanceDefinition);
        assertEquals(requestedGovernanceDefinition.getTitle(),returnedGovernanceDefinition.getTitle());

        assertEquals(requestedGovernanceDefinition.getSummary(),returnedGovernanceDefinition.getSummary());

        assertEquals(requestedGovernanceDefinition.getDescription(),returnedGovernanceDefinition.getDescription());

        assertEquals(requestedGovernanceDefinition.getScope(),returnedGovernanceDefinition.getScope());

        assertEquals(requestedGovernanceDefinition.getPriority(),returnedGovernanceDefinition.getPriority());

        assertEquals(requestedGovernanceDefinition.getQualifiedName(),returnedGovernanceDefinition.getQualifiedName());

        assertEquals(requestedGovernanceDefinition.getDomain(),returnedGovernanceDefinition.getDomain());

        assertEquals(requestedGovernanceDefinition.getAdditionalProperties(),returnedGovernanceDefinition.getAdditionalProperties());

    }    
    @Test
    public void testGetGovernanceDefinitionById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-GovernanceDefinition-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String title = "string0";
        primitivePropertyValue.setPrimitiveValue(title);
        instanceProperties.setProperty("title", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String summary = "string1";
        primitivePropertyValue.setPrimitiveValue(summary);
        instanceProperties.setProperty("summary", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string2";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String scope = "string3";
        primitivePropertyValue.setPrimitiveValue(scope);
        instanceProperties.setProperty("scope", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String priority = "string4";
        primitivePropertyValue.setPrimitiveValue(priority);
        instanceProperties.setProperty("priority", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string8";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", enumPropertyValue);

        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GovernanceDefinition");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GovernanceDefinition governanceDefinitionEntity = subjectAreaBeansToAccessOMRS.getGovernanceDefinitionById(testuserid, testguid1);
        assertEquals(governanceDefinitionEntity.getTitle(),title);
        assertEquals(governanceDefinitionEntity.getSummary(),summary);
        assertEquals(governanceDefinitionEntity.getDescription(),description);
        assertEquals(governanceDefinitionEntity.getScope(),scope);
        assertEquals(governanceDefinitionEntity.getPriority(),priority);
        assertEquals(governanceDefinitionEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateGovernanceDefinition() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGovernanceDefinition";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String title = "string0";
            primitivePropertyValue.setPrimitiveValue(title);
            instanceProperties.setProperty("title", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String summary = "string1";
            primitivePropertyValue.setPrimitiveValue(summary);
            instanceProperties.setProperty("summary", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string2";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String scope = "string3";
            primitivePropertyValue.setPrimitiveValue(scope);
            instanceProperties.setProperty("scope", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String priority = "string4";
            primitivePropertyValue.setPrimitiveValue(priority);
            instanceProperties.setProperty("priority", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string8";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
            instanceProperties.setProperty("domain", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("GovernanceDefinition");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceDefinition requestedGovernanceDefinition = new GovernanceDefinition();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedGovernanceDefinition.setSystemAttributes(systemAttributes);

            requestedGovernanceDefinition.setTitle(title);

            requestedGovernanceDefinition.setSummary(summary);

            requestedGovernanceDefinition.setDescription(description);

            requestedGovernanceDefinition.setScope(scope);

            requestedGovernanceDefinition.setPriority(priority);

            requestedGovernanceDefinition.setQualifiedName(qualifiedName);

            EnumPropertyValue GovernanceDomainEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            GovernanceDomainEnumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
            instanceProperties.setProperty("domain", GovernanceDomainEnumPropertyValue);

            requestedGovernanceDefinition.setDomain(GovernanceDomain.values()[0]);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedGovernanceDefinition.setAdditionalProperties(mapValue);
            GovernanceDefinition returnedGovernanceDefinition = subjectAreaBeansToAccessOMRS.updateGovernanceDefinition(testuserid,requestedGovernanceDefinition);
            assertEquals(requestedGovernanceDefinition.getTitle(),returnedGovernanceDefinition.getTitle());

            assertEquals(requestedGovernanceDefinition.getSummary(),returnedGovernanceDefinition.getSummary());

            assertEquals(requestedGovernanceDefinition.getDescription(),returnedGovernanceDefinition.getDescription());

            assertEquals(requestedGovernanceDefinition.getScope(),returnedGovernanceDefinition.getScope());

            assertEquals(requestedGovernanceDefinition.getPriority(),returnedGovernanceDefinition.getPriority());

            assertEquals(requestedGovernanceDefinition.getQualifiedName(),returnedGovernanceDefinition.getQualifiedName());

            assertEquals(requestedGovernanceDefinition.getDomain(),returnedGovernanceDefinition.getDomain());

            assertEquals(requestedGovernanceDefinition.getAdditionalProperties(),returnedGovernanceDefinition.getAdditionalProperties());

        }
@Test
    public void testCreateFileFolder() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateFileFolder";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
        java.util.Date createTime = new java.util.Date();
        primitivePropertyValue.setPrimitiveValue(createTime);
        instanceProperties.setProperty("createTime", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
        java.util.Date modifiedTime = new java.util.Date();
        primitivePropertyValue.setPrimitiveValue(modifiedTime);
        instanceProperties.setProperty("modifiedTime", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string2";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string3";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string4";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("FileFolder");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        FileFolder requestedFileFolder = new FileFolder();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedFileFolder.setSystemAttributes(systemAttributes);

        requestedFileFolder.setCreateTime(createTime);

        requestedFileFolder.setModifiedTime(modifiedTime);

        requestedFileFolder.setName(name);

        requestedFileFolder.setDescription(description);

        requestedFileFolder.setOwner(owner);

        requestedFileFolder.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedFileFolder.setAdditionalProperties(mapValue);
        FileFolder returnedFileFolder = subjectAreaBeansToAccessOMRS.createFileFolder(testuserid, requestedFileFolder);
        assertEquals(requestedFileFolder.getCreateTime(),returnedFileFolder.getCreateTime());

        assertEquals(requestedFileFolder.getModifiedTime(),returnedFileFolder.getModifiedTime());

        assertEquals(requestedFileFolder.getName(),returnedFileFolder.getName());

        assertEquals(requestedFileFolder.getDescription(),returnedFileFolder.getDescription());

        assertEquals(requestedFileFolder.getOwner(),returnedFileFolder.getOwner());

        assertEquals(requestedFileFolder.getQualifiedName(),returnedFileFolder.getQualifiedName());

        assertEquals(requestedFileFolder.getAdditionalProperties(),returnedFileFolder.getAdditionalProperties());

    }    
    @Test
    public void testGetFileFolderById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-FileFolder-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
        java.util.Date createTime = new java.util.Date();
        primitivePropertyValue.setPrimitiveValue(createTime);
        instanceProperties.setProperty("createTime", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
        java.util.Date modifiedTime = new java.util.Date();
        primitivePropertyValue.setPrimitiveValue(modifiedTime);
        instanceProperties.setProperty("modifiedTime", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string2";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string3";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string4";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("FileFolder");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        FileFolder fileFolderEntity = subjectAreaBeansToAccessOMRS.getFileFolderById(testuserid, testguid1);
        assertEquals(fileFolderEntity.getCreateTime(),createTime);
        assertEquals(fileFolderEntity.getModifiedTime(),modifiedTime);
        assertEquals(fileFolderEntity.getName(),name);
        assertEquals(fileFolderEntity.getDescription(),description);
        assertEquals(fileFolderEntity.getOwner(),owner);
        assertEquals(fileFolderEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateFileFolder() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateFileFolder";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date createTime = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(createTime);
            instanceProperties.setProperty("createTime", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date modifiedTime = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(modifiedTime);
            instanceProperties.setProperty("modifiedTime", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string2";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string3";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String owner = "string4";
            primitivePropertyValue.setPrimitiveValue(owner);
            instanceProperties.setProperty("owner", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string5";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("FileFolder");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            FileFolder requestedFileFolder = new FileFolder();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedFileFolder.setSystemAttributes(systemAttributes);

            requestedFileFolder.setCreateTime(createTime);

            requestedFileFolder.setModifiedTime(modifiedTime);

            requestedFileFolder.setName(name);

            requestedFileFolder.setDescription(description);

            requestedFileFolder.setOwner(owner);

            requestedFileFolder.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedFileFolder.setAdditionalProperties(mapValue);
            FileFolder returnedFileFolder = subjectAreaBeansToAccessOMRS.updateFileFolder(testuserid,requestedFileFolder);
            assertEquals(requestedFileFolder.getCreateTime(),returnedFileFolder.getCreateTime());

            assertEquals(requestedFileFolder.getModifiedTime(),returnedFileFolder.getModifiedTime());

            assertEquals(requestedFileFolder.getName(),returnedFileFolder.getName());

            assertEquals(requestedFileFolder.getDescription(),returnedFileFolder.getDescription());

            assertEquals(requestedFileFolder.getOwner(),returnedFileFolder.getOwner());

            assertEquals(requestedFileFolder.getQualifiedName(),returnedFileFolder.getQualifiedName());

            assertEquals(requestedFileFolder.getAdditionalProperties(),returnedFileFolder.getAdditionalProperties());

        }
@Test
    public void testCreateNetwork() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateNetwork";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string2";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Network");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Network requestedNetwork = new Network();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedNetwork.setSystemAttributes(systemAttributes);

        requestedNetwork.setName(name);

        requestedNetwork.setDescription(description);

        requestedNetwork.setOwner(owner);

        requestedNetwork.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedNetwork.setAdditionalProperties(mapValue);
        Network returnedNetwork = subjectAreaBeansToAccessOMRS.createNetwork(testuserid, requestedNetwork);
        assertEquals(requestedNetwork.getName(),returnedNetwork.getName());

        assertEquals(requestedNetwork.getDescription(),returnedNetwork.getDescription());

        assertEquals(requestedNetwork.getOwner(),returnedNetwork.getOwner());

        assertEquals(requestedNetwork.getQualifiedName(),returnedNetwork.getQualifiedName());

        assertEquals(requestedNetwork.getAdditionalProperties(),returnedNetwork.getAdditionalProperties());

    }    
    @Test
    public void testGetNetworkById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-Network-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string2";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Network");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Network networkEntity = subjectAreaBeansToAccessOMRS.getNetworkById(testuserid, testguid1);
        assertEquals(networkEntity.getName(),name);
        assertEquals(networkEntity.getDescription(),description);
        assertEquals(networkEntity.getOwner(),owner);
        assertEquals(networkEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateNetwork() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateNetwork";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String owner = "string2";
            primitivePropertyValue.setPrimitiveValue(owner);
            instanceProperties.setProperty("owner", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string3";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("Network");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Network requestedNetwork = new Network();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedNetwork.setSystemAttributes(systemAttributes);

            requestedNetwork.setName(name);

            requestedNetwork.setDescription(description);

            requestedNetwork.setOwner(owner);

            requestedNetwork.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedNetwork.setAdditionalProperties(mapValue);
            Network returnedNetwork = subjectAreaBeansToAccessOMRS.updateNetwork(testuserid,requestedNetwork);
            assertEquals(requestedNetwork.getName(),returnedNetwork.getName());

            assertEquals(requestedNetwork.getDescription(),returnedNetwork.getDescription());

            assertEquals(requestedNetwork.getOwner(),returnedNetwork.getOwner());

            assertEquals(requestedNetwork.getQualifiedName(),returnedNetwork.getQualifiedName());

            assertEquals(requestedNetwork.getAdditionalProperties(),returnedNetwork.getAdditionalProperties());

        }
@Test
    public void testCreateActorProfile() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateActorProfile";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string2";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("ActorProfile");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        ActorProfile requestedActorProfile = new ActorProfile();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedActorProfile.setSystemAttributes(systemAttributes);

        requestedActorProfile.setName(name);

        requestedActorProfile.setDescription(description);

        requestedActorProfile.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedActorProfile.setAdditionalProperties(mapValue);
        ActorProfile returnedActorProfile = subjectAreaBeansToAccessOMRS.createActorProfile(testuserid, requestedActorProfile);
        assertEquals(requestedActorProfile.getName(),returnedActorProfile.getName());

        assertEquals(requestedActorProfile.getDescription(),returnedActorProfile.getDescription());

        assertEquals(requestedActorProfile.getQualifiedName(),returnedActorProfile.getQualifiedName());

        assertEquals(requestedActorProfile.getAdditionalProperties(),returnedActorProfile.getAdditionalProperties());

    }    
    @Test
    public void testGetActorProfileById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-ActorProfile-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string2";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("ActorProfile");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        ActorProfile actorProfileEntity = subjectAreaBeansToAccessOMRS.getActorProfileById(testuserid, testguid1);
        assertEquals(actorProfileEntity.getName(),name);
        assertEquals(actorProfileEntity.getDescription(),description);
        assertEquals(actorProfileEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateActorProfile() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateActorProfile";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string2";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("ActorProfile");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ActorProfile requestedActorProfile = new ActorProfile();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedActorProfile.setSystemAttributes(systemAttributes);

            requestedActorProfile.setName(name);

            requestedActorProfile.setDescription(description);

            requestedActorProfile.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedActorProfile.setAdditionalProperties(mapValue);
            ActorProfile returnedActorProfile = subjectAreaBeansToAccessOMRS.updateActorProfile(testuserid,requestedActorProfile);
            assertEquals(requestedActorProfile.getName(),returnedActorProfile.getName());

            assertEquals(requestedActorProfile.getDescription(),returnedActorProfile.getDescription());

            assertEquals(requestedActorProfile.getQualifiedName(),returnedActorProfile.getQualifiedName());

            assertEquals(requestedActorProfile.getAdditionalProperties(),returnedActorProfile.getAdditionalProperties());

        }
@Test
    public void testCreateAsset() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateAsset";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string2";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Asset");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Asset requestedAsset = new Asset();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedAsset.setSystemAttributes(systemAttributes);

        requestedAsset.setName(name);

        requestedAsset.setDescription(description);

        requestedAsset.setOwner(owner);

        requestedAsset.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedAsset.setAdditionalProperties(mapValue);
        Asset returnedAsset = subjectAreaBeansToAccessOMRS.createAsset(testuserid, requestedAsset);
        assertEquals(requestedAsset.getName(),returnedAsset.getName());

        assertEquals(requestedAsset.getDescription(),returnedAsset.getDescription());

        assertEquals(requestedAsset.getOwner(),returnedAsset.getOwner());

        assertEquals(requestedAsset.getQualifiedName(),returnedAsset.getQualifiedName());

        assertEquals(requestedAsset.getAdditionalProperties(),returnedAsset.getAdditionalProperties());

    }    
    @Test
    public void testGetAssetById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-Asset-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string2";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Asset");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Asset assetEntity = subjectAreaBeansToAccessOMRS.getAssetById(testuserid, testguid1);
        assertEquals(assetEntity.getName(),name);
        assertEquals(assetEntity.getDescription(),description);
        assertEquals(assetEntity.getOwner(),owner);
        assertEquals(assetEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateAsset() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateAsset";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String owner = "string2";
            primitivePropertyValue.setPrimitiveValue(owner);
            instanceProperties.setProperty("owner", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string3";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("Asset");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Asset requestedAsset = new Asset();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedAsset.setSystemAttributes(systemAttributes);

            requestedAsset.setName(name);

            requestedAsset.setDescription(description);

            requestedAsset.setOwner(owner);

            requestedAsset.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedAsset.setAdditionalProperties(mapValue);
            Asset returnedAsset = subjectAreaBeansToAccessOMRS.updateAsset(testuserid,requestedAsset);
            assertEquals(requestedAsset.getName(),returnedAsset.getName());

            assertEquals(requestedAsset.getDescription(),returnedAsset.getDescription());

            assertEquals(requestedAsset.getOwner(),returnedAsset.getOwner());

            assertEquals(requestedAsset.getQualifiedName(),returnedAsset.getQualifiedName());

            assertEquals(requestedAsset.getAdditionalProperties(),returnedAsset.getAdditionalProperties());

        }
@Test
    public void testCreateAPIOperation() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateAPIOperation";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string0";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("APIOperation");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        APIOperation requestedAPIOperation = new APIOperation();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedAPIOperation.setSystemAttributes(systemAttributes);

        requestedAPIOperation.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedAPIOperation.setAdditionalProperties(mapValue);
        APIOperation returnedAPIOperation = subjectAreaBeansToAccessOMRS.createAPIOperation(testuserid, requestedAPIOperation);
        assertEquals(requestedAPIOperation.getQualifiedName(),returnedAPIOperation.getQualifiedName());

        assertEquals(requestedAPIOperation.getAdditionalProperties(),returnedAPIOperation.getAdditionalProperties());

    }    
    @Test
    public void testGetAPIOperationById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-APIOperation-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string0";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("APIOperation");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        APIOperation aPIOperationEntity = subjectAreaBeansToAccessOMRS.getAPIOperationById(testuserid, testguid1);
        assertEquals(aPIOperationEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateAPIOperation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateAPIOperation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string0";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("APIOperation");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            APIOperation requestedAPIOperation = new APIOperation();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedAPIOperation.setSystemAttributes(systemAttributes);

            requestedAPIOperation.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedAPIOperation.setAdditionalProperties(mapValue);
            APIOperation returnedAPIOperation = subjectAreaBeansToAccessOMRS.updateAPIOperation(testuserid,requestedAPIOperation);
            assertEquals(requestedAPIOperation.getQualifiedName(),returnedAPIOperation.getQualifiedName());

            assertEquals(requestedAPIOperation.getAdditionalProperties(),returnedAPIOperation.getAdditionalProperties());

        }
@Test
    public void testCreateToDo() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateToDo";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string0";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
        java.util.Date creationTime = new java.util.Date();
        primitivePropertyValue.setPrimitiveValue(creationTime);
        instanceProperties.setProperty("creationTime", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
        java.util.Date completionTime = new java.util.Date();
        primitivePropertyValue.setPrimitiveValue(completionTime);
        instanceProperties.setProperty("completionTime", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string4";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(ToDoStatus.values()[0].name());
        instanceProperties.setProperty("status", enumPropertyValue);

        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("ToDo");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        ToDo requestedToDo = new ToDo();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedToDo.setSystemAttributes(systemAttributes);

        requestedToDo.setOwner(owner);

        requestedToDo.setDescription(description);

        requestedToDo.setCreationTime(creationTime);

        requestedToDo.setCompletionTime(completionTime);

        requestedToDo.setQualifiedName(qualifiedName);

        EnumPropertyValue ToDoStatusEnumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        ToDoStatusEnumPropertyValue.setSymbolicName(ToDoStatus.values()[0].name());
        instanceProperties.setProperty("status", ToDoStatusEnumPropertyValue);

        requestedToDo.setStatus(ToDoStatus.values()[0]);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedToDo.setAdditionalProperties(mapValue);
        ToDo returnedToDo = subjectAreaBeansToAccessOMRS.createToDo(testuserid, requestedToDo);
        assertEquals(requestedToDo.getOwner(),returnedToDo.getOwner());

        assertEquals(requestedToDo.getDescription(),returnedToDo.getDescription());

        assertEquals(requestedToDo.getCreationTime(),returnedToDo.getCreationTime());

        assertEquals(requestedToDo.getCompletionTime(),returnedToDo.getCompletionTime());

        assertEquals(requestedToDo.getQualifiedName(),returnedToDo.getQualifiedName());

        assertEquals(requestedToDo.getStatus(),returnedToDo.getStatus());

        assertEquals(requestedToDo.getAdditionalProperties(),returnedToDo.getAdditionalProperties());

    }    
    @Test
    public void testGetToDoById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-ToDo-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string0";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
        java.util.Date creationTime = new java.util.Date();
        primitivePropertyValue.setPrimitiveValue(creationTime);
        instanceProperties.setProperty("creationTime", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
        java.util.Date completionTime = new java.util.Date();
        primitivePropertyValue.setPrimitiveValue(completionTime);
        instanceProperties.setProperty("completionTime", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string4";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(ToDoStatus.values()[0].name());
        instanceProperties.setProperty("status", enumPropertyValue);

        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("ToDo");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        ToDo toDoEntity = subjectAreaBeansToAccessOMRS.getToDoById(testuserid, testguid1);
        assertEquals(toDoEntity.getOwner(),owner);
        assertEquals(toDoEntity.getDescription(),description);
        assertEquals(toDoEntity.getCreationTime(),creationTime);
        assertEquals(toDoEntity.getCompletionTime(),completionTime);
        assertEquals(toDoEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateToDo() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateToDo";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String owner = "string0";
            primitivePropertyValue.setPrimitiveValue(owner);
            instanceProperties.setProperty("owner", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date creationTime = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(creationTime);
            instanceProperties.setProperty("creationTime", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date completionTime = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(completionTime);
            instanceProperties.setProperty("completionTime", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string4";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(ToDoStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("ToDo");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ToDo requestedToDo = new ToDo();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedToDo.setSystemAttributes(systemAttributes);

            requestedToDo.setOwner(owner);

            requestedToDo.setDescription(description);

            requestedToDo.setCreationTime(creationTime);

            requestedToDo.setCompletionTime(completionTime);

            requestedToDo.setQualifiedName(qualifiedName);

            EnumPropertyValue ToDoStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            ToDoStatusEnumPropertyValue.setSymbolicName(ToDoStatus.values()[0].name());
            instanceProperties.setProperty("status", ToDoStatusEnumPropertyValue);

            requestedToDo.setStatus(ToDoStatus.values()[0]);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedToDo.setAdditionalProperties(mapValue);
            ToDo returnedToDo = subjectAreaBeansToAccessOMRS.updateToDo(testuserid,requestedToDo);
            assertEquals(requestedToDo.getOwner(),returnedToDo.getOwner());

            assertEquals(requestedToDo.getDescription(),returnedToDo.getDescription());

            assertEquals(requestedToDo.getCreationTime(),returnedToDo.getCreationTime());

            assertEquals(requestedToDo.getCompletionTime(),returnedToDo.getCompletionTime());

            assertEquals(requestedToDo.getQualifiedName(),returnedToDo.getQualifiedName());

            assertEquals(requestedToDo.getStatus(),returnedToDo.getStatus());

            assertEquals(requestedToDo.getAdditionalProperties(),returnedToDo.getAdditionalProperties());

        }
@Test
    public void testCreateNetworkGateway() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateNetworkGateway";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String type = "string2";
        primitivePropertyValue.setPrimitiveValue(type);
        instanceProperties.setProperty("type", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String version = "string3";
        primitivePropertyValue.setPrimitiveValue(version);
        instanceProperties.setProperty("version", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String patchLevel = "string4";
        primitivePropertyValue.setPrimitiveValue(patchLevel);
        instanceProperties.setProperty("patchLevel", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String source = "string5";
        primitivePropertyValue.setPrimitiveValue(source);
        instanceProperties.setProperty("source", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string6";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("NetworkGateway");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        NetworkGateway requestedNetworkGateway = new NetworkGateway();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedNetworkGateway.setSystemAttributes(systemAttributes);

        requestedNetworkGateway.setName(name);

        requestedNetworkGateway.setDescription(description);

        requestedNetworkGateway.setType(type);

        requestedNetworkGateway.setVersion(version);

        requestedNetworkGateway.setPatchLevel(patchLevel);

        requestedNetworkGateway.setSource(source);

        requestedNetworkGateway.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedNetworkGateway.setAdditionalProperties(mapValue);
        NetworkGateway returnedNetworkGateway = subjectAreaBeansToAccessOMRS.createNetworkGateway(testuserid, requestedNetworkGateway);
        assertEquals(requestedNetworkGateway.getName(),returnedNetworkGateway.getName());

        assertEquals(requestedNetworkGateway.getDescription(),returnedNetworkGateway.getDescription());

        assertEquals(requestedNetworkGateway.getType(),returnedNetworkGateway.getType());

        assertEquals(requestedNetworkGateway.getVersion(),returnedNetworkGateway.getVersion());

        assertEquals(requestedNetworkGateway.getPatchLevel(),returnedNetworkGateway.getPatchLevel());

        assertEquals(requestedNetworkGateway.getSource(),returnedNetworkGateway.getSource());

        assertEquals(requestedNetworkGateway.getQualifiedName(),returnedNetworkGateway.getQualifiedName());

        assertEquals(requestedNetworkGateway.getAdditionalProperties(),returnedNetworkGateway.getAdditionalProperties());

    }    
    @Test
    public void testGetNetworkGatewayById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-NetworkGateway-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String type = "string2";
        primitivePropertyValue.setPrimitiveValue(type);
        instanceProperties.setProperty("type", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String version = "string3";
        primitivePropertyValue.setPrimitiveValue(version);
        instanceProperties.setProperty("version", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String patchLevel = "string4";
        primitivePropertyValue.setPrimitiveValue(patchLevel);
        instanceProperties.setProperty("patchLevel", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String source = "string5";
        primitivePropertyValue.setPrimitiveValue(source);
        instanceProperties.setProperty("source", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string6";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("NetworkGateway");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        NetworkGateway networkGatewayEntity = subjectAreaBeansToAccessOMRS.getNetworkGatewayById(testuserid, testguid1);
        assertEquals(networkGatewayEntity.getName(),name);
        assertEquals(networkGatewayEntity.getDescription(),description);
        assertEquals(networkGatewayEntity.getType(),type);
        assertEquals(networkGatewayEntity.getVersion(),version);
        assertEquals(networkGatewayEntity.getPatchLevel(),patchLevel);
        assertEquals(networkGatewayEntity.getSource(),source);
        assertEquals(networkGatewayEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateNetworkGateway() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateNetworkGateway";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String type = "string2";
            primitivePropertyValue.setPrimitiveValue(type);
            instanceProperties.setProperty("type", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String version = "string3";
            primitivePropertyValue.setPrimitiveValue(version);
            instanceProperties.setProperty("version", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String patchLevel = "string4";
            primitivePropertyValue.setPrimitiveValue(patchLevel);
            instanceProperties.setProperty("patchLevel", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string5";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string6";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("NetworkGateway");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            NetworkGateway requestedNetworkGateway = new NetworkGateway();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedNetworkGateway.setSystemAttributes(systemAttributes);

            requestedNetworkGateway.setName(name);

            requestedNetworkGateway.setDescription(description);

            requestedNetworkGateway.setType(type);

            requestedNetworkGateway.setVersion(version);

            requestedNetworkGateway.setPatchLevel(patchLevel);

            requestedNetworkGateway.setSource(source);

            requestedNetworkGateway.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedNetworkGateway.setAdditionalProperties(mapValue);
            NetworkGateway returnedNetworkGateway = subjectAreaBeansToAccessOMRS.updateNetworkGateway(testuserid,requestedNetworkGateway);
            assertEquals(requestedNetworkGateway.getName(),returnedNetworkGateway.getName());

            assertEquals(requestedNetworkGateway.getDescription(),returnedNetworkGateway.getDescription());

            assertEquals(requestedNetworkGateway.getType(),returnedNetworkGateway.getType());

            assertEquals(requestedNetworkGateway.getVersion(),returnedNetworkGateway.getVersion());

            assertEquals(requestedNetworkGateway.getPatchLevel(),returnedNetworkGateway.getPatchLevel());

            assertEquals(requestedNetworkGateway.getSource(),returnedNetworkGateway.getSource());

            assertEquals(requestedNetworkGateway.getQualifiedName(),returnedNetworkGateway.getQualifiedName());

            assertEquals(requestedNetworkGateway.getAdditionalProperties(),returnedNetworkGateway.getAdditionalProperties());

        }
@Test
    public void testCreateGovernanceResponsibility() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateGovernanceResponsibility";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String implementationDescription = "string0";
        primitivePropertyValue.setPrimitiveValue(implementationDescription);
        instanceProperties.setProperty("implementationDescription", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String title = "string1";
        primitivePropertyValue.setPrimitiveValue(title);
        instanceProperties.setProperty("title", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String summary = "string2";
        primitivePropertyValue.setPrimitiveValue(summary);
        instanceProperties.setProperty("summary", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string3";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String scope = "string4";
        primitivePropertyValue.setPrimitiveValue(scope);
        instanceProperties.setProperty("scope", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String priority = "string5";
        primitivePropertyValue.setPrimitiveValue(priority);
        instanceProperties.setProperty("priority", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string9";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String implications = "string6";
        primitivePropertyValue.setPrimitiveValue(implications);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("implications", arrayPropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String outcomes = "string7";
        primitivePropertyValue.setPrimitiveValue(outcomes);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("outcomes", arrayPropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String results = "string8";
        primitivePropertyValue.setPrimitiveValue(results);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("results", arrayPropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", enumPropertyValue);

        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GovernanceResponsibility");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GovernanceResponsibility requestedGovernanceResponsibility = new GovernanceResponsibility();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedGovernanceResponsibility.setSystemAttributes(systemAttributes);

        requestedGovernanceResponsibility.setImplementationDescription(implementationDescription);

        requestedGovernanceResponsibility.setTitle(title);

        requestedGovernanceResponsibility.setSummary(summary);

        requestedGovernanceResponsibility.setDescription(description);

        requestedGovernanceResponsibility.setScope(scope);

        requestedGovernanceResponsibility.setPriority(priority);

        requestedGovernanceResponsibility.setQualifiedName(qualifiedName);

        EnumPropertyValue GovernanceDomainEnumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        GovernanceDomainEnumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", GovernanceDomainEnumPropertyValue);

        requestedGovernanceResponsibility.setDomain(GovernanceDomain.values()[0]);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedGovernanceResponsibility.setAdditionalProperties(mapValue);
        GovernanceResponsibility returnedGovernanceResponsibility = subjectAreaBeansToAccessOMRS.createGovernanceResponsibility(testuserid, requestedGovernanceResponsibility);
        assertEquals(requestedGovernanceResponsibility.getImplementationDescription(),returnedGovernanceResponsibility.getImplementationDescription());

        assertEquals(requestedGovernanceResponsibility.getTitle(),returnedGovernanceResponsibility.getTitle());

        assertEquals(requestedGovernanceResponsibility.getSummary(),returnedGovernanceResponsibility.getSummary());

        assertEquals(requestedGovernanceResponsibility.getDescription(),returnedGovernanceResponsibility.getDescription());

        assertEquals(requestedGovernanceResponsibility.getScope(),returnedGovernanceResponsibility.getScope());

        assertEquals(requestedGovernanceResponsibility.getPriority(),returnedGovernanceResponsibility.getPriority());

        assertEquals(requestedGovernanceResponsibility.getQualifiedName(),returnedGovernanceResponsibility.getQualifiedName());

        assertEquals(requestedGovernanceResponsibility.getDomain(),returnedGovernanceResponsibility.getDomain());

        assertEquals(requestedGovernanceResponsibility.getAdditionalProperties(),returnedGovernanceResponsibility.getAdditionalProperties());

    }    
    @Test
    public void testGetGovernanceResponsibilityById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-GovernanceResponsibility-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String implementationDescription = "string0";
        primitivePropertyValue.setPrimitiveValue(implementationDescription);
        instanceProperties.setProperty("implementationDescription", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String title = "string1";
        primitivePropertyValue.setPrimitiveValue(title);
        instanceProperties.setProperty("title", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String summary = "string2";
        primitivePropertyValue.setPrimitiveValue(summary);
        instanceProperties.setProperty("summary", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string3";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String scope = "string4";
        primitivePropertyValue.setPrimitiveValue(scope);
        instanceProperties.setProperty("scope", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String priority = "string5";
        primitivePropertyValue.setPrimitiveValue(priority);
        instanceProperties.setProperty("priority", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string9";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", enumPropertyValue);

        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GovernanceResponsibility");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GovernanceResponsibility governanceResponsibilityEntity = subjectAreaBeansToAccessOMRS.getGovernanceResponsibilityById(testuserid, testguid1);
        assertEquals(governanceResponsibilityEntity.getImplementationDescription(),implementationDescription);
        assertEquals(governanceResponsibilityEntity.getTitle(),title);
        assertEquals(governanceResponsibilityEntity.getSummary(),summary);
        assertEquals(governanceResponsibilityEntity.getDescription(),description);
        assertEquals(governanceResponsibilityEntity.getScope(),scope);
        assertEquals(governanceResponsibilityEntity.getPriority(),priority);
        assertEquals(governanceResponsibilityEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateGovernanceResponsibility() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGovernanceResponsibility";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String implementationDescription = "string0";
            primitivePropertyValue.setPrimitiveValue(implementationDescription);
            instanceProperties.setProperty("implementationDescription", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String title = "string1";
            primitivePropertyValue.setPrimitiveValue(title);
            instanceProperties.setProperty("title", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String summary = "string2";
            primitivePropertyValue.setPrimitiveValue(summary);
            instanceProperties.setProperty("summary", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string3";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String scope = "string4";
            primitivePropertyValue.setPrimitiveValue(scope);
            instanceProperties.setProperty("scope", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String priority = "string5";
            primitivePropertyValue.setPrimitiveValue(priority);
            instanceProperties.setProperty("priority", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string9";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
            instanceProperties.setProperty("domain", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("GovernanceResponsibility");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceResponsibility requestedGovernanceResponsibility = new GovernanceResponsibility();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedGovernanceResponsibility.setSystemAttributes(systemAttributes);

            requestedGovernanceResponsibility.setImplementationDescription(implementationDescription);

            requestedGovernanceResponsibility.setTitle(title);

            requestedGovernanceResponsibility.setSummary(summary);

            requestedGovernanceResponsibility.setDescription(description);

            requestedGovernanceResponsibility.setScope(scope);

            requestedGovernanceResponsibility.setPriority(priority);

            requestedGovernanceResponsibility.setQualifiedName(qualifiedName);

            EnumPropertyValue GovernanceDomainEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            GovernanceDomainEnumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
            instanceProperties.setProperty("domain", GovernanceDomainEnumPropertyValue);

            requestedGovernanceResponsibility.setDomain(GovernanceDomain.values()[0]);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedGovernanceResponsibility.setAdditionalProperties(mapValue);
            GovernanceResponsibility returnedGovernanceResponsibility = subjectAreaBeansToAccessOMRS.updateGovernanceResponsibility(testuserid,requestedGovernanceResponsibility);
            assertEquals(requestedGovernanceResponsibility.getImplementationDescription(),returnedGovernanceResponsibility.getImplementationDescription());

            assertEquals(requestedGovernanceResponsibility.getTitle(),returnedGovernanceResponsibility.getTitle());

            assertEquals(requestedGovernanceResponsibility.getSummary(),returnedGovernanceResponsibility.getSummary());

            assertEquals(requestedGovernanceResponsibility.getDescription(),returnedGovernanceResponsibility.getDescription());

            assertEquals(requestedGovernanceResponsibility.getScope(),returnedGovernanceResponsibility.getScope());

            assertEquals(requestedGovernanceResponsibility.getPriority(),returnedGovernanceResponsibility.getPriority());

            assertEquals(requestedGovernanceResponsibility.getQualifiedName(),returnedGovernanceResponsibility.getQualifiedName());

            assertEquals(requestedGovernanceResponsibility.getDomain(),returnedGovernanceResponsibility.getDomain());

            assertEquals(requestedGovernanceResponsibility.getAdditionalProperties(),returnedGovernanceResponsibility.getAdditionalProperties());

        }
@Test
    public void testCreateImplementationSnippet() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateImplementationSnippet";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String snippet = "string0";
        primitivePropertyValue.setPrimitiveValue(snippet);
        instanceProperties.setProperty("snippet", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String implementationLanguage = "string1";
        primitivePropertyValue.setPrimitiveValue(implementationLanguage);
        instanceProperties.setProperty("implementationLanguage", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String version = "string2";
        primitivePropertyValue.setPrimitiveValue(version);
        instanceProperties.setProperty("version", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String usage = "string3";
        primitivePropertyValue.setPrimitiveValue(usage);
        instanceProperties.setProperty("usage", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String curator = "string4";
        primitivePropertyValue.setPrimitiveValue(curator);
        instanceProperties.setProperty("curator", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("ImplementationSnippet");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        ImplementationSnippet requestedImplementationSnippet = new ImplementationSnippet();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedImplementationSnippet.setSystemAttributes(systemAttributes);

        requestedImplementationSnippet.setSnippet(snippet);

        requestedImplementationSnippet.setImplementationLanguage(implementationLanguage);

        requestedImplementationSnippet.setVersion(version);

        requestedImplementationSnippet.setUsage(usage);

        requestedImplementationSnippet.setCurator(curator);

        requestedImplementationSnippet.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedImplementationSnippet.setAdditionalProperties(mapValue);
        ImplementationSnippet returnedImplementationSnippet = subjectAreaBeansToAccessOMRS.createImplementationSnippet(testuserid, requestedImplementationSnippet);
        assertEquals(requestedImplementationSnippet.getSnippet(),returnedImplementationSnippet.getSnippet());

        assertEquals(requestedImplementationSnippet.getImplementationLanguage(),returnedImplementationSnippet.getImplementationLanguage());

        assertEquals(requestedImplementationSnippet.getVersion(),returnedImplementationSnippet.getVersion());

        assertEquals(requestedImplementationSnippet.getUsage(),returnedImplementationSnippet.getUsage());

        assertEquals(requestedImplementationSnippet.getCurator(),returnedImplementationSnippet.getCurator());

        assertEquals(requestedImplementationSnippet.getQualifiedName(),returnedImplementationSnippet.getQualifiedName());

        assertEquals(requestedImplementationSnippet.getAdditionalProperties(),returnedImplementationSnippet.getAdditionalProperties());

    }    
    @Test
    public void testGetImplementationSnippetById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-ImplementationSnippet-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String snippet = "string0";
        primitivePropertyValue.setPrimitiveValue(snippet);
        instanceProperties.setProperty("snippet", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String implementationLanguage = "string1";
        primitivePropertyValue.setPrimitiveValue(implementationLanguage);
        instanceProperties.setProperty("implementationLanguage", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String version = "string2";
        primitivePropertyValue.setPrimitiveValue(version);
        instanceProperties.setProperty("version", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String usage = "string3";
        primitivePropertyValue.setPrimitiveValue(usage);
        instanceProperties.setProperty("usage", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String curator = "string4";
        primitivePropertyValue.setPrimitiveValue(curator);
        instanceProperties.setProperty("curator", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("ImplementationSnippet");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        ImplementationSnippet implementationSnippetEntity = subjectAreaBeansToAccessOMRS.getImplementationSnippetById(testuserid, testguid1);
        assertEquals(implementationSnippetEntity.getSnippet(),snippet);
        assertEquals(implementationSnippetEntity.getImplementationLanguage(),implementationLanguage);
        assertEquals(implementationSnippetEntity.getVersion(),version);
        assertEquals(implementationSnippetEntity.getUsage(),usage);
        assertEquals(implementationSnippetEntity.getCurator(),curator);
        assertEquals(implementationSnippetEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateImplementationSnippet() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateImplementationSnippet";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String snippet = "string0";
            primitivePropertyValue.setPrimitiveValue(snippet);
            instanceProperties.setProperty("snippet", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String implementationLanguage = "string1";
            primitivePropertyValue.setPrimitiveValue(implementationLanguage);
            instanceProperties.setProperty("implementationLanguage", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String version = "string2";
            primitivePropertyValue.setPrimitiveValue(version);
            instanceProperties.setProperty("version", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String usage = "string3";
            primitivePropertyValue.setPrimitiveValue(usage);
            instanceProperties.setProperty("usage", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String curator = "string4";
            primitivePropertyValue.setPrimitiveValue(curator);
            instanceProperties.setProperty("curator", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string5";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("ImplementationSnippet");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ImplementationSnippet requestedImplementationSnippet = new ImplementationSnippet();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedImplementationSnippet.setSystemAttributes(systemAttributes);

            requestedImplementationSnippet.setSnippet(snippet);

            requestedImplementationSnippet.setImplementationLanguage(implementationLanguage);

            requestedImplementationSnippet.setVersion(version);

            requestedImplementationSnippet.setUsage(usage);

            requestedImplementationSnippet.setCurator(curator);

            requestedImplementationSnippet.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedImplementationSnippet.setAdditionalProperties(mapValue);
            ImplementationSnippet returnedImplementationSnippet = subjectAreaBeansToAccessOMRS.updateImplementationSnippet(testuserid,requestedImplementationSnippet);
            assertEquals(requestedImplementationSnippet.getSnippet(),returnedImplementationSnippet.getSnippet());

            assertEquals(requestedImplementationSnippet.getImplementationLanguage(),returnedImplementationSnippet.getImplementationLanguage());

            assertEquals(requestedImplementationSnippet.getVersion(),returnedImplementationSnippet.getVersion());

            assertEquals(requestedImplementationSnippet.getUsage(),returnedImplementationSnippet.getUsage());

            assertEquals(requestedImplementationSnippet.getCurator(),returnedImplementationSnippet.getCurator());

            assertEquals(requestedImplementationSnippet.getQualifiedName(),returnedImplementationSnippet.getQualifiedName());

            assertEquals(requestedImplementationSnippet.getAdditionalProperties(),returnedImplementationSnippet.getAdditionalProperties());

        }
@Test
    public void testCreateUserIdentity() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateUserIdentity";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String userId = "string0";
        primitivePropertyValue.setPrimitiveValue(userId);
        instanceProperties.setProperty("userId", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string1";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("UserIdentity");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        UserIdentity requestedUserIdentity = new UserIdentity();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedUserIdentity.setSystemAttributes(systemAttributes);

        requestedUserIdentity.setUserId(userId);

        requestedUserIdentity.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedUserIdentity.setAdditionalProperties(mapValue);
        UserIdentity returnedUserIdentity = subjectAreaBeansToAccessOMRS.createUserIdentity(testuserid, requestedUserIdentity);
        assertEquals(requestedUserIdentity.getUserId(),returnedUserIdentity.getUserId());

        assertEquals(requestedUserIdentity.getQualifiedName(),returnedUserIdentity.getQualifiedName());

        assertEquals(requestedUserIdentity.getAdditionalProperties(),returnedUserIdentity.getAdditionalProperties());

    }    
    @Test
    public void testGetUserIdentityById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-UserIdentity-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String userId = "string0";
        primitivePropertyValue.setPrimitiveValue(userId);
        instanceProperties.setProperty("userId", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string1";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("UserIdentity");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        UserIdentity userIdentityEntity = subjectAreaBeansToAccessOMRS.getUserIdentityById(testuserid, testguid1);
        assertEquals(userIdentityEntity.getUserId(),userId);
        assertEquals(userIdentityEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateUserIdentity() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateUserIdentity";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String userId = "string0";
            primitivePropertyValue.setPrimitiveValue(userId);
            instanceProperties.setProperty("userId", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string1";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("UserIdentity");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            UserIdentity requestedUserIdentity = new UserIdentity();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedUserIdentity.setSystemAttributes(systemAttributes);

            requestedUserIdentity.setUserId(userId);

            requestedUserIdentity.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedUserIdentity.setAdditionalProperties(mapValue);
            UserIdentity returnedUserIdentity = subjectAreaBeansToAccessOMRS.updateUserIdentity(testuserid,requestedUserIdentity);
            assertEquals(requestedUserIdentity.getUserId(),returnedUserIdentity.getUserId());

            assertEquals(requestedUserIdentity.getQualifiedName(),returnedUserIdentity.getQualifiedName());

            assertEquals(requestedUserIdentity.getAdditionalProperties(),returnedUserIdentity.getAdditionalProperties());

        }
@Test
    public void testCreateNoteEntry() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateNoteEntry";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String text = "string0";
        primitivePropertyValue.setPrimitiveValue(text);
        instanceProperties.setProperty("text", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string1";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("NoteEntry");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        NoteEntry requestedNoteEntry = new NoteEntry();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedNoteEntry.setSystemAttributes(systemAttributes);

        requestedNoteEntry.setText(text);

        requestedNoteEntry.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedNoteEntry.setAdditionalProperties(mapValue);
        NoteEntry returnedNoteEntry = subjectAreaBeansToAccessOMRS.createNoteEntry(testuserid, requestedNoteEntry);
        assertEquals(requestedNoteEntry.getText(),returnedNoteEntry.getText());

        assertEquals(requestedNoteEntry.getQualifiedName(),returnedNoteEntry.getQualifiedName());

        assertEquals(requestedNoteEntry.getAdditionalProperties(),returnedNoteEntry.getAdditionalProperties());

    }    
    @Test
    public void testGetNoteEntryById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-NoteEntry-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String text = "string0";
        primitivePropertyValue.setPrimitiveValue(text);
        instanceProperties.setProperty("text", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string1";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("NoteEntry");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        NoteEntry noteEntryEntity = subjectAreaBeansToAccessOMRS.getNoteEntryById(testuserid, testguid1);
        assertEquals(noteEntryEntity.getText(),text);
        assertEquals(noteEntryEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateNoteEntry() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateNoteEntry";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String text = "string0";
            primitivePropertyValue.setPrimitiveValue(text);
            instanceProperties.setProperty("text", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string1";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("NoteEntry");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            NoteEntry requestedNoteEntry = new NoteEntry();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedNoteEntry.setSystemAttributes(systemAttributes);

            requestedNoteEntry.setText(text);

            requestedNoteEntry.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedNoteEntry.setAdditionalProperties(mapValue);
            NoteEntry returnedNoteEntry = subjectAreaBeansToAccessOMRS.updateNoteEntry(testuserid,requestedNoteEntry);
            assertEquals(requestedNoteEntry.getText(),returnedNoteEntry.getText());

            assertEquals(requestedNoteEntry.getQualifiedName(),returnedNoteEntry.getQualifiedName());

            assertEquals(requestedNoteEntry.getAdditionalProperties(),returnedNoteEntry.getAdditionalProperties());

        }
@Test
    public void testCreatePropertyFacet() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreatePropertyFacet";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String version = "string0";
        primitivePropertyValue.setPrimitiveValue(version);
        instanceProperties.setProperty("version", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string2";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("properties", mapPropertyValue);

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("PropertyFacet");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        PropertyFacet requestedPropertyFacet = new PropertyFacet();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedPropertyFacet.setSystemAttributes(systemAttributes);

        requestedPropertyFacet.setVersion(version);

        requestedPropertyFacet.setDescription(description);

        requestedPropertyFacet.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedPropertyFacet.setProperties(mapValue);
        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedPropertyFacet.setAdditionalProperties(mapValue);
        PropertyFacet returnedPropertyFacet = subjectAreaBeansToAccessOMRS.createPropertyFacet(testuserid, requestedPropertyFacet);
        assertEquals(requestedPropertyFacet.getVersion(),returnedPropertyFacet.getVersion());

        assertEquals(requestedPropertyFacet.getDescription(),returnedPropertyFacet.getDescription());

        assertEquals(requestedPropertyFacet.getQualifiedName(),returnedPropertyFacet.getQualifiedName());

        assertEquals(requestedPropertyFacet.getProperties(),returnedPropertyFacet.getProperties());

        assertEquals(requestedPropertyFacet.getAdditionalProperties(),returnedPropertyFacet.getAdditionalProperties());

    }    
    @Test
    public void testGetPropertyFacetById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-PropertyFacet-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String version = "string0";
        primitivePropertyValue.setPrimitiveValue(version);
        instanceProperties.setProperty("version", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string2";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("Properties", mapPropertyValue);

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("PropertyFacet");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        PropertyFacet propertyFacetEntity = subjectAreaBeansToAccessOMRS.getPropertyFacetById(testuserid, testguid1);
        assertEquals(propertyFacetEntity.getVersion(),version);
        assertEquals(propertyFacetEntity.getDescription(),description);
        assertEquals(propertyFacetEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdatePropertyFacet() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdatePropertyFacet";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String version = "string0";
            primitivePropertyValue.setPrimitiveValue(version);
            instanceProperties.setProperty("version", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string2";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("properties", mapPropertyValue);

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("PropertyFacet");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            PropertyFacet requestedPropertyFacet = new PropertyFacet();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedPropertyFacet.setSystemAttributes(systemAttributes);

            requestedPropertyFacet.setVersion(version);

            requestedPropertyFacet.setDescription(description);

            requestedPropertyFacet.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedPropertyFacet.setProperties(mapValue);
            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedPropertyFacet.setAdditionalProperties(mapValue);
            PropertyFacet returnedPropertyFacet = subjectAreaBeansToAccessOMRS.updatePropertyFacet(testuserid,requestedPropertyFacet);
            assertEquals(requestedPropertyFacet.getVersion(),returnedPropertyFacet.getVersion());

            assertEquals(requestedPropertyFacet.getDescription(),returnedPropertyFacet.getDescription());

            assertEquals(requestedPropertyFacet.getQualifiedName(),returnedPropertyFacet.getQualifiedName());

            assertEquals(requestedPropertyFacet.getProperties(),returnedPropertyFacet.getProperties());

            assertEquals(requestedPropertyFacet.getAdditionalProperties(),returnedPropertyFacet.getAdditionalProperties());

        }
@Test
    public void testCreateProject() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateProject";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
        java.util.Date startDate = new java.util.Date();
        primitivePropertyValue.setPrimitiveValue(startDate);
        instanceProperties.setProperty("startDate", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
        java.util.Date plannedEndDate = new java.util.Date();
        primitivePropertyValue.setPrimitiveValue(plannedEndDate);
        instanceProperties.setProperty("plannedEndDate", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String status = "string4";
        primitivePropertyValue.setPrimitiveValue(status);
        instanceProperties.setProperty("status", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Project");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Project requestedProject = new Project();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedProject.setSystemAttributes(systemAttributes);

        requestedProject.setName(name);

        requestedProject.setDescription(description);

        requestedProject.setStartDate(startDate);

        requestedProject.setPlannedEndDate(plannedEndDate);

        requestedProject.setStatus(status);

        requestedProject.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedProject.setAdditionalProperties(mapValue);
        Project returnedProject = subjectAreaBeansToAccessOMRS.createProject(testuserid, requestedProject);
        assertEquals(requestedProject.getName(),returnedProject.getName());

        assertEquals(requestedProject.getDescription(),returnedProject.getDescription());

        assertEquals(requestedProject.getStartDate(),returnedProject.getStartDate());

        assertEquals(requestedProject.getPlannedEndDate(),returnedProject.getPlannedEndDate());

        assertEquals(requestedProject.getStatus(),returnedProject.getStatus());

        assertEquals(requestedProject.getQualifiedName(),returnedProject.getQualifiedName());

        assertEquals(requestedProject.getAdditionalProperties(),returnedProject.getAdditionalProperties());

    }    
    @Test
    public void testGetProjectById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-Project-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
        java.util.Date startDate = new java.util.Date();
        primitivePropertyValue.setPrimitiveValue(startDate);
        instanceProperties.setProperty("startDate", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
        java.util.Date plannedEndDate = new java.util.Date();
        primitivePropertyValue.setPrimitiveValue(plannedEndDate);
        instanceProperties.setProperty("plannedEndDate", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String status = "string4";
        primitivePropertyValue.setPrimitiveValue(status);
        instanceProperties.setProperty("status", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Project");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Project projectEntity = subjectAreaBeansToAccessOMRS.getProjectById(testuserid, testguid1);
        assertEquals(projectEntity.getName(),name);
        assertEquals(projectEntity.getDescription(),description);
        assertEquals(projectEntity.getStartDate(),startDate);
        assertEquals(projectEntity.getPlannedEndDate(),plannedEndDate);
        assertEquals(projectEntity.getStatus(),status);
        assertEquals(projectEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateProject() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateProject";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date startDate = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(startDate);
            instanceProperties.setProperty("startDate", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date plannedEndDate = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(plannedEndDate);
            instanceProperties.setProperty("plannedEndDate", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String status = "string4";
            primitivePropertyValue.setPrimitiveValue(status);
            instanceProperties.setProperty("status", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string5";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("Project");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Project requestedProject = new Project();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedProject.setSystemAttributes(systemAttributes);

            requestedProject.setName(name);

            requestedProject.setDescription(description);

            requestedProject.setStartDate(startDate);

            requestedProject.setPlannedEndDate(plannedEndDate);

            requestedProject.setStatus(status);

            requestedProject.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedProject.setAdditionalProperties(mapValue);
            Project returnedProject = subjectAreaBeansToAccessOMRS.updateProject(testuserid,requestedProject);
            assertEquals(requestedProject.getName(),returnedProject.getName());

            assertEquals(requestedProject.getDescription(),returnedProject.getDescription());

            assertEquals(requestedProject.getStartDate(),returnedProject.getStartDate());

            assertEquals(requestedProject.getPlannedEndDate(),returnedProject.getPlannedEndDate());

            assertEquals(requestedProject.getStatus(),returnedProject.getStatus());

            assertEquals(requestedProject.getQualifiedName(),returnedProject.getQualifiedName());

            assertEquals(requestedProject.getAdditionalProperties(),returnedProject.getAdditionalProperties());

        }
@Test
    public void testCreateHostCluster() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateHostCluster";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string2";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("HostCluster");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        HostCluster requestedHostCluster = new HostCluster();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedHostCluster.setSystemAttributes(systemAttributes);

        requestedHostCluster.setName(name);

        requestedHostCluster.setDescription(description);

        requestedHostCluster.setOwner(owner);

        requestedHostCluster.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedHostCluster.setAdditionalProperties(mapValue);
        HostCluster returnedHostCluster = subjectAreaBeansToAccessOMRS.createHostCluster(testuserid, requestedHostCluster);
        assertEquals(requestedHostCluster.getName(),returnedHostCluster.getName());

        assertEquals(requestedHostCluster.getDescription(),returnedHostCluster.getDescription());

        assertEquals(requestedHostCluster.getOwner(),returnedHostCluster.getOwner());

        assertEquals(requestedHostCluster.getQualifiedName(),returnedHostCluster.getQualifiedName());

        assertEquals(requestedHostCluster.getAdditionalProperties(),returnedHostCluster.getAdditionalProperties());

    }    
    @Test
    public void testGetHostClusterById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-HostCluster-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string2";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("HostCluster");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        HostCluster hostClusterEntity = subjectAreaBeansToAccessOMRS.getHostClusterById(testuserid, testguid1);
        assertEquals(hostClusterEntity.getName(),name);
        assertEquals(hostClusterEntity.getDescription(),description);
        assertEquals(hostClusterEntity.getOwner(),owner);
        assertEquals(hostClusterEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateHostCluster() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateHostCluster";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String owner = "string2";
            primitivePropertyValue.setPrimitiveValue(owner);
            instanceProperties.setProperty("owner", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string3";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("HostCluster");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            HostCluster requestedHostCluster = new HostCluster();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedHostCluster.setSystemAttributes(systemAttributes);

            requestedHostCluster.setName(name);

            requestedHostCluster.setDescription(description);

            requestedHostCluster.setOwner(owner);

            requestedHostCluster.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedHostCluster.setAdditionalProperties(mapValue);
            HostCluster returnedHostCluster = subjectAreaBeansToAccessOMRS.updateHostCluster(testuserid,requestedHostCluster);
            assertEquals(requestedHostCluster.getName(),returnedHostCluster.getName());

            assertEquals(requestedHostCluster.getDescription(),returnedHostCluster.getDescription());

            assertEquals(requestedHostCluster.getOwner(),returnedHostCluster.getOwner());

            assertEquals(requestedHostCluster.getQualifiedName(),returnedHostCluster.getQualifiedName());

            assertEquals(requestedHostCluster.getAdditionalProperties(),returnedHostCluster.getAdditionalProperties());

        }
@Test
    public void testCreateGlossary() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateGlossary";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String language = "string2";
        primitivePropertyValue.setPrimitiveValue(language);
        instanceProperties.setProperty("language", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String usage = "string3";
        primitivePropertyValue.setPrimitiveValue(usage);
        instanceProperties.setProperty("usage", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string4";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Glossary");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Glossary requestedGlossary = new Glossary();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedGlossary.setSystemAttributes(systemAttributes);

        requestedGlossary.setDisplayName(displayName);

        requestedGlossary.setDescription(description);

        requestedGlossary.setLanguage(language);

        requestedGlossary.setUsage(usage);

        requestedGlossary.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedGlossary.setAdditionalProperties(mapValue);
        Glossary returnedGlossary = subjectAreaBeansToAccessOMRS.createGlossary(testuserid, requestedGlossary);
        assertEquals(requestedGlossary.getDisplayName(),returnedGlossary.getDisplayName());

        assertEquals(requestedGlossary.getDescription(),returnedGlossary.getDescription());

        assertEquals(requestedGlossary.getLanguage(),returnedGlossary.getLanguage());

        assertEquals(requestedGlossary.getUsage(),returnedGlossary.getUsage());

        assertEquals(requestedGlossary.getQualifiedName(),returnedGlossary.getQualifiedName());

        assertEquals(requestedGlossary.getAdditionalProperties(),returnedGlossary.getAdditionalProperties());

    }    
    @Test
    public void testGetGlossaryById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-Glossary-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String language = "string2";
        primitivePropertyValue.setPrimitiveValue(language);
        instanceProperties.setProperty("language", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String usage = "string3";
        primitivePropertyValue.setPrimitiveValue(usage);
        instanceProperties.setProperty("usage", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string4";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Glossary");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Glossary glossaryEntity = subjectAreaBeansToAccessOMRS.getGlossaryById(testuserid, testguid1);
        assertEquals(glossaryEntity.getDisplayName(),displayName);
        assertEquals(glossaryEntity.getDescription(),description);
        assertEquals(glossaryEntity.getLanguage(),language);
        assertEquals(glossaryEntity.getUsage(),usage);
        assertEquals(glossaryEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateGlossary() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGlossary";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String displayName = "string0";
            primitivePropertyValue.setPrimitiveValue(displayName);
            instanceProperties.setProperty("displayName", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String language = "string2";
            primitivePropertyValue.setPrimitiveValue(language);
            instanceProperties.setProperty("language", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String usage = "string3";
            primitivePropertyValue.setPrimitiveValue(usage);
            instanceProperties.setProperty("usage", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string4";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("Glossary");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Glossary requestedGlossary = new Glossary();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedGlossary.setSystemAttributes(systemAttributes);

            requestedGlossary.setDisplayName(displayName);

            requestedGlossary.setDescription(description);

            requestedGlossary.setLanguage(language);

            requestedGlossary.setUsage(usage);

            requestedGlossary.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedGlossary.setAdditionalProperties(mapValue);
            Glossary returnedGlossary = subjectAreaBeansToAccessOMRS.updateGlossary(testuserid,requestedGlossary);
            assertEquals(requestedGlossary.getDisplayName(),returnedGlossary.getDisplayName());

            assertEquals(requestedGlossary.getDescription(),returnedGlossary.getDescription());

            assertEquals(requestedGlossary.getLanguage(),returnedGlossary.getLanguage());

            assertEquals(requestedGlossary.getUsage(),returnedGlossary.getUsage());

            assertEquals(requestedGlossary.getQualifiedName(),returnedGlossary.getQualifiedName());

            assertEquals(requestedGlossary.getAdditionalProperties(),returnedGlossary.getAdditionalProperties());

        }
@Test
    public void testCreateGlossaryCategory() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateGlossaryCategory";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String glossaryName = "string2";
        primitivePropertyValue.setPrimitiveValue(glossaryName);
        instanceProperties.setProperty("glossaryName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GlossaryCategory");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GlossaryCategory requestedGlossaryCategory = new GlossaryCategory();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedGlossaryCategory.setSystemAttributes(systemAttributes);

        requestedGlossaryCategory.setDisplayName(displayName);

        requestedGlossaryCategory.setDescription(description);

        requestedGlossaryCategory.setGlossaryName(glossaryName);

        requestedGlossaryCategory.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedGlossaryCategory.setAdditionalProperties(mapValue);
        GlossaryCategory returnedGlossaryCategory = subjectAreaBeansToAccessOMRS.createGlossaryCategory(testuserid, requestedGlossaryCategory);
        assertEquals(requestedGlossaryCategory.getDisplayName(),returnedGlossaryCategory.getDisplayName());

        assertEquals(requestedGlossaryCategory.getDescription(),returnedGlossaryCategory.getDescription());

        assertEquals(requestedGlossaryCategory.getGlossaryName(),returnedGlossaryCategory.getGlossaryName());

        assertEquals(requestedGlossaryCategory.getQualifiedName(),returnedGlossaryCategory.getQualifiedName());

        assertEquals(requestedGlossaryCategory.getAdditionalProperties(),returnedGlossaryCategory.getAdditionalProperties());

    }    
    @Test
    public void testGetGlossaryCategoryById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-GlossaryCategory-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String glossaryName = "string2";
        primitivePropertyValue.setPrimitiveValue(glossaryName);
        instanceProperties.setProperty("glossaryName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GlossaryCategory");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GlossaryCategory glossaryCategoryEntity = subjectAreaBeansToAccessOMRS.getGlossaryCategoryById(testuserid, testguid1);
        assertEquals(glossaryCategoryEntity.getDisplayName(),displayName);
        assertEquals(glossaryCategoryEntity.getDescription(),description);
        assertEquals(glossaryCategoryEntity.getGlossaryName(),glossaryName);
        assertEquals(glossaryCategoryEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateGlossaryCategory() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGlossaryCategory";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String displayName = "string0";
            primitivePropertyValue.setPrimitiveValue(displayName);
            instanceProperties.setProperty("displayName", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String glossaryName = "string2";
            primitivePropertyValue.setPrimitiveValue(glossaryName);
            instanceProperties.setProperty("glossaryName", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string3";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("GlossaryCategory");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GlossaryCategory requestedGlossaryCategory = new GlossaryCategory();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedGlossaryCategory.setSystemAttributes(systemAttributes);

            requestedGlossaryCategory.setDisplayName(displayName);

            requestedGlossaryCategory.setDescription(description);

            requestedGlossaryCategory.setGlossaryName(glossaryName);

            requestedGlossaryCategory.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedGlossaryCategory.setAdditionalProperties(mapValue);
            GlossaryCategory returnedGlossaryCategory = subjectAreaBeansToAccessOMRS.updateGlossaryCategory(testuserid,requestedGlossaryCategory);
            assertEquals(requestedGlossaryCategory.getDisplayName(),returnedGlossaryCategory.getDisplayName());

            assertEquals(requestedGlossaryCategory.getDescription(),returnedGlossaryCategory.getDescription());

            assertEquals(requestedGlossaryCategory.getGlossaryName(),returnedGlossaryCategory.getGlossaryName());

            assertEquals(requestedGlossaryCategory.getQualifiedName(),returnedGlossaryCategory.getQualifiedName());

            assertEquals(requestedGlossaryCategory.getAdditionalProperties(),returnedGlossaryCategory.getAdditionalProperties());

        }
@Test
    public void testCreateMediaCollection() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateMediaCollection";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string2";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("MediaCollection");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        MediaCollection requestedMediaCollection = new MediaCollection();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedMediaCollection.setSystemAttributes(systemAttributes);

        requestedMediaCollection.setName(name);

        requestedMediaCollection.setDescription(description);

        requestedMediaCollection.setOwner(owner);

        requestedMediaCollection.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedMediaCollection.setAdditionalProperties(mapValue);
        MediaCollection returnedMediaCollection = subjectAreaBeansToAccessOMRS.createMediaCollection(testuserid, requestedMediaCollection);
        assertEquals(requestedMediaCollection.getName(),returnedMediaCollection.getName());

        assertEquals(requestedMediaCollection.getDescription(),returnedMediaCollection.getDescription());

        assertEquals(requestedMediaCollection.getOwner(),returnedMediaCollection.getOwner());

        assertEquals(requestedMediaCollection.getQualifiedName(),returnedMediaCollection.getQualifiedName());

        assertEquals(requestedMediaCollection.getAdditionalProperties(),returnedMediaCollection.getAdditionalProperties());

    }    
    @Test
    public void testGetMediaCollectionById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-MediaCollection-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string2";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("MediaCollection");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        MediaCollection mediaCollectionEntity = subjectAreaBeansToAccessOMRS.getMediaCollectionById(testuserid, testguid1);
        assertEquals(mediaCollectionEntity.getName(),name);
        assertEquals(mediaCollectionEntity.getDescription(),description);
        assertEquals(mediaCollectionEntity.getOwner(),owner);
        assertEquals(mediaCollectionEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateMediaCollection() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateMediaCollection";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String owner = "string2";
            primitivePropertyValue.setPrimitiveValue(owner);
            instanceProperties.setProperty("owner", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string3";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("MediaCollection");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            MediaCollection requestedMediaCollection = new MediaCollection();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedMediaCollection.setSystemAttributes(systemAttributes);

            requestedMediaCollection.setName(name);

            requestedMediaCollection.setDescription(description);

            requestedMediaCollection.setOwner(owner);

            requestedMediaCollection.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedMediaCollection.setAdditionalProperties(mapValue);
            MediaCollection returnedMediaCollection = subjectAreaBeansToAccessOMRS.updateMediaCollection(testuserid,requestedMediaCollection);
            assertEquals(requestedMediaCollection.getName(),returnedMediaCollection.getName());

            assertEquals(requestedMediaCollection.getDescription(),returnedMediaCollection.getDescription());

            assertEquals(requestedMediaCollection.getOwner(),returnedMediaCollection.getOwner());

            assertEquals(requestedMediaCollection.getQualifiedName(),returnedMediaCollection.getQualifiedName());

            assertEquals(requestedMediaCollection.getAdditionalProperties(),returnedMediaCollection.getAdditionalProperties());

        }
@Test
    public void testCreateCollection() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateCollection";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string2";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Collection");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Collection requestedCollection = new Collection();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedCollection.setSystemAttributes(systemAttributes);

        requestedCollection.setName(name);

        requestedCollection.setDescription(description);

        requestedCollection.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedCollection.setAdditionalProperties(mapValue);
        Collection returnedCollection = subjectAreaBeansToAccessOMRS.createCollection(testuserid, requestedCollection);
        assertEquals(requestedCollection.getName(),returnedCollection.getName());

        assertEquals(requestedCollection.getDescription(),returnedCollection.getDescription());

        assertEquals(requestedCollection.getQualifiedName(),returnedCollection.getQualifiedName());

        assertEquals(requestedCollection.getAdditionalProperties(),returnedCollection.getAdditionalProperties());

    }    
    @Test
    public void testGetCollectionById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-Collection-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string2";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Collection");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Collection collectionEntity = subjectAreaBeansToAccessOMRS.getCollectionById(testuserid, testguid1);
        assertEquals(collectionEntity.getName(),name);
        assertEquals(collectionEntity.getDescription(),description);
        assertEquals(collectionEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateCollection() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateCollection";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string2";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("Collection");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Collection requestedCollection = new Collection();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedCollection.setSystemAttributes(systemAttributes);

            requestedCollection.setName(name);

            requestedCollection.setDescription(description);

            requestedCollection.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedCollection.setAdditionalProperties(mapValue);
            Collection returnedCollection = subjectAreaBeansToAccessOMRS.updateCollection(testuserid,requestedCollection);
            assertEquals(requestedCollection.getName(),returnedCollection.getName());

            assertEquals(requestedCollection.getDescription(),returnedCollection.getDescription());

            assertEquals(requestedCollection.getQualifiedName(),returnedCollection.getQualifiedName());

            assertEquals(requestedCollection.getAdditionalProperties(),returnedCollection.getAdditionalProperties());

        }
@Test
    public void testCreateInformalTag() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateInformalTag";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String tagName = "string0";
        primitivePropertyValue.setPrimitiveValue(tagName);
        instanceProperties.setProperty("tagName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String tagDescription = "string1";
        primitivePropertyValue.setPrimitiveValue(tagDescription);
        instanceProperties.setProperty("tagDescription", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("InformalTag");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        InformalTag requestedInformalTag = new InformalTag();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedInformalTag.setSystemAttributes(systemAttributes);

        requestedInformalTag.setTagName(tagName);

        requestedInformalTag.setTagDescription(tagDescription);

        Map<String,String>  mapValue=null;

        InformalTag returnedInformalTag = subjectAreaBeansToAccessOMRS.createInformalTag(testuserid, requestedInformalTag);
        assertEquals(requestedInformalTag.getTagName(),returnedInformalTag.getTagName());

        assertEquals(requestedInformalTag.getTagDescription(),returnedInformalTag.getTagDescription());

    }    
    @Test
    public void testGetInformalTagById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-InformalTag-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String tagName = "string0";
        primitivePropertyValue.setPrimitiveValue(tagName);
        instanceProperties.setProperty("tagName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String tagDescription = "string1";
        primitivePropertyValue.setPrimitiveValue(tagDescription);
        instanceProperties.setProperty("tagDescription", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("InformalTag");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        InformalTag informalTagEntity = subjectAreaBeansToAccessOMRS.getInformalTagById(testuserid, testguid1);
        assertEquals(informalTagEntity.getTagName(),tagName);
        assertEquals(informalTagEntity.getTagDescription(),tagDescription);
    }
    @Test
        public void testUpdateInformalTag() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateInformalTag";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String tagName = "string0";
            primitivePropertyValue.setPrimitiveValue(tagName);
            instanceProperties.setProperty("tagName", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String tagDescription = "string1";
            primitivePropertyValue.setPrimitiveValue(tagDescription);
            instanceProperties.setProperty("tagDescription", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("InformalTag");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            InformalTag requestedInformalTag = new InformalTag();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedInformalTag.setSystemAttributes(systemAttributes);

            requestedInformalTag.setTagName(tagName);

            requestedInformalTag.setTagDescription(tagDescription);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            InformalTag returnedInformalTag = subjectAreaBeansToAccessOMRS.updateInformalTag(testuserid,requestedInformalTag);
            assertEquals(requestedInformalTag.getTagName(),returnedInformalTag.getTagName());

            assertEquals(requestedInformalTag.getTagDescription(),returnedInformalTag.getTagDescription());

        }
@Test
    public void testCreateGovernanceZone() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateGovernanceZone";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String criteria = "string2";
        primitivePropertyValue.setPrimitiveValue(criteria);
        instanceProperties.setProperty("criteria", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GovernanceZone");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GovernanceZone requestedGovernanceZone = new GovernanceZone();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedGovernanceZone.setSystemAttributes(systemAttributes);

        requestedGovernanceZone.setDisplayName(displayName);

        requestedGovernanceZone.setDescription(description);

        requestedGovernanceZone.setCriteria(criteria);

        requestedGovernanceZone.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedGovernanceZone.setAdditionalProperties(mapValue);
        GovernanceZone returnedGovernanceZone = subjectAreaBeansToAccessOMRS.createGovernanceZone(testuserid, requestedGovernanceZone);
        assertEquals(requestedGovernanceZone.getDisplayName(),returnedGovernanceZone.getDisplayName());

        assertEquals(requestedGovernanceZone.getDescription(),returnedGovernanceZone.getDescription());

        assertEquals(requestedGovernanceZone.getCriteria(),returnedGovernanceZone.getCriteria());

        assertEquals(requestedGovernanceZone.getQualifiedName(),returnedGovernanceZone.getQualifiedName());

        assertEquals(requestedGovernanceZone.getAdditionalProperties(),returnedGovernanceZone.getAdditionalProperties());

    }    
    @Test
    public void testGetGovernanceZoneById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-GovernanceZone-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String criteria = "string2";
        primitivePropertyValue.setPrimitiveValue(criteria);
        instanceProperties.setProperty("criteria", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GovernanceZone");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GovernanceZone governanceZoneEntity = subjectAreaBeansToAccessOMRS.getGovernanceZoneById(testuserid, testguid1);
        assertEquals(governanceZoneEntity.getDisplayName(),displayName);
        assertEquals(governanceZoneEntity.getDescription(),description);
        assertEquals(governanceZoneEntity.getCriteria(),criteria);
        assertEquals(governanceZoneEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateGovernanceZone() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGovernanceZone";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String displayName = "string0";
            primitivePropertyValue.setPrimitiveValue(displayName);
            instanceProperties.setProperty("displayName", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String criteria = "string2";
            primitivePropertyValue.setPrimitiveValue(criteria);
            instanceProperties.setProperty("criteria", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string3";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("GovernanceZone");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceZone requestedGovernanceZone = new GovernanceZone();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedGovernanceZone.setSystemAttributes(systemAttributes);

            requestedGovernanceZone.setDisplayName(displayName);

            requestedGovernanceZone.setDescription(description);

            requestedGovernanceZone.setCriteria(criteria);

            requestedGovernanceZone.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedGovernanceZone.setAdditionalProperties(mapValue);
            GovernanceZone returnedGovernanceZone = subjectAreaBeansToAccessOMRS.updateGovernanceZone(testuserid,requestedGovernanceZone);
            assertEquals(requestedGovernanceZone.getDisplayName(),returnedGovernanceZone.getDisplayName());

            assertEquals(requestedGovernanceZone.getDescription(),returnedGovernanceZone.getDescription());

            assertEquals(requestedGovernanceZone.getCriteria(),returnedGovernanceZone.getCriteria());

            assertEquals(requestedGovernanceZone.getQualifiedName(),returnedGovernanceZone.getQualifiedName());

            assertEquals(requestedGovernanceZone.getAdditionalProperties(),returnedGovernanceZone.getAdditionalProperties());

        }
@Test
    public void testCreatePerson() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreatePerson";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_INT);
        Integer karmaPoints = new Integer(0);
        primitivePropertyValue.setPrimitiveValue(karmaPoints);
        instanceProperties.setProperty("karmaPoints", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string1";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string2";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Person");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Person requestedPerson = new Person();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedPerson.setSystemAttributes(systemAttributes);

        requestedPerson.setKarmaPoints(karmaPoints);

        requestedPerson.setName(name);

        requestedPerson.setDescription(description);

        requestedPerson.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedPerson.setAdditionalProperties(mapValue);
        Person returnedPerson = subjectAreaBeansToAccessOMRS.createPerson(testuserid, requestedPerson);
        assertEquals(requestedPerson.getKarmaPoints(),returnedPerson.getKarmaPoints());

        assertEquals(requestedPerson.getName(),returnedPerson.getName());

        assertEquals(requestedPerson.getDescription(),returnedPerson.getDescription());

        assertEquals(requestedPerson.getQualifiedName(),returnedPerson.getQualifiedName());

        assertEquals(requestedPerson.getAdditionalProperties(),returnedPerson.getAdditionalProperties());

    }    
    @Test
    public void testGetPersonById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-Person-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_INT);
        Integer karmaPoints = new Integer(0);
        primitivePropertyValue.setPrimitiveValue(karmaPoints);
        instanceProperties.setProperty("karmaPoints", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string1";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string2";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Person");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Person personEntity = subjectAreaBeansToAccessOMRS.getPersonById(testuserid, testguid1);
        assertEquals(personEntity.getKarmaPoints(),karmaPoints);
        assertEquals(personEntity.getName(),name);
        assertEquals(personEntity.getDescription(),description);
        assertEquals(personEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdatePerson() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdatePerson";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_INT);
            Integer karmaPoints = new Integer(0);
            primitivePropertyValue.setPrimitiveValue(karmaPoints);
            instanceProperties.setProperty("karmaPoints", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string1";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string2";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string3";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("Person");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Person requestedPerson = new Person();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedPerson.setSystemAttributes(systemAttributes);

            requestedPerson.setKarmaPoints(karmaPoints);

            requestedPerson.setName(name);

            requestedPerson.setDescription(description);

            requestedPerson.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedPerson.setAdditionalProperties(mapValue);
            Person returnedPerson = subjectAreaBeansToAccessOMRS.updatePerson(testuserid,requestedPerson);
            assertEquals(requestedPerson.getKarmaPoints(),returnedPerson.getKarmaPoints());

            assertEquals(requestedPerson.getName(),returnedPerson.getName());

            assertEquals(requestedPerson.getDescription(),returnedPerson.getDescription());

            assertEquals(requestedPerson.getQualifiedName(),returnedPerson.getQualifiedName());

            assertEquals(requestedPerson.getAdditionalProperties(),returnedPerson.getAdditionalProperties());

        }
@Test
    public void testCreateApplication() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateApplication";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String type = "string2";
        primitivePropertyValue.setPrimitiveValue(type);
        instanceProperties.setProperty("type", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String version = "string3";
        primitivePropertyValue.setPrimitiveValue(version);
        instanceProperties.setProperty("version", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String patchLevel = "string4";
        primitivePropertyValue.setPrimitiveValue(patchLevel);
        instanceProperties.setProperty("patchLevel", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String source = "string5";
        primitivePropertyValue.setPrimitiveValue(source);
        instanceProperties.setProperty("source", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string6";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Application");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Application requestedApplication = new Application();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedApplication.setSystemAttributes(systemAttributes);

        requestedApplication.setName(name);

        requestedApplication.setDescription(description);

        requestedApplication.setType(type);

        requestedApplication.setVersion(version);

        requestedApplication.setPatchLevel(patchLevel);

        requestedApplication.setSource(source);

        requestedApplication.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedApplication.setAdditionalProperties(mapValue);
        Application returnedApplication = subjectAreaBeansToAccessOMRS.createApplication(testuserid, requestedApplication);
        assertEquals(requestedApplication.getName(),returnedApplication.getName());

        assertEquals(requestedApplication.getDescription(),returnedApplication.getDescription());

        assertEquals(requestedApplication.getType(),returnedApplication.getType());

        assertEquals(requestedApplication.getVersion(),returnedApplication.getVersion());

        assertEquals(requestedApplication.getPatchLevel(),returnedApplication.getPatchLevel());

        assertEquals(requestedApplication.getSource(),returnedApplication.getSource());

        assertEquals(requestedApplication.getQualifiedName(),returnedApplication.getQualifiedName());

        assertEquals(requestedApplication.getAdditionalProperties(),returnedApplication.getAdditionalProperties());

    }    
    @Test
    public void testGetApplicationById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-Application-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String type = "string2";
        primitivePropertyValue.setPrimitiveValue(type);
        instanceProperties.setProperty("type", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String version = "string3";
        primitivePropertyValue.setPrimitiveValue(version);
        instanceProperties.setProperty("version", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String patchLevel = "string4";
        primitivePropertyValue.setPrimitiveValue(patchLevel);
        instanceProperties.setProperty("patchLevel", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String source = "string5";
        primitivePropertyValue.setPrimitiveValue(source);
        instanceProperties.setProperty("source", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string6";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Application");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Application applicationEntity = subjectAreaBeansToAccessOMRS.getApplicationById(testuserid, testguid1);
        assertEquals(applicationEntity.getName(),name);
        assertEquals(applicationEntity.getDescription(),description);
        assertEquals(applicationEntity.getType(),type);
        assertEquals(applicationEntity.getVersion(),version);
        assertEquals(applicationEntity.getPatchLevel(),patchLevel);
        assertEquals(applicationEntity.getSource(),source);
        assertEquals(applicationEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateApplication() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateApplication";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String type = "string2";
            primitivePropertyValue.setPrimitiveValue(type);
            instanceProperties.setProperty("type", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String version = "string3";
            primitivePropertyValue.setPrimitiveValue(version);
            instanceProperties.setProperty("version", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String patchLevel = "string4";
            primitivePropertyValue.setPrimitiveValue(patchLevel);
            instanceProperties.setProperty("patchLevel", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string5";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string6";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("Application");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Application requestedApplication = new Application();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedApplication.setSystemAttributes(systemAttributes);

            requestedApplication.setName(name);

            requestedApplication.setDescription(description);

            requestedApplication.setType(type);

            requestedApplication.setVersion(version);

            requestedApplication.setPatchLevel(patchLevel);

            requestedApplication.setSource(source);

            requestedApplication.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedApplication.setAdditionalProperties(mapValue);
            Application returnedApplication = subjectAreaBeansToAccessOMRS.updateApplication(testuserid,requestedApplication);
            assertEquals(requestedApplication.getName(),returnedApplication.getName());

            assertEquals(requestedApplication.getDescription(),returnedApplication.getDescription());

            assertEquals(requestedApplication.getType(),returnedApplication.getType());

            assertEquals(requestedApplication.getVersion(),returnedApplication.getVersion());

            assertEquals(requestedApplication.getPatchLevel(),returnedApplication.getPatchLevel());

            assertEquals(requestedApplication.getSource(),returnedApplication.getSource());

            assertEquals(requestedApplication.getQualifiedName(),returnedApplication.getQualifiedName());

            assertEquals(requestedApplication.getAdditionalProperties(),returnedApplication.getAdditionalProperties());

        }
@Test
    public void testCreateVirtualContainer() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateVirtualContainer";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string2";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("VirtualContainer");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        VirtualContainer requestedVirtualContainer = new VirtualContainer();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedVirtualContainer.setSystemAttributes(systemAttributes);

        requestedVirtualContainer.setName(name);

        requestedVirtualContainer.setDescription(description);

        requestedVirtualContainer.setOwner(owner);

        requestedVirtualContainer.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedVirtualContainer.setAdditionalProperties(mapValue);
        VirtualContainer returnedVirtualContainer = subjectAreaBeansToAccessOMRS.createVirtualContainer(testuserid, requestedVirtualContainer);
        assertEquals(requestedVirtualContainer.getName(),returnedVirtualContainer.getName());

        assertEquals(requestedVirtualContainer.getDescription(),returnedVirtualContainer.getDescription());

        assertEquals(requestedVirtualContainer.getOwner(),returnedVirtualContainer.getOwner());

        assertEquals(requestedVirtualContainer.getQualifiedName(),returnedVirtualContainer.getQualifiedName());

        assertEquals(requestedVirtualContainer.getAdditionalProperties(),returnedVirtualContainer.getAdditionalProperties());

    }    
    @Test
    public void testGetVirtualContainerById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-VirtualContainer-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string2";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("VirtualContainer");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        VirtualContainer virtualContainerEntity = subjectAreaBeansToAccessOMRS.getVirtualContainerById(testuserid, testguid1);
        assertEquals(virtualContainerEntity.getName(),name);
        assertEquals(virtualContainerEntity.getDescription(),description);
        assertEquals(virtualContainerEntity.getOwner(),owner);
        assertEquals(virtualContainerEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateVirtualContainer() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateVirtualContainer";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String owner = "string2";
            primitivePropertyValue.setPrimitiveValue(owner);
            instanceProperties.setProperty("owner", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string3";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("VirtualContainer");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            VirtualContainer requestedVirtualContainer = new VirtualContainer();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedVirtualContainer.setSystemAttributes(systemAttributes);

            requestedVirtualContainer.setName(name);

            requestedVirtualContainer.setDescription(description);

            requestedVirtualContainer.setOwner(owner);

            requestedVirtualContainer.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedVirtualContainer.setAdditionalProperties(mapValue);
            VirtualContainer returnedVirtualContainer = subjectAreaBeansToAccessOMRS.updateVirtualContainer(testuserid,requestedVirtualContainer);
            assertEquals(requestedVirtualContainer.getName(),returnedVirtualContainer.getName());

            assertEquals(requestedVirtualContainer.getDescription(),returnedVirtualContainer.getDescription());

            assertEquals(requestedVirtualContainer.getOwner(),returnedVirtualContainer.getOwner());

            assertEquals(requestedVirtualContainer.getQualifiedName(),returnedVirtualContainer.getQualifiedName());

            assertEquals(requestedVirtualContainer.getAdditionalProperties(),returnedVirtualContainer.getAdditionalProperties());

        }
@Test
    public void testCreateGovernanceDriver() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateGovernanceDriver";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String title = "string0";
        primitivePropertyValue.setPrimitiveValue(title);
        instanceProperties.setProperty("title", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String summary = "string1";
        primitivePropertyValue.setPrimitiveValue(summary);
        instanceProperties.setProperty("summary", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string2";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String scope = "string3";
        primitivePropertyValue.setPrimitiveValue(scope);
        instanceProperties.setProperty("scope", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String priority = "string4";
        primitivePropertyValue.setPrimitiveValue(priority);
        instanceProperties.setProperty("priority", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string8";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String implications = "string5";
        primitivePropertyValue.setPrimitiveValue(implications);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("implications", arrayPropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String outcomes = "string6";
        primitivePropertyValue.setPrimitiveValue(outcomes);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("outcomes", arrayPropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String results = "string7";
        primitivePropertyValue.setPrimitiveValue(results);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("results", arrayPropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", enumPropertyValue);

        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GovernanceDriver");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GovernanceDriver requestedGovernanceDriver = new GovernanceDriver();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedGovernanceDriver.setSystemAttributes(systemAttributes);

        requestedGovernanceDriver.setTitle(title);

        requestedGovernanceDriver.setSummary(summary);

        requestedGovernanceDriver.setDescription(description);

        requestedGovernanceDriver.setScope(scope);

        requestedGovernanceDriver.setPriority(priority);

        requestedGovernanceDriver.setQualifiedName(qualifiedName);

        EnumPropertyValue GovernanceDomainEnumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        GovernanceDomainEnumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", GovernanceDomainEnumPropertyValue);

        requestedGovernanceDriver.setDomain(GovernanceDomain.values()[0]);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedGovernanceDriver.setAdditionalProperties(mapValue);
        GovernanceDriver returnedGovernanceDriver = subjectAreaBeansToAccessOMRS.createGovernanceDriver(testuserid, requestedGovernanceDriver);
        assertEquals(requestedGovernanceDriver.getTitle(),returnedGovernanceDriver.getTitle());

        assertEquals(requestedGovernanceDriver.getSummary(),returnedGovernanceDriver.getSummary());

        assertEquals(requestedGovernanceDriver.getDescription(),returnedGovernanceDriver.getDescription());

        assertEquals(requestedGovernanceDriver.getScope(),returnedGovernanceDriver.getScope());

        assertEquals(requestedGovernanceDriver.getPriority(),returnedGovernanceDriver.getPriority());

        assertEquals(requestedGovernanceDriver.getQualifiedName(),returnedGovernanceDriver.getQualifiedName());

        assertEquals(requestedGovernanceDriver.getDomain(),returnedGovernanceDriver.getDomain());

        assertEquals(requestedGovernanceDriver.getAdditionalProperties(),returnedGovernanceDriver.getAdditionalProperties());

    }    
    @Test
    public void testGetGovernanceDriverById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-GovernanceDriver-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String title = "string0";
        primitivePropertyValue.setPrimitiveValue(title);
        instanceProperties.setProperty("title", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String summary = "string1";
        primitivePropertyValue.setPrimitiveValue(summary);
        instanceProperties.setProperty("summary", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string2";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String scope = "string3";
        primitivePropertyValue.setPrimitiveValue(scope);
        instanceProperties.setProperty("scope", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String priority = "string4";
        primitivePropertyValue.setPrimitiveValue(priority);
        instanceProperties.setProperty("priority", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string8";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", enumPropertyValue);

        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GovernanceDriver");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GovernanceDriver governanceDriverEntity = subjectAreaBeansToAccessOMRS.getGovernanceDriverById(testuserid, testguid1);
        assertEquals(governanceDriverEntity.getTitle(),title);
        assertEquals(governanceDriverEntity.getSummary(),summary);
        assertEquals(governanceDriverEntity.getDescription(),description);
        assertEquals(governanceDriverEntity.getScope(),scope);
        assertEquals(governanceDriverEntity.getPriority(),priority);
        assertEquals(governanceDriverEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateGovernanceDriver() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGovernanceDriver";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String title = "string0";
            primitivePropertyValue.setPrimitiveValue(title);
            instanceProperties.setProperty("title", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String summary = "string1";
            primitivePropertyValue.setPrimitiveValue(summary);
            instanceProperties.setProperty("summary", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string2";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String scope = "string3";
            primitivePropertyValue.setPrimitiveValue(scope);
            instanceProperties.setProperty("scope", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String priority = "string4";
            primitivePropertyValue.setPrimitiveValue(priority);
            instanceProperties.setProperty("priority", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string8";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
            instanceProperties.setProperty("domain", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("GovernanceDriver");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceDriver requestedGovernanceDriver = new GovernanceDriver();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedGovernanceDriver.setSystemAttributes(systemAttributes);

            requestedGovernanceDriver.setTitle(title);

            requestedGovernanceDriver.setSummary(summary);

            requestedGovernanceDriver.setDescription(description);

            requestedGovernanceDriver.setScope(scope);

            requestedGovernanceDriver.setPriority(priority);

            requestedGovernanceDriver.setQualifiedName(qualifiedName);

            EnumPropertyValue GovernanceDomainEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            GovernanceDomainEnumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
            instanceProperties.setProperty("domain", GovernanceDomainEnumPropertyValue);

            requestedGovernanceDriver.setDomain(GovernanceDomain.values()[0]);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedGovernanceDriver.setAdditionalProperties(mapValue);
            GovernanceDriver returnedGovernanceDriver = subjectAreaBeansToAccessOMRS.updateGovernanceDriver(testuserid,requestedGovernanceDriver);
            assertEquals(requestedGovernanceDriver.getTitle(),returnedGovernanceDriver.getTitle());

            assertEquals(requestedGovernanceDriver.getSummary(),returnedGovernanceDriver.getSummary());

            assertEquals(requestedGovernanceDriver.getDescription(),returnedGovernanceDriver.getDescription());

            assertEquals(requestedGovernanceDriver.getScope(),returnedGovernanceDriver.getScope());

            assertEquals(requestedGovernanceDriver.getPriority(),returnedGovernanceDriver.getPriority());

            assertEquals(requestedGovernanceDriver.getQualifiedName(),returnedGovernanceDriver.getQualifiedName());

            assertEquals(requestedGovernanceDriver.getDomain(),returnedGovernanceDriver.getDomain());

            assertEquals(requestedGovernanceDriver.getAdditionalProperties(),returnedGovernanceDriver.getAdditionalProperties());

        }
@Test
    public void testCreateMeeting() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateMeeting";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String title = "string0";
        primitivePropertyValue.setPrimitiveValue(title);
        instanceProperties.setProperty("title", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
        java.util.Date startTime = new java.util.Date();
        primitivePropertyValue.setPrimitiveValue(startTime);
        instanceProperties.setProperty("startTime", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
        java.util.Date endTime = new java.util.Date();
        primitivePropertyValue.setPrimitiveValue(endTime);
        instanceProperties.setProperty("endTime", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String objective = "string3";
        primitivePropertyValue.setPrimitiveValue(objective);
        instanceProperties.setProperty("objective", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String minutes = "string4";
        primitivePropertyValue.setPrimitiveValue(minutes);
        instanceProperties.setProperty("minutes", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Meeting");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Meeting requestedMeeting = new Meeting();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedMeeting.setSystemAttributes(systemAttributes);

        requestedMeeting.setTitle(title);

        requestedMeeting.setStartTime(startTime);

        requestedMeeting.setEndTime(endTime);

        requestedMeeting.setObjective(objective);

        requestedMeeting.setMinutes(minutes);

        requestedMeeting.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedMeeting.setAdditionalProperties(mapValue);
        Meeting returnedMeeting = subjectAreaBeansToAccessOMRS.createMeeting(testuserid, requestedMeeting);
        assertEquals(requestedMeeting.getTitle(),returnedMeeting.getTitle());

        assertEquals(requestedMeeting.getStartTime(),returnedMeeting.getStartTime());

        assertEquals(requestedMeeting.getEndTime(),returnedMeeting.getEndTime());

        assertEquals(requestedMeeting.getObjective(),returnedMeeting.getObjective());

        assertEquals(requestedMeeting.getMinutes(),returnedMeeting.getMinutes());

        assertEquals(requestedMeeting.getQualifiedName(),returnedMeeting.getQualifiedName());

        assertEquals(requestedMeeting.getAdditionalProperties(),returnedMeeting.getAdditionalProperties());

    }    
    @Test
    public void testGetMeetingById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-Meeting-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String title = "string0";
        primitivePropertyValue.setPrimitiveValue(title);
        instanceProperties.setProperty("title", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
        java.util.Date startTime = new java.util.Date();
        primitivePropertyValue.setPrimitiveValue(startTime);
        instanceProperties.setProperty("startTime", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
        java.util.Date endTime = new java.util.Date();
        primitivePropertyValue.setPrimitiveValue(endTime);
        instanceProperties.setProperty("endTime", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String objective = "string3";
        primitivePropertyValue.setPrimitiveValue(objective);
        instanceProperties.setProperty("objective", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String minutes = "string4";
        primitivePropertyValue.setPrimitiveValue(minutes);
        instanceProperties.setProperty("minutes", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Meeting");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Meeting meetingEntity = subjectAreaBeansToAccessOMRS.getMeetingById(testuserid, testguid1);
        assertEquals(meetingEntity.getTitle(),title);
        assertEquals(meetingEntity.getStartTime(),startTime);
        assertEquals(meetingEntity.getEndTime(),endTime);
        assertEquals(meetingEntity.getObjective(),objective);
        assertEquals(meetingEntity.getMinutes(),minutes);
        assertEquals(meetingEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateMeeting() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateMeeting";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String title = "string0";
            primitivePropertyValue.setPrimitiveValue(title);
            instanceProperties.setProperty("title", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date startTime = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(startTime);
            instanceProperties.setProperty("startTime", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date endTime = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(endTime);
            instanceProperties.setProperty("endTime", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String objective = "string3";
            primitivePropertyValue.setPrimitiveValue(objective);
            instanceProperties.setProperty("objective", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String minutes = "string4";
            primitivePropertyValue.setPrimitiveValue(minutes);
            instanceProperties.setProperty("minutes", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string5";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("Meeting");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Meeting requestedMeeting = new Meeting();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedMeeting.setSystemAttributes(systemAttributes);

            requestedMeeting.setTitle(title);

            requestedMeeting.setStartTime(startTime);

            requestedMeeting.setEndTime(endTime);

            requestedMeeting.setObjective(objective);

            requestedMeeting.setMinutes(minutes);

            requestedMeeting.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedMeeting.setAdditionalProperties(mapValue);
            Meeting returnedMeeting = subjectAreaBeansToAccessOMRS.updateMeeting(testuserid,requestedMeeting);
            assertEquals(requestedMeeting.getTitle(),returnedMeeting.getTitle());

            assertEquals(requestedMeeting.getStartTime(),returnedMeeting.getStartTime());

            assertEquals(requestedMeeting.getEndTime(),returnedMeeting.getEndTime());

            assertEquals(requestedMeeting.getObjective(),returnedMeeting.getObjective());

            assertEquals(requestedMeeting.getMinutes(),returnedMeeting.getMinutes());

            assertEquals(requestedMeeting.getQualifiedName(),returnedMeeting.getQualifiedName());

            assertEquals(requestedMeeting.getAdditionalProperties(),returnedMeeting.getAdditionalProperties());

        }
@Test
    public void testCreateRating() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateRating";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String review = "string0";
        primitivePropertyValue.setPrimitiveValue(review);
        instanceProperties.setProperty("review", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(StarRating.values()[0].name());
        instanceProperties.setProperty("stars", enumPropertyValue);

        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Rating");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Rating requestedRating = new Rating();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedRating.setSystemAttributes(systemAttributes);

        requestedRating.setReview(review);

        EnumPropertyValue StarRatingEnumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        StarRatingEnumPropertyValue.setSymbolicName(StarRating.values()[0].name());
        instanceProperties.setProperty("stars", StarRatingEnumPropertyValue);

        requestedRating.setStars(StarRating.values()[0]);

        Map<String,String>  mapValue=null;

        Rating returnedRating = subjectAreaBeansToAccessOMRS.createRating(testuserid, requestedRating);
        assertEquals(requestedRating.getReview(),returnedRating.getReview());

        assertEquals(requestedRating.getStars(),returnedRating.getStars());

    }    
    @Test
    public void testGetRatingById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-Rating-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String review = "string0";
        primitivePropertyValue.setPrimitiveValue(review);
        instanceProperties.setProperty("review", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(StarRating.values()[0].name());
        instanceProperties.setProperty("stars", enumPropertyValue);

        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Rating");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Rating ratingEntity = subjectAreaBeansToAccessOMRS.getRatingById(testuserid, testguid1);
        assertEquals(ratingEntity.getReview(),review);
    }
    @Test
        public void testUpdateRating() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateRating";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String review = "string0";
            primitivePropertyValue.setPrimitiveValue(review);
            instanceProperties.setProperty("review", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(StarRating.values()[0].name());
            instanceProperties.setProperty("stars", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("Rating");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Rating requestedRating = new Rating();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedRating.setSystemAttributes(systemAttributes);

            requestedRating.setReview(review);

            EnumPropertyValue StarRatingEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            StarRatingEnumPropertyValue.setSymbolicName(StarRating.values()[0].name());
            instanceProperties.setProperty("stars", StarRatingEnumPropertyValue);

            requestedRating.setStars(StarRating.values()[0]);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            Rating returnedRating = subjectAreaBeansToAccessOMRS.updateRating(testuserid,requestedRating);
            assertEquals(requestedRating.getReview(),returnedRating.getReview());

            assertEquals(requestedRating.getStars(),returnedRating.getStars());

        }
@Test
    public void testCreateProjectCharter() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateProjectCharter";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String mission = "string0";
        primitivePropertyValue.setPrimitiveValue(mission);
        instanceProperties.setProperty("mission", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String projectType = "string1";
        primitivePropertyValue.setPrimitiveValue(projectType);
        instanceProperties.setProperty("projectType", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String purposes = "string2";
        primitivePropertyValue.setPrimitiveValue(purposes);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("purposes", arrayPropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("ProjectCharter");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        ProjectCharter requestedProjectCharter = new ProjectCharter();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedProjectCharter.setSystemAttributes(systemAttributes);

        requestedProjectCharter.setMission(mission);

        requestedProjectCharter.setProjectType(projectType);

        requestedProjectCharter.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedProjectCharter.setAdditionalProperties(mapValue);
        ProjectCharter returnedProjectCharter = subjectAreaBeansToAccessOMRS.createProjectCharter(testuserid, requestedProjectCharter);
        assertEquals(requestedProjectCharter.getMission(),returnedProjectCharter.getMission());

        assertEquals(requestedProjectCharter.getProjectType(),returnedProjectCharter.getProjectType());

        assertEquals(requestedProjectCharter.getQualifiedName(),returnedProjectCharter.getQualifiedName());

        assertEquals(requestedProjectCharter.getAdditionalProperties(),returnedProjectCharter.getAdditionalProperties());

    }    
    @Test
    public void testGetProjectCharterById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-ProjectCharter-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String mission = "string0";
        primitivePropertyValue.setPrimitiveValue(mission);
        instanceProperties.setProperty("mission", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String projectType = "string1";
        primitivePropertyValue.setPrimitiveValue(projectType);
        instanceProperties.setProperty("projectType", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("ProjectCharter");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        ProjectCharter projectCharterEntity = subjectAreaBeansToAccessOMRS.getProjectCharterById(testuserid, testguid1);
        assertEquals(projectCharterEntity.getMission(),mission);
        assertEquals(projectCharterEntity.getProjectType(),projectType);
        assertEquals(projectCharterEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateProjectCharter() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateProjectCharter";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String mission = "string0";
            primitivePropertyValue.setPrimitiveValue(mission);
            instanceProperties.setProperty("mission", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String projectType = "string1";
            primitivePropertyValue.setPrimitiveValue(projectType);
            instanceProperties.setProperty("projectType", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string3";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("ProjectCharter");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProjectCharter requestedProjectCharter = new ProjectCharter();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedProjectCharter.setSystemAttributes(systemAttributes);

            requestedProjectCharter.setMission(mission);

            requestedProjectCharter.setProjectType(projectType);

            requestedProjectCharter.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedProjectCharter.setAdditionalProperties(mapValue);
            ProjectCharter returnedProjectCharter = subjectAreaBeansToAccessOMRS.updateProjectCharter(testuserid,requestedProjectCharter);
            assertEquals(requestedProjectCharter.getMission(),returnedProjectCharter.getMission());

            assertEquals(requestedProjectCharter.getProjectType(),returnedProjectCharter.getProjectType());

            assertEquals(requestedProjectCharter.getQualifiedName(),returnedProjectCharter.getQualifiedName());

            assertEquals(requestedProjectCharter.getAdditionalProperties(),returnedProjectCharter.getAdditionalProperties());

        }
@Test
    public void testCreateSoftwareServerCapability() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateSoftwareServerCapability";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String type = "string2";
        primitivePropertyValue.setPrimitiveValue(type);
        instanceProperties.setProperty("type", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String version = "string3";
        primitivePropertyValue.setPrimitiveValue(version);
        instanceProperties.setProperty("version", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String patchLevel = "string4";
        primitivePropertyValue.setPrimitiveValue(patchLevel);
        instanceProperties.setProperty("patchLevel", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String source = "string5";
        primitivePropertyValue.setPrimitiveValue(source);
        instanceProperties.setProperty("source", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string6";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("SoftwareServerCapability");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        SoftwareServerCapability requestedSoftwareServerCapability = new SoftwareServerCapability();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedSoftwareServerCapability.setSystemAttributes(systemAttributes);

        requestedSoftwareServerCapability.setName(name);

        requestedSoftwareServerCapability.setDescription(description);

        requestedSoftwareServerCapability.setType(type);

        requestedSoftwareServerCapability.setVersion(version);

        requestedSoftwareServerCapability.setPatchLevel(patchLevel);

        requestedSoftwareServerCapability.setSource(source);

        requestedSoftwareServerCapability.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedSoftwareServerCapability.setAdditionalProperties(mapValue);
        SoftwareServerCapability returnedSoftwareServerCapability = subjectAreaBeansToAccessOMRS.createSoftwareServerCapability(testuserid, requestedSoftwareServerCapability);
        assertEquals(requestedSoftwareServerCapability.getName(),returnedSoftwareServerCapability.getName());

        assertEquals(requestedSoftwareServerCapability.getDescription(),returnedSoftwareServerCapability.getDescription());

        assertEquals(requestedSoftwareServerCapability.getType(),returnedSoftwareServerCapability.getType());

        assertEquals(requestedSoftwareServerCapability.getVersion(),returnedSoftwareServerCapability.getVersion());

        assertEquals(requestedSoftwareServerCapability.getPatchLevel(),returnedSoftwareServerCapability.getPatchLevel());

        assertEquals(requestedSoftwareServerCapability.getSource(),returnedSoftwareServerCapability.getSource());

        assertEquals(requestedSoftwareServerCapability.getQualifiedName(),returnedSoftwareServerCapability.getQualifiedName());

        assertEquals(requestedSoftwareServerCapability.getAdditionalProperties(),returnedSoftwareServerCapability.getAdditionalProperties());

    }    
    @Test
    public void testGetSoftwareServerCapabilityById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-SoftwareServerCapability-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String type = "string2";
        primitivePropertyValue.setPrimitiveValue(type);
        instanceProperties.setProperty("type", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String version = "string3";
        primitivePropertyValue.setPrimitiveValue(version);
        instanceProperties.setProperty("version", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String patchLevel = "string4";
        primitivePropertyValue.setPrimitiveValue(patchLevel);
        instanceProperties.setProperty("patchLevel", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String source = "string5";
        primitivePropertyValue.setPrimitiveValue(source);
        instanceProperties.setProperty("source", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string6";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("SoftwareServerCapability");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        SoftwareServerCapability softwareServerCapabilityEntity = subjectAreaBeansToAccessOMRS.getSoftwareServerCapabilityById(testuserid, testguid1);
        assertEquals(softwareServerCapabilityEntity.getName(),name);
        assertEquals(softwareServerCapabilityEntity.getDescription(),description);
        assertEquals(softwareServerCapabilityEntity.getType(),type);
        assertEquals(softwareServerCapabilityEntity.getVersion(),version);
        assertEquals(softwareServerCapabilityEntity.getPatchLevel(),patchLevel);
        assertEquals(softwareServerCapabilityEntity.getSource(),source);
        assertEquals(softwareServerCapabilityEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateSoftwareServerCapability() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateSoftwareServerCapability";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String type = "string2";
            primitivePropertyValue.setPrimitiveValue(type);
            instanceProperties.setProperty("type", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String version = "string3";
            primitivePropertyValue.setPrimitiveValue(version);
            instanceProperties.setProperty("version", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String patchLevel = "string4";
            primitivePropertyValue.setPrimitiveValue(patchLevel);
            instanceProperties.setProperty("patchLevel", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string5";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string6";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("SoftwareServerCapability");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SoftwareServerCapability requestedSoftwareServerCapability = new SoftwareServerCapability();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedSoftwareServerCapability.setSystemAttributes(systemAttributes);

            requestedSoftwareServerCapability.setName(name);

            requestedSoftwareServerCapability.setDescription(description);

            requestedSoftwareServerCapability.setType(type);

            requestedSoftwareServerCapability.setVersion(version);

            requestedSoftwareServerCapability.setPatchLevel(patchLevel);

            requestedSoftwareServerCapability.setSource(source);

            requestedSoftwareServerCapability.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedSoftwareServerCapability.setAdditionalProperties(mapValue);
            SoftwareServerCapability returnedSoftwareServerCapability = subjectAreaBeansToAccessOMRS.updateSoftwareServerCapability(testuserid,requestedSoftwareServerCapability);
            assertEquals(requestedSoftwareServerCapability.getName(),returnedSoftwareServerCapability.getName());

            assertEquals(requestedSoftwareServerCapability.getDescription(),returnedSoftwareServerCapability.getDescription());

            assertEquals(requestedSoftwareServerCapability.getType(),returnedSoftwareServerCapability.getType());

            assertEquals(requestedSoftwareServerCapability.getVersion(),returnedSoftwareServerCapability.getVersion());

            assertEquals(requestedSoftwareServerCapability.getPatchLevel(),returnedSoftwareServerCapability.getPatchLevel());

            assertEquals(requestedSoftwareServerCapability.getSource(),returnedSoftwareServerCapability.getSource());

            assertEquals(requestedSoftwareServerCapability.getQualifiedName(),returnedSoftwareServerCapability.getQualifiedName());

            assertEquals(requestedSoftwareServerCapability.getAdditionalProperties(),returnedSoftwareServerCapability.getAdditionalProperties());

        }
@Test
    public void testCreateLicenseType() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateLicenseType";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String details = "string0";
        primitivePropertyValue.setPrimitiveValue(details);
        instanceProperties.setProperty("details", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String title = "string1";
        primitivePropertyValue.setPrimitiveValue(title);
        instanceProperties.setProperty("title", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String summary = "string2";
        primitivePropertyValue.setPrimitiveValue(summary);
        instanceProperties.setProperty("summary", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string3";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String scope = "string4";
        primitivePropertyValue.setPrimitiveValue(scope);
        instanceProperties.setProperty("scope", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String priority = "string5";
        primitivePropertyValue.setPrimitiveValue(priority);
        instanceProperties.setProperty("priority", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string9";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String implications = "string6";
        primitivePropertyValue.setPrimitiveValue(implications);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("implications", arrayPropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String outcomes = "string7";
        primitivePropertyValue.setPrimitiveValue(outcomes);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("outcomes", arrayPropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String results = "string8";
        primitivePropertyValue.setPrimitiveValue(results);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("results", arrayPropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", enumPropertyValue);

        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("LicenseType");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        LicenseType requestedLicenseType = new LicenseType();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedLicenseType.setSystemAttributes(systemAttributes);

        requestedLicenseType.setDetails(details);

        requestedLicenseType.setTitle(title);

        requestedLicenseType.setSummary(summary);

        requestedLicenseType.setDescription(description);

        requestedLicenseType.setScope(scope);

        requestedLicenseType.setPriority(priority);

        requestedLicenseType.setQualifiedName(qualifiedName);

        EnumPropertyValue GovernanceDomainEnumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        GovernanceDomainEnumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", GovernanceDomainEnumPropertyValue);

        requestedLicenseType.setDomain(GovernanceDomain.values()[0]);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedLicenseType.setAdditionalProperties(mapValue);
        LicenseType returnedLicenseType = subjectAreaBeansToAccessOMRS.createLicenseType(testuserid, requestedLicenseType);
        assertEquals(requestedLicenseType.getDetails(),returnedLicenseType.getDetails());

        assertEquals(requestedLicenseType.getTitle(),returnedLicenseType.getTitle());

        assertEquals(requestedLicenseType.getSummary(),returnedLicenseType.getSummary());

        assertEquals(requestedLicenseType.getDescription(),returnedLicenseType.getDescription());

        assertEquals(requestedLicenseType.getScope(),returnedLicenseType.getScope());

        assertEquals(requestedLicenseType.getPriority(),returnedLicenseType.getPriority());

        assertEquals(requestedLicenseType.getQualifiedName(),returnedLicenseType.getQualifiedName());

        assertEquals(requestedLicenseType.getDomain(),returnedLicenseType.getDomain());

        assertEquals(requestedLicenseType.getAdditionalProperties(),returnedLicenseType.getAdditionalProperties());

    }    
    @Test
    public void testGetLicenseTypeById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-LicenseType-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String details = "string0";
        primitivePropertyValue.setPrimitiveValue(details);
        instanceProperties.setProperty("details", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String title = "string1";
        primitivePropertyValue.setPrimitiveValue(title);
        instanceProperties.setProperty("title", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String summary = "string2";
        primitivePropertyValue.setPrimitiveValue(summary);
        instanceProperties.setProperty("summary", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string3";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String scope = "string4";
        primitivePropertyValue.setPrimitiveValue(scope);
        instanceProperties.setProperty("scope", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String priority = "string5";
        primitivePropertyValue.setPrimitiveValue(priority);
        instanceProperties.setProperty("priority", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string9";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", enumPropertyValue);

        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("LicenseType");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        LicenseType licenseTypeEntity = subjectAreaBeansToAccessOMRS.getLicenseTypeById(testuserid, testguid1);
        assertEquals(licenseTypeEntity.getDetails(),details);
        assertEquals(licenseTypeEntity.getTitle(),title);
        assertEquals(licenseTypeEntity.getSummary(),summary);
        assertEquals(licenseTypeEntity.getDescription(),description);
        assertEquals(licenseTypeEntity.getScope(),scope);
        assertEquals(licenseTypeEntity.getPriority(),priority);
        assertEquals(licenseTypeEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateLicenseType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateLicenseType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String details = "string0";
            primitivePropertyValue.setPrimitiveValue(details);
            instanceProperties.setProperty("details", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String title = "string1";
            primitivePropertyValue.setPrimitiveValue(title);
            instanceProperties.setProperty("title", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String summary = "string2";
            primitivePropertyValue.setPrimitiveValue(summary);
            instanceProperties.setProperty("summary", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string3";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String scope = "string4";
            primitivePropertyValue.setPrimitiveValue(scope);
            instanceProperties.setProperty("scope", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String priority = "string5";
            primitivePropertyValue.setPrimitiveValue(priority);
            instanceProperties.setProperty("priority", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string9";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
            instanceProperties.setProperty("domain", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("LicenseType");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            LicenseType requestedLicenseType = new LicenseType();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedLicenseType.setSystemAttributes(systemAttributes);

            requestedLicenseType.setDetails(details);

            requestedLicenseType.setTitle(title);

            requestedLicenseType.setSummary(summary);

            requestedLicenseType.setDescription(description);

            requestedLicenseType.setScope(scope);

            requestedLicenseType.setPriority(priority);

            requestedLicenseType.setQualifiedName(qualifiedName);

            EnumPropertyValue GovernanceDomainEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            GovernanceDomainEnumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
            instanceProperties.setProperty("domain", GovernanceDomainEnumPropertyValue);

            requestedLicenseType.setDomain(GovernanceDomain.values()[0]);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedLicenseType.setAdditionalProperties(mapValue);
            LicenseType returnedLicenseType = subjectAreaBeansToAccessOMRS.updateLicenseType(testuserid,requestedLicenseType);
            assertEquals(requestedLicenseType.getDetails(),returnedLicenseType.getDetails());

            assertEquals(requestedLicenseType.getTitle(),returnedLicenseType.getTitle());

            assertEquals(requestedLicenseType.getSummary(),returnedLicenseType.getSummary());

            assertEquals(requestedLicenseType.getDescription(),returnedLicenseType.getDescription());

            assertEquals(requestedLicenseType.getScope(),returnedLicenseType.getScope());

            assertEquals(requestedLicenseType.getPriority(),returnedLicenseType.getPriority());

            assertEquals(requestedLicenseType.getQualifiedName(),returnedLicenseType.getQualifiedName());

            assertEquals(requestedLicenseType.getDomain(),returnedLicenseType.getDomain());

            assertEquals(requestedLicenseType.getAdditionalProperties(),returnedLicenseType.getAdditionalProperties());

        }
@Test
    public void testCreateGraphVertex() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateGraphVertex";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_INT);
        Integer position = new Integer(1);
        primitivePropertyValue.setPrimitiveValue(position);
        instanceProperties.setProperty("position", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String cardinality = "string2";
        primitivePropertyValue.setPrimitiveValue(cardinality);
        instanceProperties.setProperty("cardinality", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String defaultValueOverride = "string3";
        primitivePropertyValue.setPrimitiveValue(defaultValueOverride);
        instanceProperties.setProperty("defaultValueOverride", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string4";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GraphVertex");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GraphVertex requestedGraphVertex = new GraphVertex();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedGraphVertex.setSystemAttributes(systemAttributes);

        requestedGraphVertex.setName(name);

        requestedGraphVertex.setPosition(position);

        requestedGraphVertex.setCardinality(cardinality);

        requestedGraphVertex.setDefaultValueOverride(defaultValueOverride);

        requestedGraphVertex.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedGraphVertex.setAdditionalProperties(mapValue);
        GraphVertex returnedGraphVertex = subjectAreaBeansToAccessOMRS.createGraphVertex(testuserid, requestedGraphVertex);
        assertEquals(requestedGraphVertex.getName(),returnedGraphVertex.getName());

        assertEquals(requestedGraphVertex.getPosition(),returnedGraphVertex.getPosition());

        assertEquals(requestedGraphVertex.getCardinality(),returnedGraphVertex.getCardinality());

        assertEquals(requestedGraphVertex.getDefaultValueOverride(),returnedGraphVertex.getDefaultValueOverride());

        assertEquals(requestedGraphVertex.getQualifiedName(),returnedGraphVertex.getQualifiedName());

        assertEquals(requestedGraphVertex.getAdditionalProperties(),returnedGraphVertex.getAdditionalProperties());

    }    
    @Test
    public void testGetGraphVertexById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-GraphVertex-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_INT);
        Integer position = new Integer(1);
        primitivePropertyValue.setPrimitiveValue(position);
        instanceProperties.setProperty("position", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String cardinality = "string2";
        primitivePropertyValue.setPrimitiveValue(cardinality);
        instanceProperties.setProperty("cardinality", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String defaultValueOverride = "string3";
        primitivePropertyValue.setPrimitiveValue(defaultValueOverride);
        instanceProperties.setProperty("defaultValueOverride", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string4";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GraphVertex");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GraphVertex graphVertexEntity = subjectAreaBeansToAccessOMRS.getGraphVertexById(testuserid, testguid1);
        assertEquals(graphVertexEntity.getName(),name);
        assertEquals(graphVertexEntity.getPosition(),position);
        assertEquals(graphVertexEntity.getCardinality(),cardinality);
        assertEquals(graphVertexEntity.getDefaultValueOverride(),defaultValueOverride);
        assertEquals(graphVertexEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateGraphVertex() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGraphVertex";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_INT);
            Integer position = new Integer(1);
            primitivePropertyValue.setPrimitiveValue(position);
            instanceProperties.setProperty("position", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String cardinality = "string2";
            primitivePropertyValue.setPrimitiveValue(cardinality);
            instanceProperties.setProperty("cardinality", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String defaultValueOverride = "string3";
            primitivePropertyValue.setPrimitiveValue(defaultValueOverride);
            instanceProperties.setProperty("defaultValueOverride", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string4";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("GraphVertex");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GraphVertex requestedGraphVertex = new GraphVertex();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedGraphVertex.setSystemAttributes(systemAttributes);

            requestedGraphVertex.setName(name);

            requestedGraphVertex.setPosition(position);

            requestedGraphVertex.setCardinality(cardinality);

            requestedGraphVertex.setDefaultValueOverride(defaultValueOverride);

            requestedGraphVertex.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedGraphVertex.setAdditionalProperties(mapValue);
            GraphVertex returnedGraphVertex = subjectAreaBeansToAccessOMRS.updateGraphVertex(testuserid,requestedGraphVertex);
            assertEquals(requestedGraphVertex.getName(),returnedGraphVertex.getName());

            assertEquals(requestedGraphVertex.getPosition(),returnedGraphVertex.getPosition());

            assertEquals(requestedGraphVertex.getCardinality(),returnedGraphVertex.getCardinality());

            assertEquals(requestedGraphVertex.getDefaultValueOverride(),returnedGraphVertex.getDefaultValueOverride());

            assertEquals(requestedGraphVertex.getQualifiedName(),returnedGraphVertex.getQualifiedName());

            assertEquals(requestedGraphVertex.getAdditionalProperties(),returnedGraphVertex.getAdditionalProperties());

        }
@Test
    public void testCreateGlossaryTerm() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateGlossaryTerm";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String summary = "string1";
        primitivePropertyValue.setPrimitiveValue(summary);
        instanceProperties.setProperty("summary", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string2";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String examples = "string3";
        primitivePropertyValue.setPrimitiveValue(examples);
        instanceProperties.setProperty("examples", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String abbreviation = "string4";
        primitivePropertyValue.setPrimitiveValue(abbreviation);
        instanceProperties.setProperty("abbreviation", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String usage = "string5";
        primitivePropertyValue.setPrimitiveValue(usage);
        instanceProperties.setProperty("usage", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String glossaryName = "string6";
        primitivePropertyValue.setPrimitiveValue(glossaryName);
        instanceProperties.setProperty("glossaryName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string7";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GlossaryTerm");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GlossaryTerm requestedGlossaryTerm = new GlossaryTerm();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedGlossaryTerm.setSystemAttributes(systemAttributes);

        requestedGlossaryTerm.setDisplayName(displayName);

        requestedGlossaryTerm.setSummary(summary);

        requestedGlossaryTerm.setDescription(description);

        requestedGlossaryTerm.setExamples(examples);

        requestedGlossaryTerm.setAbbreviation(abbreviation);

        requestedGlossaryTerm.setUsage(usage);

        requestedGlossaryTerm.setGlossaryName(glossaryName);

        requestedGlossaryTerm.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedGlossaryTerm.setAdditionalProperties(mapValue);
        GlossaryTerm returnedGlossaryTerm = subjectAreaBeansToAccessOMRS.createGlossaryTerm(testuserid, requestedGlossaryTerm);
        assertEquals(requestedGlossaryTerm.getDisplayName(),returnedGlossaryTerm.getDisplayName());

        assertEquals(requestedGlossaryTerm.getSummary(),returnedGlossaryTerm.getSummary());

        assertEquals(requestedGlossaryTerm.getDescription(),returnedGlossaryTerm.getDescription());

        assertEquals(requestedGlossaryTerm.getExamples(),returnedGlossaryTerm.getExamples());

        assertEquals(requestedGlossaryTerm.getAbbreviation(),returnedGlossaryTerm.getAbbreviation());

        assertEquals(requestedGlossaryTerm.getUsage(),returnedGlossaryTerm.getUsage());

        assertEquals(requestedGlossaryTerm.getGlossaryName(),returnedGlossaryTerm.getGlossaryName());

        assertEquals(requestedGlossaryTerm.getQualifiedName(),returnedGlossaryTerm.getQualifiedName());

        assertEquals(requestedGlossaryTerm.getAdditionalProperties(),returnedGlossaryTerm.getAdditionalProperties());

    }    
    @Test
    public void testGetGlossaryTermById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-GlossaryTerm-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String summary = "string1";
        primitivePropertyValue.setPrimitiveValue(summary);
        instanceProperties.setProperty("summary", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string2";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String examples = "string3";
        primitivePropertyValue.setPrimitiveValue(examples);
        instanceProperties.setProperty("examples", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String abbreviation = "string4";
        primitivePropertyValue.setPrimitiveValue(abbreviation);
        instanceProperties.setProperty("abbreviation", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String usage = "string5";
        primitivePropertyValue.setPrimitiveValue(usage);
        instanceProperties.setProperty("usage", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String glossaryName = "string6";
        primitivePropertyValue.setPrimitiveValue(glossaryName);
        instanceProperties.setProperty("glossaryName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string7";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GlossaryTerm");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GlossaryTerm glossaryTermEntity = subjectAreaBeansToAccessOMRS.getGlossaryTermById(testuserid, testguid1);
        assertEquals(glossaryTermEntity.getDisplayName(),displayName);
        assertEquals(glossaryTermEntity.getSummary(),summary);
        assertEquals(glossaryTermEntity.getDescription(),description);
        assertEquals(glossaryTermEntity.getExamples(),examples);
        assertEquals(glossaryTermEntity.getAbbreviation(),abbreviation);
        assertEquals(glossaryTermEntity.getUsage(),usage);
        assertEquals(glossaryTermEntity.getGlossaryName(),glossaryName);
        assertEquals(glossaryTermEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateGlossaryTerm() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGlossaryTerm";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String displayName = "string0";
            primitivePropertyValue.setPrimitiveValue(displayName);
            instanceProperties.setProperty("displayName", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String summary = "string1";
            primitivePropertyValue.setPrimitiveValue(summary);
            instanceProperties.setProperty("summary", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string2";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String examples = "string3";
            primitivePropertyValue.setPrimitiveValue(examples);
            instanceProperties.setProperty("examples", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String abbreviation = "string4";
            primitivePropertyValue.setPrimitiveValue(abbreviation);
            instanceProperties.setProperty("abbreviation", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String usage = "string5";
            primitivePropertyValue.setPrimitiveValue(usage);
            instanceProperties.setProperty("usage", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String glossaryName = "string6";
            primitivePropertyValue.setPrimitiveValue(glossaryName);
            instanceProperties.setProperty("glossaryName", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string7";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("GlossaryTerm");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GlossaryTerm requestedGlossaryTerm = new GlossaryTerm();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedGlossaryTerm.setSystemAttributes(systemAttributes);

            requestedGlossaryTerm.setDisplayName(displayName);

            requestedGlossaryTerm.setSummary(summary);

            requestedGlossaryTerm.setDescription(description);

            requestedGlossaryTerm.setExamples(examples);

            requestedGlossaryTerm.setAbbreviation(abbreviation);

            requestedGlossaryTerm.setUsage(usage);

            requestedGlossaryTerm.setGlossaryName(glossaryName);

            requestedGlossaryTerm.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedGlossaryTerm.setAdditionalProperties(mapValue);
            GlossaryTerm returnedGlossaryTerm = subjectAreaBeansToAccessOMRS.updateGlossaryTerm(testuserid,requestedGlossaryTerm);
            assertEquals(requestedGlossaryTerm.getDisplayName(),returnedGlossaryTerm.getDisplayName());

            assertEquals(requestedGlossaryTerm.getSummary(),returnedGlossaryTerm.getSummary());

            assertEquals(requestedGlossaryTerm.getDescription(),returnedGlossaryTerm.getDescription());

            assertEquals(requestedGlossaryTerm.getExamples(),returnedGlossaryTerm.getExamples());

            assertEquals(requestedGlossaryTerm.getAbbreviation(),returnedGlossaryTerm.getAbbreviation());

            assertEquals(requestedGlossaryTerm.getUsage(),returnedGlossaryTerm.getUsage());

            assertEquals(requestedGlossaryTerm.getGlossaryName(),returnedGlossaryTerm.getGlossaryName());

            assertEquals(requestedGlossaryTerm.getQualifiedName(),returnedGlossaryTerm.getQualifiedName());

            assertEquals(requestedGlossaryTerm.getAdditionalProperties(),returnedGlossaryTerm.getAdditionalProperties());

        }
@Test
    public void testCreateTeam() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateTeam";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string2";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Team");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Team requestedTeam = new Team();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedTeam.setSystemAttributes(systemAttributes);

        requestedTeam.setName(name);

        requestedTeam.setDescription(description);

        requestedTeam.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedTeam.setAdditionalProperties(mapValue);
        Team returnedTeam = subjectAreaBeansToAccessOMRS.createTeam(testuserid, requestedTeam);
        assertEquals(requestedTeam.getName(),returnedTeam.getName());

        assertEquals(requestedTeam.getDescription(),returnedTeam.getDescription());

        assertEquals(requestedTeam.getQualifiedName(),returnedTeam.getQualifiedName());

        assertEquals(requestedTeam.getAdditionalProperties(),returnedTeam.getAdditionalProperties());

    }    
    @Test
    public void testGetTeamById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-Team-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string2";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Team");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Team teamEntity = subjectAreaBeansToAccessOMRS.getTeamById(testuserid, testguid1);
        assertEquals(teamEntity.getName(),name);
        assertEquals(teamEntity.getDescription(),description);
        assertEquals(teamEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateTeam() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateTeam";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string2";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("Team");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Team requestedTeam = new Team();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedTeam.setSystemAttributes(systemAttributes);

            requestedTeam.setName(name);

            requestedTeam.setDescription(description);

            requestedTeam.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedTeam.setAdditionalProperties(mapValue);
            Team returnedTeam = subjectAreaBeansToAccessOMRS.updateTeam(testuserid,requestedTeam);
            assertEquals(requestedTeam.getName(),returnedTeam.getName());

            assertEquals(requestedTeam.getDescription(),returnedTeam.getDescription());

            assertEquals(requestedTeam.getQualifiedName(),returnedTeam.getQualifiedName());

            assertEquals(requestedTeam.getAdditionalProperties(),returnedTeam.getAdditionalProperties());

        }
@Test
    public void testCreateMetadataCollection() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateMetadataCollection";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String metadataCollectionId = "string0";
        primitivePropertyValue.setPrimitiveValue(metadataCollectionId);
        instanceProperties.setProperty("metadataCollectionId", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string1";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string2";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string3";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string4";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("MetadataCollection");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        MetadataCollection requestedMetadataCollection = new MetadataCollection();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedMetadataCollection.setSystemAttributes(systemAttributes);

        requestedMetadataCollection.setMetadataCollectionId(metadataCollectionId);

        requestedMetadataCollection.setName(name);

        requestedMetadataCollection.setDescription(description);

        requestedMetadataCollection.setOwner(owner);

        requestedMetadataCollection.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedMetadataCollection.setAdditionalProperties(mapValue);
        MetadataCollection returnedMetadataCollection = subjectAreaBeansToAccessOMRS.createMetadataCollection(testuserid, requestedMetadataCollection);
        assertEquals(requestedMetadataCollection.getMetadataCollectionId(),returnedMetadataCollection.getMetadataCollectionId());

        assertEquals(requestedMetadataCollection.getName(),returnedMetadataCollection.getName());

        assertEquals(requestedMetadataCollection.getDescription(),returnedMetadataCollection.getDescription());

        assertEquals(requestedMetadataCollection.getOwner(),returnedMetadataCollection.getOwner());

        assertEquals(requestedMetadataCollection.getQualifiedName(),returnedMetadataCollection.getQualifiedName());

        assertEquals(requestedMetadataCollection.getAdditionalProperties(),returnedMetadataCollection.getAdditionalProperties());

    }    
    @Test
    public void testGetMetadataCollectionById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-MetadataCollection-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String metadataCollectionId = "string0";
        primitivePropertyValue.setPrimitiveValue(metadataCollectionId);
        instanceProperties.setProperty("metadataCollectionId", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string1";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string2";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string3";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string4";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("MetadataCollection");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        MetadataCollection metadataCollectionEntity = subjectAreaBeansToAccessOMRS.getMetadataCollectionById(testuserid, testguid1);
        assertEquals(metadataCollectionEntity.getMetadataCollectionId(),metadataCollectionId);
        assertEquals(metadataCollectionEntity.getName(),name);
        assertEquals(metadataCollectionEntity.getDescription(),description);
        assertEquals(metadataCollectionEntity.getOwner(),owner);
        assertEquals(metadataCollectionEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateMetadataCollection() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateMetadataCollection";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String metadataCollectionId = "string0";
            primitivePropertyValue.setPrimitiveValue(metadataCollectionId);
            instanceProperties.setProperty("metadataCollectionId", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string1";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string2";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String owner = "string3";
            primitivePropertyValue.setPrimitiveValue(owner);
            instanceProperties.setProperty("owner", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string4";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("MetadataCollection");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            MetadataCollection requestedMetadataCollection = new MetadataCollection();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedMetadataCollection.setSystemAttributes(systemAttributes);

            requestedMetadataCollection.setMetadataCollectionId(metadataCollectionId);

            requestedMetadataCollection.setName(name);

            requestedMetadataCollection.setDescription(description);

            requestedMetadataCollection.setOwner(owner);

            requestedMetadataCollection.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedMetadataCollection.setAdditionalProperties(mapValue);
            MetadataCollection returnedMetadataCollection = subjectAreaBeansToAccessOMRS.updateMetadataCollection(testuserid,requestedMetadataCollection);
            assertEquals(requestedMetadataCollection.getMetadataCollectionId(),returnedMetadataCollection.getMetadataCollectionId());

            assertEquals(requestedMetadataCollection.getName(),returnedMetadataCollection.getName());

            assertEquals(requestedMetadataCollection.getDescription(),returnedMetadataCollection.getDescription());

            assertEquals(requestedMetadataCollection.getOwner(),returnedMetadataCollection.getOwner());

            assertEquals(requestedMetadataCollection.getQualifiedName(),returnedMetadataCollection.getQualifiedName());

            assertEquals(requestedMetadataCollection.getAdditionalProperties(),returnedMetadataCollection.getAdditionalProperties());

        }
@Test
    public void testCreateGovernanceControl() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateGovernanceControl";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String implementationDescription = "string0";
        primitivePropertyValue.setPrimitiveValue(implementationDescription);
        instanceProperties.setProperty("implementationDescription", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String title = "string1";
        primitivePropertyValue.setPrimitiveValue(title);
        instanceProperties.setProperty("title", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String summary = "string2";
        primitivePropertyValue.setPrimitiveValue(summary);
        instanceProperties.setProperty("summary", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string3";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String scope = "string4";
        primitivePropertyValue.setPrimitiveValue(scope);
        instanceProperties.setProperty("scope", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String priority = "string5";
        primitivePropertyValue.setPrimitiveValue(priority);
        instanceProperties.setProperty("priority", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string9";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String implications = "string6";
        primitivePropertyValue.setPrimitiveValue(implications);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("implications", arrayPropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String outcomes = "string7";
        primitivePropertyValue.setPrimitiveValue(outcomes);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("outcomes", arrayPropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String results = "string8";
        primitivePropertyValue.setPrimitiveValue(results);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("results", arrayPropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", enumPropertyValue);

        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GovernanceControl");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GovernanceControl requestedGovernanceControl = new GovernanceControl();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedGovernanceControl.setSystemAttributes(systemAttributes);

        requestedGovernanceControl.setImplementationDescription(implementationDescription);

        requestedGovernanceControl.setTitle(title);

        requestedGovernanceControl.setSummary(summary);

        requestedGovernanceControl.setDescription(description);

        requestedGovernanceControl.setScope(scope);

        requestedGovernanceControl.setPriority(priority);

        requestedGovernanceControl.setQualifiedName(qualifiedName);

        EnumPropertyValue GovernanceDomainEnumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        GovernanceDomainEnumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", GovernanceDomainEnumPropertyValue);

        requestedGovernanceControl.setDomain(GovernanceDomain.values()[0]);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedGovernanceControl.setAdditionalProperties(mapValue);
        GovernanceControl returnedGovernanceControl = subjectAreaBeansToAccessOMRS.createGovernanceControl(testuserid, requestedGovernanceControl);
        assertEquals(requestedGovernanceControl.getImplementationDescription(),returnedGovernanceControl.getImplementationDescription());

        assertEquals(requestedGovernanceControl.getTitle(),returnedGovernanceControl.getTitle());

        assertEquals(requestedGovernanceControl.getSummary(),returnedGovernanceControl.getSummary());

        assertEquals(requestedGovernanceControl.getDescription(),returnedGovernanceControl.getDescription());

        assertEquals(requestedGovernanceControl.getScope(),returnedGovernanceControl.getScope());

        assertEquals(requestedGovernanceControl.getPriority(),returnedGovernanceControl.getPriority());

        assertEquals(requestedGovernanceControl.getQualifiedName(),returnedGovernanceControl.getQualifiedName());

        assertEquals(requestedGovernanceControl.getDomain(),returnedGovernanceControl.getDomain());

        assertEquals(requestedGovernanceControl.getAdditionalProperties(),returnedGovernanceControl.getAdditionalProperties());

    }    
    @Test
    public void testGetGovernanceControlById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-GovernanceControl-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String implementationDescription = "string0";
        primitivePropertyValue.setPrimitiveValue(implementationDescription);
        instanceProperties.setProperty("implementationDescription", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String title = "string1";
        primitivePropertyValue.setPrimitiveValue(title);
        instanceProperties.setProperty("title", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String summary = "string2";
        primitivePropertyValue.setPrimitiveValue(summary);
        instanceProperties.setProperty("summary", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string3";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String scope = "string4";
        primitivePropertyValue.setPrimitiveValue(scope);
        instanceProperties.setProperty("scope", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String priority = "string5";
        primitivePropertyValue.setPrimitiveValue(priority);
        instanceProperties.setProperty("priority", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string9";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", enumPropertyValue);

        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GovernanceControl");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GovernanceControl governanceControlEntity = subjectAreaBeansToAccessOMRS.getGovernanceControlById(testuserid, testguid1);
        assertEquals(governanceControlEntity.getImplementationDescription(),implementationDescription);
        assertEquals(governanceControlEntity.getTitle(),title);
        assertEquals(governanceControlEntity.getSummary(),summary);
        assertEquals(governanceControlEntity.getDescription(),description);
        assertEquals(governanceControlEntity.getScope(),scope);
        assertEquals(governanceControlEntity.getPriority(),priority);
        assertEquals(governanceControlEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateGovernanceControl() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGovernanceControl";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String implementationDescription = "string0";
            primitivePropertyValue.setPrimitiveValue(implementationDescription);
            instanceProperties.setProperty("implementationDescription", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String title = "string1";
            primitivePropertyValue.setPrimitiveValue(title);
            instanceProperties.setProperty("title", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String summary = "string2";
            primitivePropertyValue.setPrimitiveValue(summary);
            instanceProperties.setProperty("summary", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string3";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String scope = "string4";
            primitivePropertyValue.setPrimitiveValue(scope);
            instanceProperties.setProperty("scope", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String priority = "string5";
            primitivePropertyValue.setPrimitiveValue(priority);
            instanceProperties.setProperty("priority", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string9";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
            instanceProperties.setProperty("domain", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("GovernanceControl");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceControl requestedGovernanceControl = new GovernanceControl();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedGovernanceControl.setSystemAttributes(systemAttributes);

            requestedGovernanceControl.setImplementationDescription(implementationDescription);

            requestedGovernanceControl.setTitle(title);

            requestedGovernanceControl.setSummary(summary);

            requestedGovernanceControl.setDescription(description);

            requestedGovernanceControl.setScope(scope);

            requestedGovernanceControl.setPriority(priority);

            requestedGovernanceControl.setQualifiedName(qualifiedName);

            EnumPropertyValue GovernanceDomainEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            GovernanceDomainEnumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
            instanceProperties.setProperty("domain", GovernanceDomainEnumPropertyValue);

            requestedGovernanceControl.setDomain(GovernanceDomain.values()[0]);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedGovernanceControl.setAdditionalProperties(mapValue);
            GovernanceControl returnedGovernanceControl = subjectAreaBeansToAccessOMRS.updateGovernanceControl(testuserid,requestedGovernanceControl);
            assertEquals(requestedGovernanceControl.getImplementationDescription(),returnedGovernanceControl.getImplementationDescription());

            assertEquals(requestedGovernanceControl.getTitle(),returnedGovernanceControl.getTitle());

            assertEquals(requestedGovernanceControl.getSummary(),returnedGovernanceControl.getSummary());

            assertEquals(requestedGovernanceControl.getDescription(),returnedGovernanceControl.getDescription());

            assertEquals(requestedGovernanceControl.getScope(),returnedGovernanceControl.getScope());

            assertEquals(requestedGovernanceControl.getPriority(),returnedGovernanceControl.getPriority());

            assertEquals(requestedGovernanceControl.getQualifiedName(),returnedGovernanceControl.getQualifiedName());

            assertEquals(requestedGovernanceControl.getDomain(),returnedGovernanceControl.getDomain());

            assertEquals(requestedGovernanceControl.getAdditionalProperties(),returnedGovernanceControl.getAdditionalProperties());

        }
@Test
    public void testCreateTopic() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateTopic";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String topicType = "string0";
        primitivePropertyValue.setPrimitiveValue(topicType);
        instanceProperties.setProperty("topicType", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string1";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string2";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string3";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string4";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Topic");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Topic requestedTopic = new Topic();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedTopic.setSystemAttributes(systemAttributes);

        requestedTopic.setTopicType(topicType);

        requestedTopic.setName(name);

        requestedTopic.setDescription(description);

        requestedTopic.setOwner(owner);

        requestedTopic.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedTopic.setAdditionalProperties(mapValue);
        Topic returnedTopic = subjectAreaBeansToAccessOMRS.createTopic(testuserid, requestedTopic);
        assertEquals(requestedTopic.getTopicType(),returnedTopic.getTopicType());

        assertEquals(requestedTopic.getName(),returnedTopic.getName());

        assertEquals(requestedTopic.getDescription(),returnedTopic.getDescription());

        assertEquals(requestedTopic.getOwner(),returnedTopic.getOwner());

        assertEquals(requestedTopic.getQualifiedName(),returnedTopic.getQualifiedName());

        assertEquals(requestedTopic.getAdditionalProperties(),returnedTopic.getAdditionalProperties());

    }    
    @Test
    public void testGetTopicById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-Topic-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String topicType = "string0";
        primitivePropertyValue.setPrimitiveValue(topicType);
        instanceProperties.setProperty("topicType", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string1";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string2";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string3";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string4";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Topic");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Topic topicEntity = subjectAreaBeansToAccessOMRS.getTopicById(testuserid, testguid1);
        assertEquals(topicEntity.getTopicType(),topicType);
        assertEquals(topicEntity.getName(),name);
        assertEquals(topicEntity.getDescription(),description);
        assertEquals(topicEntity.getOwner(),owner);
        assertEquals(topicEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateTopic() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateTopic";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String topicType = "string0";
            primitivePropertyValue.setPrimitiveValue(topicType);
            instanceProperties.setProperty("topicType", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string1";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string2";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String owner = "string3";
            primitivePropertyValue.setPrimitiveValue(owner);
            instanceProperties.setProperty("owner", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string4";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("Topic");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Topic requestedTopic = new Topic();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedTopic.setSystemAttributes(systemAttributes);

            requestedTopic.setTopicType(topicType);

            requestedTopic.setName(name);

            requestedTopic.setDescription(description);

            requestedTopic.setOwner(owner);

            requestedTopic.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedTopic.setAdditionalProperties(mapValue);
            Topic returnedTopic = subjectAreaBeansToAccessOMRS.updateTopic(testuserid,requestedTopic);
            assertEquals(requestedTopic.getTopicType(),returnedTopic.getTopicType());

            assertEquals(requestedTopic.getName(),returnedTopic.getName());

            assertEquals(requestedTopic.getDescription(),returnedTopic.getDescription());

            assertEquals(requestedTopic.getOwner(),returnedTopic.getOwner());

            assertEquals(requestedTopic.getQualifiedName(),returnedTopic.getQualifiedName());

            assertEquals(requestedTopic.getAdditionalProperties(),returnedTopic.getAdditionalProperties());

        }
@Test
    public void testCreateSoftwareServer() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateSoftwareServer";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String type = "string0";
        primitivePropertyValue.setPrimitiveValue(type);
        instanceProperties.setProperty("type", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String version = "string1";
        primitivePropertyValue.setPrimitiveValue(version);
        instanceProperties.setProperty("version", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String source = "string2";
        primitivePropertyValue.setPrimitiveValue(source);
        instanceProperties.setProperty("source", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String userId = "string3";
        primitivePropertyValue.setPrimitiveValue(userId);
        instanceProperties.setProperty("userId", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string4";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string5";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string6";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string7";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("SoftwareServer");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        SoftwareServer requestedSoftwareServer = new SoftwareServer();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedSoftwareServer.setSystemAttributes(systemAttributes);

        requestedSoftwareServer.setType(type);

        requestedSoftwareServer.setVersion(version);

        requestedSoftwareServer.setSource(source);

        requestedSoftwareServer.setUserId(userId);

        requestedSoftwareServer.setName(name);

        requestedSoftwareServer.setDescription(description);

        requestedSoftwareServer.setOwner(owner);

        requestedSoftwareServer.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedSoftwareServer.setAdditionalProperties(mapValue);
        SoftwareServer returnedSoftwareServer = subjectAreaBeansToAccessOMRS.createSoftwareServer(testuserid, requestedSoftwareServer);
        assertEquals(requestedSoftwareServer.getType(),returnedSoftwareServer.getType());

        assertEquals(requestedSoftwareServer.getVersion(),returnedSoftwareServer.getVersion());

        assertEquals(requestedSoftwareServer.getSource(),returnedSoftwareServer.getSource());

        assertEquals(requestedSoftwareServer.getUserId(),returnedSoftwareServer.getUserId());

        assertEquals(requestedSoftwareServer.getName(),returnedSoftwareServer.getName());

        assertEquals(requestedSoftwareServer.getDescription(),returnedSoftwareServer.getDescription());

        assertEquals(requestedSoftwareServer.getOwner(),returnedSoftwareServer.getOwner());

        assertEquals(requestedSoftwareServer.getQualifiedName(),returnedSoftwareServer.getQualifiedName());

        assertEquals(requestedSoftwareServer.getAdditionalProperties(),returnedSoftwareServer.getAdditionalProperties());

    }    
    @Test
    public void testGetSoftwareServerById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-SoftwareServer-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String type = "string0";
        primitivePropertyValue.setPrimitiveValue(type);
        instanceProperties.setProperty("type", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String version = "string1";
        primitivePropertyValue.setPrimitiveValue(version);
        instanceProperties.setProperty("version", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String source = "string2";
        primitivePropertyValue.setPrimitiveValue(source);
        instanceProperties.setProperty("source", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String userId = "string3";
        primitivePropertyValue.setPrimitiveValue(userId);
        instanceProperties.setProperty("userId", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string4";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string5";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string6";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string7";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("SoftwareServer");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        SoftwareServer softwareServerEntity = subjectAreaBeansToAccessOMRS.getSoftwareServerById(testuserid, testguid1);
        assertEquals(softwareServerEntity.getType(),type);
        assertEquals(softwareServerEntity.getVersion(),version);
        assertEquals(softwareServerEntity.getSource(),source);
        assertEquals(softwareServerEntity.getUserId(),userId);
        assertEquals(softwareServerEntity.getName(),name);
        assertEquals(softwareServerEntity.getDescription(),description);
        assertEquals(softwareServerEntity.getOwner(),owner);
        assertEquals(softwareServerEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateSoftwareServer() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateSoftwareServer";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String type = "string0";
            primitivePropertyValue.setPrimitiveValue(type);
            instanceProperties.setProperty("type", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String version = "string1";
            primitivePropertyValue.setPrimitiveValue(version);
            instanceProperties.setProperty("version", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string2";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String userId = "string3";
            primitivePropertyValue.setPrimitiveValue(userId);
            instanceProperties.setProperty("userId", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string4";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string5";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String owner = "string6";
            primitivePropertyValue.setPrimitiveValue(owner);
            instanceProperties.setProperty("owner", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string7";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("SoftwareServer");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SoftwareServer requestedSoftwareServer = new SoftwareServer();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedSoftwareServer.setSystemAttributes(systemAttributes);

            requestedSoftwareServer.setType(type);

            requestedSoftwareServer.setVersion(version);

            requestedSoftwareServer.setSource(source);

            requestedSoftwareServer.setUserId(userId);

            requestedSoftwareServer.setName(name);

            requestedSoftwareServer.setDescription(description);

            requestedSoftwareServer.setOwner(owner);

            requestedSoftwareServer.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedSoftwareServer.setAdditionalProperties(mapValue);
            SoftwareServer returnedSoftwareServer = subjectAreaBeansToAccessOMRS.updateSoftwareServer(testuserid,requestedSoftwareServer);
            assertEquals(requestedSoftwareServer.getType(),returnedSoftwareServer.getType());

            assertEquals(requestedSoftwareServer.getVersion(),returnedSoftwareServer.getVersion());

            assertEquals(requestedSoftwareServer.getSource(),returnedSoftwareServer.getSource());

            assertEquals(requestedSoftwareServer.getUserId(),returnedSoftwareServer.getUserId());

            assertEquals(requestedSoftwareServer.getName(),returnedSoftwareServer.getName());

            assertEquals(requestedSoftwareServer.getDescription(),returnedSoftwareServer.getDescription());

            assertEquals(requestedSoftwareServer.getOwner(),returnedSoftwareServer.getOwner());

            assertEquals(requestedSoftwareServer.getQualifiedName(),returnedSoftwareServer.getQualifiedName());

            assertEquals(requestedSoftwareServer.getAdditionalProperties(),returnedSoftwareServer.getAdditionalProperties());

        }
@Test
    public void testCreateDeployedAPI() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateDeployedAPI";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string2";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("DeployedAPI");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        DeployedAPI requestedDeployedAPI = new DeployedAPI();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedDeployedAPI.setSystemAttributes(systemAttributes);

        requestedDeployedAPI.setName(name);

        requestedDeployedAPI.setDescription(description);

        requestedDeployedAPI.setOwner(owner);

        requestedDeployedAPI.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedDeployedAPI.setAdditionalProperties(mapValue);
        DeployedAPI returnedDeployedAPI = subjectAreaBeansToAccessOMRS.createDeployedAPI(testuserid, requestedDeployedAPI);
        assertEquals(requestedDeployedAPI.getName(),returnedDeployedAPI.getName());

        assertEquals(requestedDeployedAPI.getDescription(),returnedDeployedAPI.getDescription());

        assertEquals(requestedDeployedAPI.getOwner(),returnedDeployedAPI.getOwner());

        assertEquals(requestedDeployedAPI.getQualifiedName(),returnedDeployedAPI.getQualifiedName());

        assertEquals(requestedDeployedAPI.getAdditionalProperties(),returnedDeployedAPI.getAdditionalProperties());

    }    
    @Test
    public void testGetDeployedAPIById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-DeployedAPI-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string2";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("DeployedAPI");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        DeployedAPI deployedAPIEntity = subjectAreaBeansToAccessOMRS.getDeployedAPIById(testuserid, testguid1);
        assertEquals(deployedAPIEntity.getName(),name);
        assertEquals(deployedAPIEntity.getDescription(),description);
        assertEquals(deployedAPIEntity.getOwner(),owner);
        assertEquals(deployedAPIEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateDeployedAPI() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateDeployedAPI";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String owner = "string2";
            primitivePropertyValue.setPrimitiveValue(owner);
            instanceProperties.setProperty("owner", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string3";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("DeployedAPI");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            DeployedAPI requestedDeployedAPI = new DeployedAPI();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedDeployedAPI.setSystemAttributes(systemAttributes);

            requestedDeployedAPI.setName(name);

            requestedDeployedAPI.setDescription(description);

            requestedDeployedAPI.setOwner(owner);

            requestedDeployedAPI.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedDeployedAPI.setAdditionalProperties(mapValue);
            DeployedAPI returnedDeployedAPI = subjectAreaBeansToAccessOMRS.updateDeployedAPI(testuserid,requestedDeployedAPI);
            assertEquals(requestedDeployedAPI.getName(),returnedDeployedAPI.getName());

            assertEquals(requestedDeployedAPI.getDescription(),returnedDeployedAPI.getDescription());

            assertEquals(requestedDeployedAPI.getOwner(),returnedDeployedAPI.getOwner());

            assertEquals(requestedDeployedAPI.getQualifiedName(),returnedDeployedAPI.getQualifiedName());

            assertEquals(requestedDeployedAPI.getAdditionalProperties(),returnedDeployedAPI.getAdditionalProperties());

        }
@Test
    public void testCreateMediaFile() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateMediaFile";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string0";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("embeddedMetadata", mapPropertyValue);

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("MediaFile");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        MediaFile requestedMediaFile = new MediaFile();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedMediaFile.setSystemAttributes(systemAttributes);

        requestedMediaFile.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedMediaFile.setEmbeddedMetadata(mapValue);
        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedMediaFile.setAdditionalProperties(mapValue);
        MediaFile returnedMediaFile = subjectAreaBeansToAccessOMRS.createMediaFile(testuserid, requestedMediaFile);
        assertEquals(requestedMediaFile.getQualifiedName(),returnedMediaFile.getQualifiedName());

        assertEquals(requestedMediaFile.getEmbeddedMetadata(),returnedMediaFile.getEmbeddedMetadata());

        assertEquals(requestedMediaFile.getAdditionalProperties(),returnedMediaFile.getAdditionalProperties());

    }    
    @Test
    public void testGetMediaFileById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-MediaFile-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string0";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("EmbeddedMetadata", mapPropertyValue);

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("MediaFile");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        MediaFile mediaFileEntity = subjectAreaBeansToAccessOMRS.getMediaFileById(testuserid, testguid1);
        assertEquals(mediaFileEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateMediaFile() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateMediaFile";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string0";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("embeddedMetadata", mapPropertyValue);

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("MediaFile");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            MediaFile requestedMediaFile = new MediaFile();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedMediaFile.setSystemAttributes(systemAttributes);

            requestedMediaFile.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedMediaFile.setEmbeddedMetadata(mapValue);
            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedMediaFile.setAdditionalProperties(mapValue);
            MediaFile returnedMediaFile = subjectAreaBeansToAccessOMRS.updateMediaFile(testuserid,requestedMediaFile);
            assertEquals(requestedMediaFile.getQualifiedName(),returnedMediaFile.getQualifiedName());

            assertEquals(requestedMediaFile.getEmbeddedMetadata(),returnedMediaFile.getEmbeddedMetadata());

            assertEquals(requestedMediaFile.getAdditionalProperties(),returnedMediaFile.getAdditionalProperties());

        }
@Test
    public void testCreateComment() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateComment";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String comment = "string0";
        primitivePropertyValue.setPrimitiveValue(comment);
        instanceProperties.setProperty("comment", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string1";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(CommentType.values()[0].name());
        instanceProperties.setProperty("commentType", enumPropertyValue);

        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Comment");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Comment requestedComment = new Comment();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedComment.setSystemAttributes(systemAttributes);

        requestedComment.setComment(comment);

        requestedComment.setQualifiedName(qualifiedName);

        EnumPropertyValue CommentTypeEnumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        CommentTypeEnumPropertyValue.setSymbolicName(CommentType.values()[0].name());
        instanceProperties.setProperty("commentType", CommentTypeEnumPropertyValue);

        requestedComment.setCommentType(CommentType.values()[0]);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedComment.setAdditionalProperties(mapValue);
        Comment returnedComment = subjectAreaBeansToAccessOMRS.createComment(testuserid, requestedComment);
        assertEquals(requestedComment.getComment(),returnedComment.getComment());

        assertEquals(requestedComment.getQualifiedName(),returnedComment.getQualifiedName());

        assertEquals(requestedComment.getCommentType(),returnedComment.getCommentType());

        assertEquals(requestedComment.getAdditionalProperties(),returnedComment.getAdditionalProperties());

    }    
    @Test
    public void testGetCommentById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-Comment-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String comment = "string0";
        primitivePropertyValue.setPrimitiveValue(comment);
        instanceProperties.setProperty("comment", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string1";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(CommentType.values()[0].name());
        instanceProperties.setProperty("commentType", enumPropertyValue);

        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Comment");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Comment commentEntity = subjectAreaBeansToAccessOMRS.getCommentById(testuserid, testguid1);
        assertEquals(commentEntity.getComment(),comment);
        assertEquals(commentEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateComment() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateComment";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String comment = "string0";
            primitivePropertyValue.setPrimitiveValue(comment);
            instanceProperties.setProperty("comment", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string1";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(CommentType.values()[0].name());
            instanceProperties.setProperty("commentType", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("Comment");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Comment requestedComment = new Comment();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedComment.setSystemAttributes(systemAttributes);

            requestedComment.setComment(comment);

            requestedComment.setQualifiedName(qualifiedName);

            EnumPropertyValue CommentTypeEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            CommentTypeEnumPropertyValue.setSymbolicName(CommentType.values()[0].name());
            instanceProperties.setProperty("commentType", CommentTypeEnumPropertyValue);

            requestedComment.setCommentType(CommentType.values()[0]);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedComment.setAdditionalProperties(mapValue);
            Comment returnedComment = subjectAreaBeansToAccessOMRS.updateComment(testuserid,requestedComment);
            assertEquals(requestedComment.getComment(),returnedComment.getComment());

            assertEquals(requestedComment.getQualifiedName(),returnedComment.getQualifiedName());

            assertEquals(requestedComment.getCommentType(),returnedComment.getCommentType());

            assertEquals(requestedComment.getAdditionalProperties(),returnedComment.getAdditionalProperties());

        }
@Test
    public void testCreateRelatedMedia() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateRelatedMedia";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string1";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String url = "string2";
        primitivePropertyValue.setPrimitiveValue(url);
        instanceProperties.setProperty("url", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String version = "string3";
        primitivePropertyValue.setPrimitiveValue(version);
        instanceProperties.setProperty("version", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string4";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String organization = "string5";
        primitivePropertyValue.setPrimitiveValue(organization);
        instanceProperties.setProperty("organization", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string6";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_INT);
        Integer mediaUsage = new Integer(0);
        primitivePropertyValue.setPrimitiveValue(mediaUsage);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("mediaUsage", arrayPropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(MediaType.values()[0].name());
        instanceProperties.setProperty("mediaType", enumPropertyValue);

        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("RelatedMedia");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        RelatedMedia requestedRelatedMedia = new RelatedMedia();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedRelatedMedia.setSystemAttributes(systemAttributes);

        requestedRelatedMedia.setDisplayName(displayName);

        requestedRelatedMedia.setUrl(url);

        requestedRelatedMedia.setVersion(version);

        requestedRelatedMedia.setDescription(description);

        requestedRelatedMedia.setOrganization(organization);

        requestedRelatedMedia.setQualifiedName(qualifiedName);

        EnumPropertyValue MediaTypeEnumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        MediaTypeEnumPropertyValue.setSymbolicName(MediaType.values()[0].name());
        instanceProperties.setProperty("mediaType", MediaTypeEnumPropertyValue);

        requestedRelatedMedia.setMediaType(MediaType.values()[0]);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedRelatedMedia.setAdditionalProperties(mapValue);
        RelatedMedia returnedRelatedMedia = subjectAreaBeansToAccessOMRS.createRelatedMedia(testuserid, requestedRelatedMedia);
        assertEquals(requestedRelatedMedia.getDisplayName(),returnedRelatedMedia.getDisplayName());

        assertEquals(requestedRelatedMedia.getUrl(),returnedRelatedMedia.getUrl());

        assertEquals(requestedRelatedMedia.getVersion(),returnedRelatedMedia.getVersion());

        assertEquals(requestedRelatedMedia.getDescription(),returnedRelatedMedia.getDescription());

        assertEquals(requestedRelatedMedia.getOrganization(),returnedRelatedMedia.getOrganization());

        assertEquals(requestedRelatedMedia.getQualifiedName(),returnedRelatedMedia.getQualifiedName());

        assertEquals(requestedRelatedMedia.getMediaType(),returnedRelatedMedia.getMediaType());

        assertEquals(requestedRelatedMedia.getAdditionalProperties(),returnedRelatedMedia.getAdditionalProperties());

    }    
    @Test
    public void testGetRelatedMediaById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-RelatedMedia-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string1";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String url = "string2";
        primitivePropertyValue.setPrimitiveValue(url);
        instanceProperties.setProperty("url", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String version = "string3";
        primitivePropertyValue.setPrimitiveValue(version);
        instanceProperties.setProperty("version", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string4";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String organization = "string5";
        primitivePropertyValue.setPrimitiveValue(organization);
        instanceProperties.setProperty("organization", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string6";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(MediaType.values()[0].name());
        instanceProperties.setProperty("mediaType", enumPropertyValue);

        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("RelatedMedia");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        RelatedMedia relatedMediaEntity = subjectAreaBeansToAccessOMRS.getRelatedMediaById(testuserid, testguid1);
        assertEquals(relatedMediaEntity.getDisplayName(),displayName);
        assertEquals(relatedMediaEntity.getUrl(),url);
        assertEquals(relatedMediaEntity.getVersion(),version);
        assertEquals(relatedMediaEntity.getDescription(),description);
        assertEquals(relatedMediaEntity.getOrganization(),organization);
        assertEquals(relatedMediaEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateRelatedMedia() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateRelatedMedia";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String displayName = "string1";
            primitivePropertyValue.setPrimitiveValue(displayName);
            instanceProperties.setProperty("displayName", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String url = "string2";
            primitivePropertyValue.setPrimitiveValue(url);
            instanceProperties.setProperty("url", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String version = "string3";
            primitivePropertyValue.setPrimitiveValue(version);
            instanceProperties.setProperty("version", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string4";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String organization = "string5";
            primitivePropertyValue.setPrimitiveValue(organization);
            instanceProperties.setProperty("organization", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string6";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(MediaType.values()[0].name());
            instanceProperties.setProperty("mediaType", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("RelatedMedia");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            RelatedMedia requestedRelatedMedia = new RelatedMedia();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedRelatedMedia.setSystemAttributes(systemAttributes);

            requestedRelatedMedia.setDisplayName(displayName);

            requestedRelatedMedia.setUrl(url);

            requestedRelatedMedia.setVersion(version);

            requestedRelatedMedia.setDescription(description);

            requestedRelatedMedia.setOrganization(organization);

            requestedRelatedMedia.setQualifiedName(qualifiedName);

            EnumPropertyValue MediaTypeEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            MediaTypeEnumPropertyValue.setSymbolicName(MediaType.values()[0].name());
            instanceProperties.setProperty("mediaType", MediaTypeEnumPropertyValue);

            requestedRelatedMedia.setMediaType(MediaType.values()[0]);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedRelatedMedia.setAdditionalProperties(mapValue);
            RelatedMedia returnedRelatedMedia = subjectAreaBeansToAccessOMRS.updateRelatedMedia(testuserid,requestedRelatedMedia);
            assertEquals(requestedRelatedMedia.getDisplayName(),returnedRelatedMedia.getDisplayName());

            assertEquals(requestedRelatedMedia.getUrl(),returnedRelatedMedia.getUrl());

            assertEquals(requestedRelatedMedia.getVersion(),returnedRelatedMedia.getVersion());

            assertEquals(requestedRelatedMedia.getDescription(),returnedRelatedMedia.getDescription());

            assertEquals(requestedRelatedMedia.getOrganization(),returnedRelatedMedia.getOrganization());

            assertEquals(requestedRelatedMedia.getQualifiedName(),returnedRelatedMedia.getQualifiedName());

            assertEquals(requestedRelatedMedia.getMediaType(),returnedRelatedMedia.getMediaType());

            assertEquals(requestedRelatedMedia.getAdditionalProperties(),returnedRelatedMedia.getAdditionalProperties());

        }
@Test
    public void testCreateConnectorType() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateConnectorType";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String connectorProviderClassName = "string2";
        primitivePropertyValue.setPrimitiveValue(connectorProviderClassName);
        instanceProperties.setProperty("connectorProviderClassName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String recognizedAdditionalProperties = "string3";
        primitivePropertyValue.setPrimitiveValue(recognizedAdditionalProperties);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("recognizedAdditionalProperties", arrayPropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String recognizedSecuredProperties = "string4";
        primitivePropertyValue.setPrimitiveValue(recognizedSecuredProperties);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("recognizedSecuredProperties", arrayPropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("ConnectorType");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        ConnectorType requestedConnectorType = new ConnectorType();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedConnectorType.setSystemAttributes(systemAttributes);

        requestedConnectorType.setDisplayName(displayName);

        requestedConnectorType.setDescription(description);

        requestedConnectorType.setConnectorProviderClassName(connectorProviderClassName);

        requestedConnectorType.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedConnectorType.setAdditionalProperties(mapValue);
        ConnectorType returnedConnectorType = subjectAreaBeansToAccessOMRS.createConnectorType(testuserid, requestedConnectorType);
        assertEquals(requestedConnectorType.getDisplayName(),returnedConnectorType.getDisplayName());

        assertEquals(requestedConnectorType.getDescription(),returnedConnectorType.getDescription());

        assertEquals(requestedConnectorType.getConnectorProviderClassName(),returnedConnectorType.getConnectorProviderClassName());

        assertEquals(requestedConnectorType.getQualifiedName(),returnedConnectorType.getQualifiedName());

        assertEquals(requestedConnectorType.getAdditionalProperties(),returnedConnectorType.getAdditionalProperties());

    }    
    @Test
    public void testGetConnectorTypeById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-ConnectorType-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String connectorProviderClassName = "string2";
        primitivePropertyValue.setPrimitiveValue(connectorProviderClassName);
        instanceProperties.setProperty("connectorProviderClassName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("ConnectorType");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        ConnectorType connectorTypeEntity = subjectAreaBeansToAccessOMRS.getConnectorTypeById(testuserid, testguid1);
        assertEquals(connectorTypeEntity.getDisplayName(),displayName);
        assertEquals(connectorTypeEntity.getDescription(),description);
        assertEquals(connectorTypeEntity.getConnectorProviderClassName(),connectorProviderClassName);
        assertEquals(connectorTypeEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateConnectorType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateConnectorType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String displayName = "string0";
            primitivePropertyValue.setPrimitiveValue(displayName);
            instanceProperties.setProperty("displayName", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String connectorProviderClassName = "string2";
            primitivePropertyValue.setPrimitiveValue(connectorProviderClassName);
            instanceProperties.setProperty("connectorProviderClassName", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string5";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("ConnectorType");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ConnectorType requestedConnectorType = new ConnectorType();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedConnectorType.setSystemAttributes(systemAttributes);

            requestedConnectorType.setDisplayName(displayName);

            requestedConnectorType.setDescription(description);

            requestedConnectorType.setConnectorProviderClassName(connectorProviderClassName);

            requestedConnectorType.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedConnectorType.setAdditionalProperties(mapValue);
            ConnectorType returnedConnectorType = subjectAreaBeansToAccessOMRS.updateConnectorType(testuserid,requestedConnectorType);
            assertEquals(requestedConnectorType.getDisplayName(),returnedConnectorType.getDisplayName());

            assertEquals(requestedConnectorType.getDescription(),returnedConnectorType.getDescription());

            assertEquals(requestedConnectorType.getConnectorProviderClassName(),returnedConnectorType.getConnectorProviderClassName());

            assertEquals(requestedConnectorType.getQualifiedName(),returnedConnectorType.getQualifiedName());

            assertEquals(requestedConnectorType.getAdditionalProperties(),returnedConnectorType.getAdditionalProperties());

        }
@Test
    public void testCreateCohortMember() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateCohortMember";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String version = "string0";
        primitivePropertyValue.setPrimitiveValue(version);
        instanceProperties.setProperty("version", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string1";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string2";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String type = "string3";
        primitivePropertyValue.setPrimitiveValue(type);
        instanceProperties.setProperty("type", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String patchLevel = "string4";
        primitivePropertyValue.setPrimitiveValue(patchLevel);
        instanceProperties.setProperty("patchLevel", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String source = "string5";
        primitivePropertyValue.setPrimitiveValue(source);
        instanceProperties.setProperty("source", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string6";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("CohortMember");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        CohortMember requestedCohortMember = new CohortMember();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedCohortMember.setSystemAttributes(systemAttributes);

        requestedCohortMember.setVersion(version);

        requestedCohortMember.setName(name);

        requestedCohortMember.setDescription(description);

        requestedCohortMember.setType(type);

        requestedCohortMember.setPatchLevel(patchLevel);

        requestedCohortMember.setSource(source);

        requestedCohortMember.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedCohortMember.setAdditionalProperties(mapValue);
        CohortMember returnedCohortMember = subjectAreaBeansToAccessOMRS.createCohortMember(testuserid, requestedCohortMember);
        assertEquals(requestedCohortMember.getVersion(),returnedCohortMember.getVersion());

        assertEquals(requestedCohortMember.getName(),returnedCohortMember.getName());

        assertEquals(requestedCohortMember.getDescription(),returnedCohortMember.getDescription());

        assertEquals(requestedCohortMember.getType(),returnedCohortMember.getType());

        assertEquals(requestedCohortMember.getPatchLevel(),returnedCohortMember.getPatchLevel());

        assertEquals(requestedCohortMember.getSource(),returnedCohortMember.getSource());

        assertEquals(requestedCohortMember.getQualifiedName(),returnedCohortMember.getQualifiedName());

        assertEquals(requestedCohortMember.getAdditionalProperties(),returnedCohortMember.getAdditionalProperties());

    }    
    @Test
    public void testGetCohortMemberById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-CohortMember-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String version = "string0";
        primitivePropertyValue.setPrimitiveValue(version);
        instanceProperties.setProperty("version", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string1";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string2";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String type = "string3";
        primitivePropertyValue.setPrimitiveValue(type);
        instanceProperties.setProperty("type", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String patchLevel = "string4";
        primitivePropertyValue.setPrimitiveValue(patchLevel);
        instanceProperties.setProperty("patchLevel", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String source = "string5";
        primitivePropertyValue.setPrimitiveValue(source);
        instanceProperties.setProperty("source", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string6";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("CohortMember");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        CohortMember cohortMemberEntity = subjectAreaBeansToAccessOMRS.getCohortMemberById(testuserid, testguid1);
        assertEquals(cohortMemberEntity.getVersion(),version);
        assertEquals(cohortMemberEntity.getName(),name);
        assertEquals(cohortMemberEntity.getDescription(),description);
        assertEquals(cohortMemberEntity.getType(),type);
        assertEquals(cohortMemberEntity.getPatchLevel(),patchLevel);
        assertEquals(cohortMemberEntity.getSource(),source);
        assertEquals(cohortMemberEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateCohortMember() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateCohortMember";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String version = "string0";
            primitivePropertyValue.setPrimitiveValue(version);
            instanceProperties.setProperty("version", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string1";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string2";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String type = "string3";
            primitivePropertyValue.setPrimitiveValue(type);
            instanceProperties.setProperty("type", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String patchLevel = "string4";
            primitivePropertyValue.setPrimitiveValue(patchLevel);
            instanceProperties.setProperty("patchLevel", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string5";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string6";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("CohortMember");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            CohortMember requestedCohortMember = new CohortMember();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedCohortMember.setSystemAttributes(systemAttributes);

            requestedCohortMember.setVersion(version);

            requestedCohortMember.setName(name);

            requestedCohortMember.setDescription(description);

            requestedCohortMember.setType(type);

            requestedCohortMember.setPatchLevel(patchLevel);

            requestedCohortMember.setSource(source);

            requestedCohortMember.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedCohortMember.setAdditionalProperties(mapValue);
            CohortMember returnedCohortMember = subjectAreaBeansToAccessOMRS.updateCohortMember(testuserid,requestedCohortMember);
            assertEquals(requestedCohortMember.getVersion(),returnedCohortMember.getVersion());

            assertEquals(requestedCohortMember.getName(),returnedCohortMember.getName());

            assertEquals(requestedCohortMember.getDescription(),returnedCohortMember.getDescription());

            assertEquals(requestedCohortMember.getType(),returnedCohortMember.getType());

            assertEquals(requestedCohortMember.getPatchLevel(),returnedCohortMember.getPatchLevel());

            assertEquals(requestedCohortMember.getSource(),returnedCohortMember.getSource());

            assertEquals(requestedCohortMember.getQualifiedName(),returnedCohortMember.getQualifiedName());

            assertEquals(requestedCohortMember.getAdditionalProperties(),returnedCohortMember.getAdditionalProperties());

        }
@Test
    public void testCreateComplexSchemaType() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateComplexSchemaType";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String versionNumber = "string1";
        primitivePropertyValue.setPrimitiveValue(versionNumber);
        instanceProperties.setProperty("versionNumber", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String author = "string2";
        primitivePropertyValue.setPrimitiveValue(author);
        instanceProperties.setProperty("author", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String usage = "string3";
        primitivePropertyValue.setPrimitiveValue(usage);
        instanceProperties.setProperty("usage", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String encodingStandard = "string4";
        primitivePropertyValue.setPrimitiveValue(encodingStandard);
        instanceProperties.setProperty("encodingStandard", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("ComplexSchemaType");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        ComplexSchemaType requestedComplexSchemaType = new ComplexSchemaType();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedComplexSchemaType.setSystemAttributes(systemAttributes);

        requestedComplexSchemaType.setDisplayName(displayName);

        requestedComplexSchemaType.setVersionNumber(versionNumber);

        requestedComplexSchemaType.setAuthor(author);

        requestedComplexSchemaType.setUsage(usage);

        requestedComplexSchemaType.setEncodingStandard(encodingStandard);

        requestedComplexSchemaType.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedComplexSchemaType.setAdditionalProperties(mapValue);
        ComplexSchemaType returnedComplexSchemaType = subjectAreaBeansToAccessOMRS.createComplexSchemaType(testuserid, requestedComplexSchemaType);
        assertEquals(requestedComplexSchemaType.getDisplayName(),returnedComplexSchemaType.getDisplayName());

        assertEquals(requestedComplexSchemaType.getVersionNumber(),returnedComplexSchemaType.getVersionNumber());

        assertEquals(requestedComplexSchemaType.getAuthor(),returnedComplexSchemaType.getAuthor());

        assertEquals(requestedComplexSchemaType.getUsage(),returnedComplexSchemaType.getUsage());

        assertEquals(requestedComplexSchemaType.getEncodingStandard(),returnedComplexSchemaType.getEncodingStandard());

        assertEquals(requestedComplexSchemaType.getQualifiedName(),returnedComplexSchemaType.getQualifiedName());

        assertEquals(requestedComplexSchemaType.getAdditionalProperties(),returnedComplexSchemaType.getAdditionalProperties());

    }    
    @Test
    public void testGetComplexSchemaTypeById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-ComplexSchemaType-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String versionNumber = "string1";
        primitivePropertyValue.setPrimitiveValue(versionNumber);
        instanceProperties.setProperty("versionNumber", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String author = "string2";
        primitivePropertyValue.setPrimitiveValue(author);
        instanceProperties.setProperty("author", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String usage = "string3";
        primitivePropertyValue.setPrimitiveValue(usage);
        instanceProperties.setProperty("usage", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String encodingStandard = "string4";
        primitivePropertyValue.setPrimitiveValue(encodingStandard);
        instanceProperties.setProperty("encodingStandard", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("ComplexSchemaType");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        ComplexSchemaType complexSchemaTypeEntity = subjectAreaBeansToAccessOMRS.getComplexSchemaTypeById(testuserid, testguid1);
        assertEquals(complexSchemaTypeEntity.getDisplayName(),displayName);
        assertEquals(complexSchemaTypeEntity.getVersionNumber(),versionNumber);
        assertEquals(complexSchemaTypeEntity.getAuthor(),author);
        assertEquals(complexSchemaTypeEntity.getUsage(),usage);
        assertEquals(complexSchemaTypeEntity.getEncodingStandard(),encodingStandard);
        assertEquals(complexSchemaTypeEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateComplexSchemaType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateComplexSchemaType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String displayName = "string0";
            primitivePropertyValue.setPrimitiveValue(displayName);
            instanceProperties.setProperty("displayName", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String versionNumber = "string1";
            primitivePropertyValue.setPrimitiveValue(versionNumber);
            instanceProperties.setProperty("versionNumber", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String author = "string2";
            primitivePropertyValue.setPrimitiveValue(author);
            instanceProperties.setProperty("author", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String usage = "string3";
            primitivePropertyValue.setPrimitiveValue(usage);
            instanceProperties.setProperty("usage", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String encodingStandard = "string4";
            primitivePropertyValue.setPrimitiveValue(encodingStandard);
            instanceProperties.setProperty("encodingStandard", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string5";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("ComplexSchemaType");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ComplexSchemaType requestedComplexSchemaType = new ComplexSchemaType();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedComplexSchemaType.setSystemAttributes(systemAttributes);

            requestedComplexSchemaType.setDisplayName(displayName);

            requestedComplexSchemaType.setVersionNumber(versionNumber);

            requestedComplexSchemaType.setAuthor(author);

            requestedComplexSchemaType.setUsage(usage);

            requestedComplexSchemaType.setEncodingStandard(encodingStandard);

            requestedComplexSchemaType.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedComplexSchemaType.setAdditionalProperties(mapValue);
            ComplexSchemaType returnedComplexSchemaType = subjectAreaBeansToAccessOMRS.updateComplexSchemaType(testuserid,requestedComplexSchemaType);
            assertEquals(requestedComplexSchemaType.getDisplayName(),returnedComplexSchemaType.getDisplayName());

            assertEquals(requestedComplexSchemaType.getVersionNumber(),returnedComplexSchemaType.getVersionNumber());

            assertEquals(requestedComplexSchemaType.getAuthor(),returnedComplexSchemaType.getAuthor());

            assertEquals(requestedComplexSchemaType.getUsage(),returnedComplexSchemaType.getUsage());

            assertEquals(requestedComplexSchemaType.getEncodingStandard(),returnedComplexSchemaType.getEncodingStandard());

            assertEquals(requestedComplexSchemaType.getQualifiedName(),returnedComplexSchemaType.getQualifiedName());

            assertEquals(requestedComplexSchemaType.getAdditionalProperties(),returnedComplexSchemaType.getAdditionalProperties());

        }
@Test
    public void testCreateGovernanceMetric() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateGovernanceMetric";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String measurement = "string2";
        primitivePropertyValue.setPrimitiveValue(measurement);
        instanceProperties.setProperty("measurement", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String target = "string3";
        primitivePropertyValue.setPrimitiveValue(target);
        instanceProperties.setProperty("target", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string4";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GovernanceMetric");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GovernanceMetric requestedGovernanceMetric = new GovernanceMetric();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedGovernanceMetric.setSystemAttributes(systemAttributes);

        requestedGovernanceMetric.setDisplayName(displayName);

        requestedGovernanceMetric.setDescription(description);

        requestedGovernanceMetric.setMeasurement(measurement);

        requestedGovernanceMetric.setTarget(target);

        requestedGovernanceMetric.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedGovernanceMetric.setAdditionalProperties(mapValue);
        GovernanceMetric returnedGovernanceMetric = subjectAreaBeansToAccessOMRS.createGovernanceMetric(testuserid, requestedGovernanceMetric);
        assertEquals(requestedGovernanceMetric.getDisplayName(),returnedGovernanceMetric.getDisplayName());

        assertEquals(requestedGovernanceMetric.getDescription(),returnedGovernanceMetric.getDescription());

        assertEquals(requestedGovernanceMetric.getMeasurement(),returnedGovernanceMetric.getMeasurement());

        assertEquals(requestedGovernanceMetric.getTarget(),returnedGovernanceMetric.getTarget());

        assertEquals(requestedGovernanceMetric.getQualifiedName(),returnedGovernanceMetric.getQualifiedName());

        assertEquals(requestedGovernanceMetric.getAdditionalProperties(),returnedGovernanceMetric.getAdditionalProperties());

    }    
    @Test
    public void testGetGovernanceMetricById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-GovernanceMetric-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String measurement = "string2";
        primitivePropertyValue.setPrimitiveValue(measurement);
        instanceProperties.setProperty("measurement", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String target = "string3";
        primitivePropertyValue.setPrimitiveValue(target);
        instanceProperties.setProperty("target", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string4";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GovernanceMetric");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GovernanceMetric governanceMetricEntity = subjectAreaBeansToAccessOMRS.getGovernanceMetricById(testuserid, testguid1);
        assertEquals(governanceMetricEntity.getDisplayName(),displayName);
        assertEquals(governanceMetricEntity.getDescription(),description);
        assertEquals(governanceMetricEntity.getMeasurement(),measurement);
        assertEquals(governanceMetricEntity.getTarget(),target);
        assertEquals(governanceMetricEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateGovernanceMetric() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGovernanceMetric";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String displayName = "string0";
            primitivePropertyValue.setPrimitiveValue(displayName);
            instanceProperties.setProperty("displayName", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String measurement = "string2";
            primitivePropertyValue.setPrimitiveValue(measurement);
            instanceProperties.setProperty("measurement", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String target = "string3";
            primitivePropertyValue.setPrimitiveValue(target);
            instanceProperties.setProperty("target", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string4";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("GovernanceMetric");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceMetric requestedGovernanceMetric = new GovernanceMetric();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedGovernanceMetric.setSystemAttributes(systemAttributes);

            requestedGovernanceMetric.setDisplayName(displayName);

            requestedGovernanceMetric.setDescription(description);

            requestedGovernanceMetric.setMeasurement(measurement);

            requestedGovernanceMetric.setTarget(target);

            requestedGovernanceMetric.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedGovernanceMetric.setAdditionalProperties(mapValue);
            GovernanceMetric returnedGovernanceMetric = subjectAreaBeansToAccessOMRS.updateGovernanceMetric(testuserid,requestedGovernanceMetric);
            assertEquals(requestedGovernanceMetric.getDisplayName(),returnedGovernanceMetric.getDisplayName());

            assertEquals(requestedGovernanceMetric.getDescription(),returnedGovernanceMetric.getDescription());

            assertEquals(requestedGovernanceMetric.getMeasurement(),returnedGovernanceMetric.getMeasurement());

            assertEquals(requestedGovernanceMetric.getTarget(),returnedGovernanceMetric.getTarget());

            assertEquals(requestedGovernanceMetric.getQualifiedName(),returnedGovernanceMetric.getQualifiedName());

            assertEquals(requestedGovernanceMetric.getAdditionalProperties(),returnedGovernanceMetric.getAdditionalProperties());

        }
@Test
    public void testCreateExternalId() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateExternalId";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String identifier = "string0";
        primitivePropertyValue.setPrimitiveValue(identifier);
        instanceProperties.setProperty("identifier", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string1";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(KeyPattern.values()[0].name());
        instanceProperties.setProperty("keyPattern", enumPropertyValue);

        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("ExternalId");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        ExternalId requestedExternalId = new ExternalId();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedExternalId.setSystemAttributes(systemAttributes);

        requestedExternalId.setIdentifier(identifier);

        requestedExternalId.setQualifiedName(qualifiedName);

        EnumPropertyValue KeyPatternEnumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        KeyPatternEnumPropertyValue.setSymbolicName(KeyPattern.values()[0].name());
        instanceProperties.setProperty("keyPattern", KeyPatternEnumPropertyValue);

        requestedExternalId.setKeyPattern(KeyPattern.values()[0]);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedExternalId.setAdditionalProperties(mapValue);
        ExternalId returnedExternalId = subjectAreaBeansToAccessOMRS.createExternalId(testuserid, requestedExternalId);
        assertEquals(requestedExternalId.getIdentifier(),returnedExternalId.getIdentifier());

        assertEquals(requestedExternalId.getQualifiedName(),returnedExternalId.getQualifiedName());

        assertEquals(requestedExternalId.getKeyPattern(),returnedExternalId.getKeyPattern());

        assertEquals(requestedExternalId.getAdditionalProperties(),returnedExternalId.getAdditionalProperties());

    }    
    @Test
    public void testGetExternalIdById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-ExternalId-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String identifier = "string0";
        primitivePropertyValue.setPrimitiveValue(identifier);
        instanceProperties.setProperty("identifier", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string1";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(KeyPattern.values()[0].name());
        instanceProperties.setProperty("keyPattern", enumPropertyValue);

        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("ExternalId");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        ExternalId externalIdEntity = subjectAreaBeansToAccessOMRS.getExternalIdById(testuserid, testguid1);
        assertEquals(externalIdEntity.getIdentifier(),identifier);
        assertEquals(externalIdEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateExternalId() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateExternalId";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String identifier = "string0";
            primitivePropertyValue.setPrimitiveValue(identifier);
            instanceProperties.setProperty("identifier", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string1";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(KeyPattern.values()[0].name());
            instanceProperties.setProperty("keyPattern", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("ExternalId");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ExternalId requestedExternalId = new ExternalId();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedExternalId.setSystemAttributes(systemAttributes);

            requestedExternalId.setIdentifier(identifier);

            requestedExternalId.setQualifiedName(qualifiedName);

            EnumPropertyValue KeyPatternEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            KeyPatternEnumPropertyValue.setSymbolicName(KeyPattern.values()[0].name());
            instanceProperties.setProperty("keyPattern", KeyPatternEnumPropertyValue);

            requestedExternalId.setKeyPattern(KeyPattern.values()[0]);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedExternalId.setAdditionalProperties(mapValue);
            ExternalId returnedExternalId = subjectAreaBeansToAccessOMRS.updateExternalId(testuserid,requestedExternalId);
            assertEquals(requestedExternalId.getIdentifier(),returnedExternalId.getIdentifier());

            assertEquals(requestedExternalId.getQualifiedName(),returnedExternalId.getQualifiedName());

            assertEquals(requestedExternalId.getKeyPattern(),returnedExternalId.getKeyPattern());

            assertEquals(requestedExternalId.getAdditionalProperties(),returnedExternalId.getAdditionalProperties());

        }
@Test
    public void testCreateConnection() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateConnection";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string2";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("securedProperties", mapPropertyValue);

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Connection");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Connection requestedConnection = new Connection();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedConnection.setSystemAttributes(systemAttributes);

        requestedConnection.setDisplayName(displayName);

        requestedConnection.setDescription(description);

        requestedConnection.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedConnection.setSecuredProperties(mapValue);
        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedConnection.setAdditionalProperties(mapValue);
        Connection returnedConnection = subjectAreaBeansToAccessOMRS.createConnection(testuserid, requestedConnection);
        assertEquals(requestedConnection.getDisplayName(),returnedConnection.getDisplayName());

        assertEquals(requestedConnection.getDescription(),returnedConnection.getDescription());

        assertEquals(requestedConnection.getQualifiedName(),returnedConnection.getQualifiedName());

        assertEquals(requestedConnection.getSecuredProperties(),returnedConnection.getSecuredProperties());

        assertEquals(requestedConnection.getAdditionalProperties(),returnedConnection.getAdditionalProperties());

    }    
    @Test
    public void testGetConnectionById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-Connection-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string2";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("SecuredProperties", mapPropertyValue);

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Connection");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Connection connectionEntity = subjectAreaBeansToAccessOMRS.getConnectionById(testuserid, testguid1);
        assertEquals(connectionEntity.getDisplayName(),displayName);
        assertEquals(connectionEntity.getDescription(),description);
        assertEquals(connectionEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateConnection() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateConnection";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String displayName = "string0";
            primitivePropertyValue.setPrimitiveValue(displayName);
            instanceProperties.setProperty("displayName", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string2";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("securedProperties", mapPropertyValue);

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("Connection");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Connection requestedConnection = new Connection();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedConnection.setSystemAttributes(systemAttributes);

            requestedConnection.setDisplayName(displayName);

            requestedConnection.setDescription(description);

            requestedConnection.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedConnection.setSecuredProperties(mapValue);
            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedConnection.setAdditionalProperties(mapValue);
            Connection returnedConnection = subjectAreaBeansToAccessOMRS.updateConnection(testuserid,requestedConnection);
            assertEquals(requestedConnection.getDisplayName(),returnedConnection.getDisplayName());

            assertEquals(requestedConnection.getDescription(),returnedConnection.getDescription());

            assertEquals(requestedConnection.getQualifiedName(),returnedConnection.getQualifiedName());

            assertEquals(requestedConnection.getSecuredProperties(),returnedConnection.getSecuredProperties());

            assertEquals(requestedConnection.getAdditionalProperties(),returnedConnection.getAdditionalProperties());

        }
@Test
    public void testCreateHost() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateHost";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string2";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Host");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Host requestedHost = new Host();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedHost.setSystemAttributes(systemAttributes);

        requestedHost.setName(name);

        requestedHost.setDescription(description);

        requestedHost.setOwner(owner);

        requestedHost.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedHost.setAdditionalProperties(mapValue);
        Host returnedHost = subjectAreaBeansToAccessOMRS.createHost(testuserid, requestedHost);
        assertEquals(requestedHost.getName(),returnedHost.getName());

        assertEquals(requestedHost.getDescription(),returnedHost.getDescription());

        assertEquals(requestedHost.getOwner(),returnedHost.getOwner());

        assertEquals(requestedHost.getQualifiedName(),returnedHost.getQualifiedName());

        assertEquals(requestedHost.getAdditionalProperties(),returnedHost.getAdditionalProperties());

    }    
    @Test
    public void testGetHostById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-Host-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string2";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Host");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Host hostEntity = subjectAreaBeansToAccessOMRS.getHostById(testuserid, testguid1);
        assertEquals(hostEntity.getName(),name);
        assertEquals(hostEntity.getDescription(),description);
        assertEquals(hostEntity.getOwner(),owner);
        assertEquals(hostEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateHost() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateHost";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String owner = "string2";
            primitivePropertyValue.setPrimitiveValue(owner);
            instanceProperties.setProperty("owner", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string3";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("Host");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Host requestedHost = new Host();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedHost.setSystemAttributes(systemAttributes);

            requestedHost.setName(name);

            requestedHost.setDescription(description);

            requestedHost.setOwner(owner);

            requestedHost.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedHost.setAdditionalProperties(mapValue);
            Host returnedHost = subjectAreaBeansToAccessOMRS.updateHost(testuserid,requestedHost);
            assertEquals(requestedHost.getName(),returnedHost.getName());

            assertEquals(requestedHost.getDescription(),returnedHost.getDescription());

            assertEquals(requestedHost.getOwner(),returnedHost.getOwner());

            assertEquals(requestedHost.getQualifiedName(),returnedHost.getQualifiedName());

            assertEquals(requestedHost.getAdditionalProperties(),returnedHost.getAdditionalProperties());

        }
@Test
    public void testCreateSubscriberList() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateSubscriberList";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string2";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("SubscriberList");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        SubscriberList requestedSubscriberList = new SubscriberList();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedSubscriberList.setSystemAttributes(systemAttributes);

        requestedSubscriberList.setName(name);

        requestedSubscriberList.setDescription(description);

        requestedSubscriberList.setOwner(owner);

        requestedSubscriberList.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedSubscriberList.setAdditionalProperties(mapValue);
        SubscriberList returnedSubscriberList = subjectAreaBeansToAccessOMRS.createSubscriberList(testuserid, requestedSubscriberList);
        assertEquals(requestedSubscriberList.getName(),returnedSubscriberList.getName());

        assertEquals(requestedSubscriberList.getDescription(),returnedSubscriberList.getDescription());

        assertEquals(requestedSubscriberList.getOwner(),returnedSubscriberList.getOwner());

        assertEquals(requestedSubscriberList.getQualifiedName(),returnedSubscriberList.getQualifiedName());

        assertEquals(requestedSubscriberList.getAdditionalProperties(),returnedSubscriberList.getAdditionalProperties());

    }    
    @Test
    public void testGetSubscriberListById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-SubscriberList-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String owner = "string2";
        primitivePropertyValue.setPrimitiveValue(owner);
        instanceProperties.setProperty("owner", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("SubscriberList");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        SubscriberList subscriberListEntity = subjectAreaBeansToAccessOMRS.getSubscriberListById(testuserid, testguid1);
        assertEquals(subscriberListEntity.getName(),name);
        assertEquals(subscriberListEntity.getDescription(),description);
        assertEquals(subscriberListEntity.getOwner(),owner);
        assertEquals(subscriberListEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateSubscriberList() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateSubscriberList";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String owner = "string2";
            primitivePropertyValue.setPrimitiveValue(owner);
            instanceProperties.setProperty("owner", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string3";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("SubscriberList");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SubscriberList requestedSubscriberList = new SubscriberList();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedSubscriberList.setSystemAttributes(systemAttributes);

            requestedSubscriberList.setName(name);

            requestedSubscriberList.setDescription(description);

            requestedSubscriberList.setOwner(owner);

            requestedSubscriberList.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedSubscriberList.setAdditionalProperties(mapValue);
            SubscriberList returnedSubscriberList = subjectAreaBeansToAccessOMRS.updateSubscriberList(testuserid,requestedSubscriberList);
            assertEquals(requestedSubscriberList.getName(),returnedSubscriberList.getName());

            assertEquals(requestedSubscriberList.getDescription(),returnedSubscriberList.getDescription());

            assertEquals(requestedSubscriberList.getOwner(),returnedSubscriberList.getOwner());

            assertEquals(requestedSubscriberList.getQualifiedName(),returnedSubscriberList.getQualifiedName());

            assertEquals(requestedSubscriberList.getAdditionalProperties(),returnedSubscriberList.getAdditionalProperties());

        }
@Test
    public void testCreateGovernanceRule() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateGovernanceRule";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String implementationDescription = "string0";
        primitivePropertyValue.setPrimitiveValue(implementationDescription);
        instanceProperties.setProperty("implementationDescription", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String title = "string1";
        primitivePropertyValue.setPrimitiveValue(title);
        instanceProperties.setProperty("title", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String summary = "string2";
        primitivePropertyValue.setPrimitiveValue(summary);
        instanceProperties.setProperty("summary", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string3";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String scope = "string4";
        primitivePropertyValue.setPrimitiveValue(scope);
        instanceProperties.setProperty("scope", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String priority = "string5";
        primitivePropertyValue.setPrimitiveValue(priority);
        instanceProperties.setProperty("priority", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string9";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String implications = "string6";
        primitivePropertyValue.setPrimitiveValue(implications);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("implications", arrayPropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String outcomes = "string7";
        primitivePropertyValue.setPrimitiveValue(outcomes);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("outcomes", arrayPropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String results = "string8";
        primitivePropertyValue.setPrimitiveValue(results);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("results", arrayPropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", enumPropertyValue);

        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GovernanceRule");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GovernanceRule requestedGovernanceRule = new GovernanceRule();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedGovernanceRule.setSystemAttributes(systemAttributes);

        requestedGovernanceRule.setImplementationDescription(implementationDescription);

        requestedGovernanceRule.setTitle(title);

        requestedGovernanceRule.setSummary(summary);

        requestedGovernanceRule.setDescription(description);

        requestedGovernanceRule.setScope(scope);

        requestedGovernanceRule.setPriority(priority);

        requestedGovernanceRule.setQualifiedName(qualifiedName);

        EnumPropertyValue GovernanceDomainEnumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        GovernanceDomainEnumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", GovernanceDomainEnumPropertyValue);

        requestedGovernanceRule.setDomain(GovernanceDomain.values()[0]);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedGovernanceRule.setAdditionalProperties(mapValue);
        GovernanceRule returnedGovernanceRule = subjectAreaBeansToAccessOMRS.createGovernanceRule(testuserid, requestedGovernanceRule);
        assertEquals(requestedGovernanceRule.getImplementationDescription(),returnedGovernanceRule.getImplementationDescription());

        assertEquals(requestedGovernanceRule.getTitle(),returnedGovernanceRule.getTitle());

        assertEquals(requestedGovernanceRule.getSummary(),returnedGovernanceRule.getSummary());

        assertEquals(requestedGovernanceRule.getDescription(),returnedGovernanceRule.getDescription());

        assertEquals(requestedGovernanceRule.getScope(),returnedGovernanceRule.getScope());

        assertEquals(requestedGovernanceRule.getPriority(),returnedGovernanceRule.getPriority());

        assertEquals(requestedGovernanceRule.getQualifiedName(),returnedGovernanceRule.getQualifiedName());

        assertEquals(requestedGovernanceRule.getDomain(),returnedGovernanceRule.getDomain());

        assertEquals(requestedGovernanceRule.getAdditionalProperties(),returnedGovernanceRule.getAdditionalProperties());

    }    
    @Test
    public void testGetGovernanceRuleById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-GovernanceRule-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String implementationDescription = "string0";
        primitivePropertyValue.setPrimitiveValue(implementationDescription);
        instanceProperties.setProperty("implementationDescription", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String title = "string1";
        primitivePropertyValue.setPrimitiveValue(title);
        instanceProperties.setProperty("title", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String summary = "string2";
        primitivePropertyValue.setPrimitiveValue(summary);
        instanceProperties.setProperty("summary", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string3";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String scope = "string4";
        primitivePropertyValue.setPrimitiveValue(scope);
        instanceProperties.setProperty("scope", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String priority = "string5";
        primitivePropertyValue.setPrimitiveValue(priority);
        instanceProperties.setProperty("priority", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string9";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", enumPropertyValue);

        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GovernanceRule");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GovernanceRule governanceRuleEntity = subjectAreaBeansToAccessOMRS.getGovernanceRuleById(testuserid, testguid1);
        assertEquals(governanceRuleEntity.getImplementationDescription(),implementationDescription);
        assertEquals(governanceRuleEntity.getTitle(),title);
        assertEquals(governanceRuleEntity.getSummary(),summary);
        assertEquals(governanceRuleEntity.getDescription(),description);
        assertEquals(governanceRuleEntity.getScope(),scope);
        assertEquals(governanceRuleEntity.getPriority(),priority);
        assertEquals(governanceRuleEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateGovernanceRule() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGovernanceRule";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String implementationDescription = "string0";
            primitivePropertyValue.setPrimitiveValue(implementationDescription);
            instanceProperties.setProperty("implementationDescription", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String title = "string1";
            primitivePropertyValue.setPrimitiveValue(title);
            instanceProperties.setProperty("title", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String summary = "string2";
            primitivePropertyValue.setPrimitiveValue(summary);
            instanceProperties.setProperty("summary", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string3";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String scope = "string4";
            primitivePropertyValue.setPrimitiveValue(scope);
            instanceProperties.setProperty("scope", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String priority = "string5";
            primitivePropertyValue.setPrimitiveValue(priority);
            instanceProperties.setProperty("priority", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string9";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
            instanceProperties.setProperty("domain", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("GovernanceRule");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceRule requestedGovernanceRule = new GovernanceRule();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedGovernanceRule.setSystemAttributes(systemAttributes);

            requestedGovernanceRule.setImplementationDescription(implementationDescription);

            requestedGovernanceRule.setTitle(title);

            requestedGovernanceRule.setSummary(summary);

            requestedGovernanceRule.setDescription(description);

            requestedGovernanceRule.setScope(scope);

            requestedGovernanceRule.setPriority(priority);

            requestedGovernanceRule.setQualifiedName(qualifiedName);

            EnumPropertyValue GovernanceDomainEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            GovernanceDomainEnumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
            instanceProperties.setProperty("domain", GovernanceDomainEnumPropertyValue);

            requestedGovernanceRule.setDomain(GovernanceDomain.values()[0]);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedGovernanceRule.setAdditionalProperties(mapValue);
            GovernanceRule returnedGovernanceRule = subjectAreaBeansToAccessOMRS.updateGovernanceRule(testuserid,requestedGovernanceRule);
            assertEquals(requestedGovernanceRule.getImplementationDescription(),returnedGovernanceRule.getImplementationDescription());

            assertEquals(requestedGovernanceRule.getTitle(),returnedGovernanceRule.getTitle());

            assertEquals(requestedGovernanceRule.getSummary(),returnedGovernanceRule.getSummary());

            assertEquals(requestedGovernanceRule.getDescription(),returnedGovernanceRule.getDescription());

            assertEquals(requestedGovernanceRule.getScope(),returnedGovernanceRule.getScope());

            assertEquals(requestedGovernanceRule.getPriority(),returnedGovernanceRule.getPriority());

            assertEquals(requestedGovernanceRule.getQualifiedName(),returnedGovernanceRule.getQualifiedName());

            assertEquals(requestedGovernanceRule.getDomain(),returnedGovernanceRule.getDomain());

            assertEquals(requestedGovernanceRule.getAdditionalProperties(),returnedGovernanceRule.getAdditionalProperties());

        }
@Test
    public void testCreateMetadataRepositoryCohort() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateMetadataRepositoryCohort";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string0";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String topic = "string1";
        primitivePropertyValue.setPrimitiveValue(topic);
        instanceProperties.setProperty("topic", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string2";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("MetadataRepositoryCohort");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        MetadataRepositoryCohort requestedMetadataRepositoryCohort = new MetadataRepositoryCohort();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedMetadataRepositoryCohort.setSystemAttributes(systemAttributes);

        requestedMetadataRepositoryCohort.setDescription(description);

        requestedMetadataRepositoryCohort.setTopic(topic);

        requestedMetadataRepositoryCohort.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedMetadataRepositoryCohort.setAdditionalProperties(mapValue);
        MetadataRepositoryCohort returnedMetadataRepositoryCohort = subjectAreaBeansToAccessOMRS.createMetadataRepositoryCohort(testuserid, requestedMetadataRepositoryCohort);
        assertEquals(requestedMetadataRepositoryCohort.getDescription(),returnedMetadataRepositoryCohort.getDescription());

        assertEquals(requestedMetadataRepositoryCohort.getTopic(),returnedMetadataRepositoryCohort.getTopic());

        assertEquals(requestedMetadataRepositoryCohort.getQualifiedName(),returnedMetadataRepositoryCohort.getQualifiedName());

        assertEquals(requestedMetadataRepositoryCohort.getAdditionalProperties(),returnedMetadataRepositoryCohort.getAdditionalProperties());

    }    
    @Test
    public void testGetMetadataRepositoryCohortById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-MetadataRepositoryCohort-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string0";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String topic = "string1";
        primitivePropertyValue.setPrimitiveValue(topic);
        instanceProperties.setProperty("topic", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string2";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("MetadataRepositoryCohort");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        MetadataRepositoryCohort metadataRepositoryCohortEntity = subjectAreaBeansToAccessOMRS.getMetadataRepositoryCohortById(testuserid, testguid1);
        assertEquals(metadataRepositoryCohortEntity.getDescription(),description);
        assertEquals(metadataRepositoryCohortEntity.getTopic(),topic);
        assertEquals(metadataRepositoryCohortEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateMetadataRepositoryCohort() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateMetadataRepositoryCohort";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String topic = "string1";
            primitivePropertyValue.setPrimitiveValue(topic);
            instanceProperties.setProperty("topic", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string2";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("MetadataRepositoryCohort");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            MetadataRepositoryCohort requestedMetadataRepositoryCohort = new MetadataRepositoryCohort();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedMetadataRepositoryCohort.setSystemAttributes(systemAttributes);

            requestedMetadataRepositoryCohort.setDescription(description);

            requestedMetadataRepositoryCohort.setTopic(topic);

            requestedMetadataRepositoryCohort.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedMetadataRepositoryCohort.setAdditionalProperties(mapValue);
            MetadataRepositoryCohort returnedMetadataRepositoryCohort = subjectAreaBeansToAccessOMRS.updateMetadataRepositoryCohort(testuserid,requestedMetadataRepositoryCohort);
            assertEquals(requestedMetadataRepositoryCohort.getDescription(),returnedMetadataRepositoryCohort.getDescription());

            assertEquals(requestedMetadataRepositoryCohort.getTopic(),returnedMetadataRepositoryCohort.getTopic());

            assertEquals(requestedMetadataRepositoryCohort.getQualifiedName(),returnedMetadataRepositoryCohort.getQualifiedName());

            assertEquals(requestedMetadataRepositoryCohort.getAdditionalProperties(),returnedMetadataRepositoryCohort.getAdditionalProperties());

        }
@Test
    public void testCreateNoteLog() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateNoteLog";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string2";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("NoteLog");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        NoteLog requestedNoteLog = new NoteLog();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedNoteLog.setSystemAttributes(systemAttributes);

        requestedNoteLog.setName(name);

        requestedNoteLog.setDescription(description);

        requestedNoteLog.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedNoteLog.setAdditionalProperties(mapValue);
        NoteLog returnedNoteLog = subjectAreaBeansToAccessOMRS.createNoteLog(testuserid, requestedNoteLog);
        assertEquals(requestedNoteLog.getName(),returnedNoteLog.getName());

        assertEquals(requestedNoteLog.getDescription(),returnedNoteLog.getDescription());

        assertEquals(requestedNoteLog.getQualifiedName(),returnedNoteLog.getQualifiedName());

        assertEquals(requestedNoteLog.getAdditionalProperties(),returnedNoteLog.getAdditionalProperties());

    }    
    @Test
    public void testGetNoteLogById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-NoteLog-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string2";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("NoteLog");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        NoteLog noteLogEntity = subjectAreaBeansToAccessOMRS.getNoteLogById(testuserid, testguid1);
        assertEquals(noteLogEntity.getName(),name);
        assertEquals(noteLogEntity.getDescription(),description);
        assertEquals(noteLogEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateNoteLog() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateNoteLog";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string2";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("NoteLog");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            NoteLog requestedNoteLog = new NoteLog();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedNoteLog.setSystemAttributes(systemAttributes);

            requestedNoteLog.setName(name);

            requestedNoteLog.setDescription(description);

            requestedNoteLog.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedNoteLog.setAdditionalProperties(mapValue);
            NoteLog returnedNoteLog = subjectAreaBeansToAccessOMRS.updateNoteLog(testuserid,requestedNoteLog);
            assertEquals(requestedNoteLog.getName(),returnedNoteLog.getName());

            assertEquals(requestedNoteLog.getDescription(),returnedNoteLog.getDescription());

            assertEquals(requestedNoteLog.getQualifiedName(),returnedNoteLog.getQualifiedName());

            assertEquals(requestedNoteLog.getAdditionalProperties(),returnedNoteLog.getAdditionalProperties());

        }
@Test
    public void testCreateExternalGlossaryLink() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateExternalGlossaryLink";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String url = "string1";
        primitivePropertyValue.setPrimitiveValue(url);
        instanceProperties.setProperty("url", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String version = "string2";
        primitivePropertyValue.setPrimitiveValue(version);
        instanceProperties.setProperty("version", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string3";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String organization = "string4";
        primitivePropertyValue.setPrimitiveValue(organization);
        instanceProperties.setProperty("organization", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("ExternalGlossaryLink");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        ExternalGlossaryLink requestedExternalGlossaryLink = new ExternalGlossaryLink();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedExternalGlossaryLink.setSystemAttributes(systemAttributes);

        requestedExternalGlossaryLink.setDisplayName(displayName);

        requestedExternalGlossaryLink.setUrl(url);

        requestedExternalGlossaryLink.setVersion(version);

        requestedExternalGlossaryLink.setDescription(description);

        requestedExternalGlossaryLink.setOrganization(organization);

        requestedExternalGlossaryLink.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedExternalGlossaryLink.setAdditionalProperties(mapValue);
        ExternalGlossaryLink returnedExternalGlossaryLink = subjectAreaBeansToAccessOMRS.createExternalGlossaryLink(testuserid, requestedExternalGlossaryLink);
        assertEquals(requestedExternalGlossaryLink.getDisplayName(),returnedExternalGlossaryLink.getDisplayName());

        assertEquals(requestedExternalGlossaryLink.getUrl(),returnedExternalGlossaryLink.getUrl());

        assertEquals(requestedExternalGlossaryLink.getVersion(),returnedExternalGlossaryLink.getVersion());

        assertEquals(requestedExternalGlossaryLink.getDescription(),returnedExternalGlossaryLink.getDescription());

        assertEquals(requestedExternalGlossaryLink.getOrganization(),returnedExternalGlossaryLink.getOrganization());

        assertEquals(requestedExternalGlossaryLink.getQualifiedName(),returnedExternalGlossaryLink.getQualifiedName());

        assertEquals(requestedExternalGlossaryLink.getAdditionalProperties(),returnedExternalGlossaryLink.getAdditionalProperties());

    }    
    @Test
    public void testGetExternalGlossaryLinkById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-ExternalGlossaryLink-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String url = "string1";
        primitivePropertyValue.setPrimitiveValue(url);
        instanceProperties.setProperty("url", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String version = "string2";
        primitivePropertyValue.setPrimitiveValue(version);
        instanceProperties.setProperty("version", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string3";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String organization = "string4";
        primitivePropertyValue.setPrimitiveValue(organization);
        instanceProperties.setProperty("organization", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string5";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("ExternalGlossaryLink");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        ExternalGlossaryLink externalGlossaryLinkEntity = subjectAreaBeansToAccessOMRS.getExternalGlossaryLinkById(testuserid, testguid1);
        assertEquals(externalGlossaryLinkEntity.getDisplayName(),displayName);
        assertEquals(externalGlossaryLinkEntity.getUrl(),url);
        assertEquals(externalGlossaryLinkEntity.getVersion(),version);
        assertEquals(externalGlossaryLinkEntity.getDescription(),description);
        assertEquals(externalGlossaryLinkEntity.getOrganization(),organization);
        assertEquals(externalGlossaryLinkEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateExternalGlossaryLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateExternalGlossaryLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String displayName = "string0";
            primitivePropertyValue.setPrimitiveValue(displayName);
            instanceProperties.setProperty("displayName", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String url = "string1";
            primitivePropertyValue.setPrimitiveValue(url);
            instanceProperties.setProperty("url", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String version = "string2";
            primitivePropertyValue.setPrimitiveValue(version);
            instanceProperties.setProperty("version", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string3";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String organization = "string4";
            primitivePropertyValue.setPrimitiveValue(organization);
            instanceProperties.setProperty("organization", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string5";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("ExternalGlossaryLink");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ExternalGlossaryLink requestedExternalGlossaryLink = new ExternalGlossaryLink();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedExternalGlossaryLink.setSystemAttributes(systemAttributes);

            requestedExternalGlossaryLink.setDisplayName(displayName);

            requestedExternalGlossaryLink.setUrl(url);

            requestedExternalGlossaryLink.setVersion(version);

            requestedExternalGlossaryLink.setDescription(description);

            requestedExternalGlossaryLink.setOrganization(organization);

            requestedExternalGlossaryLink.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedExternalGlossaryLink.setAdditionalProperties(mapValue);
            ExternalGlossaryLink returnedExternalGlossaryLink = subjectAreaBeansToAccessOMRS.updateExternalGlossaryLink(testuserid,requestedExternalGlossaryLink);
            assertEquals(requestedExternalGlossaryLink.getDisplayName(),returnedExternalGlossaryLink.getDisplayName());

            assertEquals(requestedExternalGlossaryLink.getUrl(),returnedExternalGlossaryLink.getUrl());

            assertEquals(requestedExternalGlossaryLink.getVersion(),returnedExternalGlossaryLink.getVersion());

            assertEquals(requestedExternalGlossaryLink.getDescription(),returnedExternalGlossaryLink.getDescription());

            assertEquals(requestedExternalGlossaryLink.getOrganization(),returnedExternalGlossaryLink.getOrganization());

            assertEquals(requestedExternalGlossaryLink.getQualifiedName(),returnedExternalGlossaryLink.getQualifiedName());

            assertEquals(requestedExternalGlossaryLink.getAdditionalProperties(),returnedExternalGlossaryLink.getAdditionalProperties());

        }
@Test
    public void testCreateVirtualConnection() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateVirtualConnection";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string2";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("securedProperties", mapPropertyValue);

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("VirtualConnection");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        VirtualConnection requestedVirtualConnection = new VirtualConnection();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedVirtualConnection.setSystemAttributes(systemAttributes);

        requestedVirtualConnection.setDisplayName(displayName);

        requestedVirtualConnection.setDescription(description);

        requestedVirtualConnection.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedVirtualConnection.setSecuredProperties(mapValue);
        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedVirtualConnection.setAdditionalProperties(mapValue);
        VirtualConnection returnedVirtualConnection = subjectAreaBeansToAccessOMRS.createVirtualConnection(testuserid, requestedVirtualConnection);
        assertEquals(requestedVirtualConnection.getDisplayName(),returnedVirtualConnection.getDisplayName());

        assertEquals(requestedVirtualConnection.getDescription(),returnedVirtualConnection.getDescription());

        assertEquals(requestedVirtualConnection.getQualifiedName(),returnedVirtualConnection.getQualifiedName());

        assertEquals(requestedVirtualConnection.getSecuredProperties(),returnedVirtualConnection.getSecuredProperties());

        assertEquals(requestedVirtualConnection.getAdditionalProperties(),returnedVirtualConnection.getAdditionalProperties());

    }    
    @Test
    public void testGetVirtualConnectionById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-VirtualConnection-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string2";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("SecuredProperties", mapPropertyValue);

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("VirtualConnection");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        VirtualConnection virtualConnectionEntity = subjectAreaBeansToAccessOMRS.getVirtualConnectionById(testuserid, testguid1);
        assertEquals(virtualConnectionEntity.getDisplayName(),displayName);
        assertEquals(virtualConnectionEntity.getDescription(),description);
        assertEquals(virtualConnectionEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateVirtualConnection() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateVirtualConnection";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String displayName = "string0";
            primitivePropertyValue.setPrimitiveValue(displayName);
            instanceProperties.setProperty("displayName", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string2";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("securedProperties", mapPropertyValue);

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("VirtualConnection");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            VirtualConnection requestedVirtualConnection = new VirtualConnection();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedVirtualConnection.setSystemAttributes(systemAttributes);

            requestedVirtualConnection.setDisplayName(displayName);

            requestedVirtualConnection.setDescription(description);

            requestedVirtualConnection.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedVirtualConnection.setSecuredProperties(mapValue);
            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedVirtualConnection.setAdditionalProperties(mapValue);
            VirtualConnection returnedVirtualConnection = subjectAreaBeansToAccessOMRS.updateVirtualConnection(testuserid,requestedVirtualConnection);
            assertEquals(requestedVirtualConnection.getDisplayName(),returnedVirtualConnection.getDisplayName());

            assertEquals(requestedVirtualConnection.getDescription(),returnedVirtualConnection.getDescription());

            assertEquals(requestedVirtualConnection.getQualifiedName(),returnedVirtualConnection.getQualifiedName());

            assertEquals(requestedVirtualConnection.getSecuredProperties(),returnedVirtualConnection.getSecuredProperties());

            assertEquals(requestedVirtualConnection.getAdditionalProperties(),returnedVirtualConnection.getAdditionalProperties());

        }
@Test
    public void testCreateRegulation() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateRegulation";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String jurisdiction = "string0";
        primitivePropertyValue.setPrimitiveValue(jurisdiction);
        instanceProperties.setProperty("jurisdiction", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String title = "string1";
        primitivePropertyValue.setPrimitiveValue(title);
        instanceProperties.setProperty("title", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String summary = "string2";
        primitivePropertyValue.setPrimitiveValue(summary);
        instanceProperties.setProperty("summary", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string3";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String scope = "string4";
        primitivePropertyValue.setPrimitiveValue(scope);
        instanceProperties.setProperty("scope", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String priority = "string5";
        primitivePropertyValue.setPrimitiveValue(priority);
        instanceProperties.setProperty("priority", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string9";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String implications = "string6";
        primitivePropertyValue.setPrimitiveValue(implications);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("implications", arrayPropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String outcomes = "string7";
        primitivePropertyValue.setPrimitiveValue(outcomes);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("outcomes", arrayPropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String results = "string8";
        primitivePropertyValue.setPrimitiveValue(results);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("results", arrayPropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", enumPropertyValue);

        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Regulation");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Regulation requestedRegulation = new Regulation();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedRegulation.setSystemAttributes(systemAttributes);

        requestedRegulation.setJurisdiction(jurisdiction);

        requestedRegulation.setTitle(title);

        requestedRegulation.setSummary(summary);

        requestedRegulation.setDescription(description);

        requestedRegulation.setScope(scope);

        requestedRegulation.setPriority(priority);

        requestedRegulation.setQualifiedName(qualifiedName);

        EnumPropertyValue GovernanceDomainEnumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        GovernanceDomainEnumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", GovernanceDomainEnumPropertyValue);

        requestedRegulation.setDomain(GovernanceDomain.values()[0]);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedRegulation.setAdditionalProperties(mapValue);
        Regulation returnedRegulation = subjectAreaBeansToAccessOMRS.createRegulation(testuserid, requestedRegulation);
        assertEquals(requestedRegulation.getJurisdiction(),returnedRegulation.getJurisdiction());

        assertEquals(requestedRegulation.getTitle(),returnedRegulation.getTitle());

        assertEquals(requestedRegulation.getSummary(),returnedRegulation.getSummary());

        assertEquals(requestedRegulation.getDescription(),returnedRegulation.getDescription());

        assertEquals(requestedRegulation.getScope(),returnedRegulation.getScope());

        assertEquals(requestedRegulation.getPriority(),returnedRegulation.getPriority());

        assertEquals(requestedRegulation.getQualifiedName(),returnedRegulation.getQualifiedName());

        assertEquals(requestedRegulation.getDomain(),returnedRegulation.getDomain());

        assertEquals(requestedRegulation.getAdditionalProperties(),returnedRegulation.getAdditionalProperties());

    }    
    @Test
    public void testGetRegulationById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-Regulation-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String jurisdiction = "string0";
        primitivePropertyValue.setPrimitiveValue(jurisdiction);
        instanceProperties.setProperty("jurisdiction", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String title = "string1";
        primitivePropertyValue.setPrimitiveValue(title);
        instanceProperties.setProperty("title", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String summary = "string2";
        primitivePropertyValue.setPrimitiveValue(summary);
        instanceProperties.setProperty("summary", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string3";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String scope = "string4";
        primitivePropertyValue.setPrimitiveValue(scope);
        instanceProperties.setProperty("scope", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String priority = "string5";
        primitivePropertyValue.setPrimitiveValue(priority);
        instanceProperties.setProperty("priority", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string9";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", enumPropertyValue);

        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Regulation");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Regulation regulationEntity = subjectAreaBeansToAccessOMRS.getRegulationById(testuserid, testguid1);
        assertEquals(regulationEntity.getJurisdiction(),jurisdiction);
        assertEquals(regulationEntity.getTitle(),title);
        assertEquals(regulationEntity.getSummary(),summary);
        assertEquals(regulationEntity.getDescription(),description);
        assertEquals(regulationEntity.getScope(),scope);
        assertEquals(regulationEntity.getPriority(),priority);
        assertEquals(regulationEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateRegulation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateRegulation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String jurisdiction = "string0";
            primitivePropertyValue.setPrimitiveValue(jurisdiction);
            instanceProperties.setProperty("jurisdiction", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String title = "string1";
            primitivePropertyValue.setPrimitiveValue(title);
            instanceProperties.setProperty("title", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String summary = "string2";
            primitivePropertyValue.setPrimitiveValue(summary);
            instanceProperties.setProperty("summary", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string3";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String scope = "string4";
            primitivePropertyValue.setPrimitiveValue(scope);
            instanceProperties.setProperty("scope", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String priority = "string5";
            primitivePropertyValue.setPrimitiveValue(priority);
            instanceProperties.setProperty("priority", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string9";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
            instanceProperties.setProperty("domain", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("Regulation");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Regulation requestedRegulation = new Regulation();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedRegulation.setSystemAttributes(systemAttributes);

            requestedRegulation.setJurisdiction(jurisdiction);

            requestedRegulation.setTitle(title);

            requestedRegulation.setSummary(summary);

            requestedRegulation.setDescription(description);

            requestedRegulation.setScope(scope);

            requestedRegulation.setPriority(priority);

            requestedRegulation.setQualifiedName(qualifiedName);

            EnumPropertyValue GovernanceDomainEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            GovernanceDomainEnumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
            instanceProperties.setProperty("domain", GovernanceDomainEnumPropertyValue);

            requestedRegulation.setDomain(GovernanceDomain.values()[0]);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedRegulation.setAdditionalProperties(mapValue);
            Regulation returnedRegulation = subjectAreaBeansToAccessOMRS.updateRegulation(testuserid,requestedRegulation);
            assertEquals(requestedRegulation.getJurisdiction(),returnedRegulation.getJurisdiction());

            assertEquals(requestedRegulation.getTitle(),returnedRegulation.getTitle());

            assertEquals(requestedRegulation.getSummary(),returnedRegulation.getSummary());

            assertEquals(requestedRegulation.getDescription(),returnedRegulation.getDescription());

            assertEquals(requestedRegulation.getScope(),returnedRegulation.getScope());

            assertEquals(requestedRegulation.getPriority(),returnedRegulation.getPriority());

            assertEquals(requestedRegulation.getQualifiedName(),returnedRegulation.getQualifiedName());

            assertEquals(requestedRegulation.getDomain(),returnedRegulation.getDomain());

            assertEquals(requestedRegulation.getAdditionalProperties(),returnedRegulation.getAdditionalProperties());

        }
@Test
    public void testCreateGovernanceProcess() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateGovernanceProcess";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String implementationDescription = "string0";
        primitivePropertyValue.setPrimitiveValue(implementationDescription);
        instanceProperties.setProperty("implementationDescription", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String title = "string1";
        primitivePropertyValue.setPrimitiveValue(title);
        instanceProperties.setProperty("title", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String summary = "string2";
        primitivePropertyValue.setPrimitiveValue(summary);
        instanceProperties.setProperty("summary", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string3";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String scope = "string4";
        primitivePropertyValue.setPrimitiveValue(scope);
        instanceProperties.setProperty("scope", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String priority = "string5";
        primitivePropertyValue.setPrimitiveValue(priority);
        instanceProperties.setProperty("priority", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string9";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String implications = "string6";
        primitivePropertyValue.setPrimitiveValue(implications);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("implications", arrayPropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String outcomes = "string7";
        primitivePropertyValue.setPrimitiveValue(outcomes);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("outcomes", arrayPropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String results = "string8";
        primitivePropertyValue.setPrimitiveValue(results);

        arrayPropertyValue = new ArrayPropertyValue();
        arrayPropertyValue.setArrayCount(1);
        arrayPropertyValue.setArrayValue(0,primitivePropertyValue);
        instanceProperties.setProperty("results", arrayPropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", enumPropertyValue);

        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GovernanceProcess");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GovernanceProcess requestedGovernanceProcess = new GovernanceProcess();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedGovernanceProcess.setSystemAttributes(systemAttributes);

        requestedGovernanceProcess.setImplementationDescription(implementationDescription);

        requestedGovernanceProcess.setTitle(title);

        requestedGovernanceProcess.setSummary(summary);

        requestedGovernanceProcess.setDescription(description);

        requestedGovernanceProcess.setScope(scope);

        requestedGovernanceProcess.setPriority(priority);

        requestedGovernanceProcess.setQualifiedName(qualifiedName);

        EnumPropertyValue GovernanceDomainEnumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        GovernanceDomainEnumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", GovernanceDomainEnumPropertyValue);

        requestedGovernanceProcess.setDomain(GovernanceDomain.values()[0]);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedGovernanceProcess.setAdditionalProperties(mapValue);
        GovernanceProcess returnedGovernanceProcess = subjectAreaBeansToAccessOMRS.createGovernanceProcess(testuserid, requestedGovernanceProcess);
        assertEquals(requestedGovernanceProcess.getImplementationDescription(),returnedGovernanceProcess.getImplementationDescription());

        assertEquals(requestedGovernanceProcess.getTitle(),returnedGovernanceProcess.getTitle());

        assertEquals(requestedGovernanceProcess.getSummary(),returnedGovernanceProcess.getSummary());

        assertEquals(requestedGovernanceProcess.getDescription(),returnedGovernanceProcess.getDescription());

        assertEquals(requestedGovernanceProcess.getScope(),returnedGovernanceProcess.getScope());

        assertEquals(requestedGovernanceProcess.getPriority(),returnedGovernanceProcess.getPriority());

        assertEquals(requestedGovernanceProcess.getQualifiedName(),returnedGovernanceProcess.getQualifiedName());

        assertEquals(requestedGovernanceProcess.getDomain(),returnedGovernanceProcess.getDomain());

        assertEquals(requestedGovernanceProcess.getAdditionalProperties(),returnedGovernanceProcess.getAdditionalProperties());

    }    
    @Test
    public void testGetGovernanceProcessById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-GovernanceProcess-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String implementationDescription = "string0";
        primitivePropertyValue.setPrimitiveValue(implementationDescription);
        instanceProperties.setProperty("implementationDescription", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String title = "string1";
        primitivePropertyValue.setPrimitiveValue(title);
        instanceProperties.setProperty("title", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String summary = "string2";
        primitivePropertyValue.setPrimitiveValue(summary);
        instanceProperties.setProperty("summary", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string3";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String scope = "string4";
        primitivePropertyValue.setPrimitiveValue(scope);
        instanceProperties.setProperty("scope", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String priority = "string5";
        primitivePropertyValue.setPrimitiveValue(priority);
        instanceProperties.setProperty("priority", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string9";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
        instanceProperties.setProperty("domain", enumPropertyValue);

        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GovernanceProcess");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GovernanceProcess governanceProcessEntity = subjectAreaBeansToAccessOMRS.getGovernanceProcessById(testuserid, testguid1);
        assertEquals(governanceProcessEntity.getImplementationDescription(),implementationDescription);
        assertEquals(governanceProcessEntity.getTitle(),title);
        assertEquals(governanceProcessEntity.getSummary(),summary);
        assertEquals(governanceProcessEntity.getDescription(),description);
        assertEquals(governanceProcessEntity.getScope(),scope);
        assertEquals(governanceProcessEntity.getPriority(),priority);
        assertEquals(governanceProcessEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateGovernanceProcess() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGovernanceProcess";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String implementationDescription = "string0";
            primitivePropertyValue.setPrimitiveValue(implementationDescription);
            instanceProperties.setProperty("implementationDescription", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String title = "string1";
            primitivePropertyValue.setPrimitiveValue(title);
            instanceProperties.setProperty("title", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String summary = "string2";
            primitivePropertyValue.setPrimitiveValue(summary);
            instanceProperties.setProperty("summary", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string3";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String scope = "string4";
            primitivePropertyValue.setPrimitiveValue(scope);
            instanceProperties.setProperty("scope", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String priority = "string5";
            primitivePropertyValue.setPrimitiveValue(priority);
            instanceProperties.setProperty("priority", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string9";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
            instanceProperties.setProperty("domain", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("GovernanceProcess");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceProcess requestedGovernanceProcess = new GovernanceProcess();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedGovernanceProcess.setSystemAttributes(systemAttributes);

            requestedGovernanceProcess.setImplementationDescription(implementationDescription);

            requestedGovernanceProcess.setTitle(title);

            requestedGovernanceProcess.setSummary(summary);

            requestedGovernanceProcess.setDescription(description);

            requestedGovernanceProcess.setScope(scope);

            requestedGovernanceProcess.setPriority(priority);

            requestedGovernanceProcess.setQualifiedName(qualifiedName);

            EnumPropertyValue GovernanceDomainEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            GovernanceDomainEnumPropertyValue.setSymbolicName(GovernanceDomain.values()[0].name());
            instanceProperties.setProperty("domain", GovernanceDomainEnumPropertyValue);

            requestedGovernanceProcess.setDomain(GovernanceDomain.values()[0]);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedGovernanceProcess.setAdditionalProperties(mapValue);
            GovernanceProcess returnedGovernanceProcess = subjectAreaBeansToAccessOMRS.updateGovernanceProcess(testuserid,requestedGovernanceProcess);
            assertEquals(requestedGovernanceProcess.getImplementationDescription(),returnedGovernanceProcess.getImplementationDescription());

            assertEquals(requestedGovernanceProcess.getTitle(),returnedGovernanceProcess.getTitle());

            assertEquals(requestedGovernanceProcess.getSummary(),returnedGovernanceProcess.getSummary());

            assertEquals(requestedGovernanceProcess.getDescription(),returnedGovernanceProcess.getDescription());

            assertEquals(requestedGovernanceProcess.getScope(),returnedGovernanceProcess.getScope());

            assertEquals(requestedGovernanceProcess.getPriority(),returnedGovernanceProcess.getPriority());

            assertEquals(requestedGovernanceProcess.getQualifiedName(),returnedGovernanceProcess.getQualifiedName());

            assertEquals(requestedGovernanceProcess.getDomain(),returnedGovernanceProcess.getDomain());

            assertEquals(requestedGovernanceProcess.getAdditionalProperties(),returnedGovernanceProcess.getAdditionalProperties());

        }
@Test
    public void testCreateSchemaAttribute() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateSchemaAttribute";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_INT);
        Integer position = new Integer(1);
        primitivePropertyValue.setPrimitiveValue(position);
        instanceProperties.setProperty("position", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String cardinality = "string2";
        primitivePropertyValue.setPrimitiveValue(cardinality);
        instanceProperties.setProperty("cardinality", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String defaultValueOverride = "string3";
        primitivePropertyValue.setPrimitiveValue(defaultValueOverride);
        instanceProperties.setProperty("defaultValueOverride", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string4";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("SchemaAttribute");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        SchemaAttribute requestedSchemaAttribute = new SchemaAttribute();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedSchemaAttribute.setSystemAttributes(systemAttributes);

        requestedSchemaAttribute.setName(name);

        requestedSchemaAttribute.setPosition(position);

        requestedSchemaAttribute.setCardinality(cardinality);

        requestedSchemaAttribute.setDefaultValueOverride(defaultValueOverride);

        requestedSchemaAttribute.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedSchemaAttribute.setAdditionalProperties(mapValue);
        SchemaAttribute returnedSchemaAttribute = subjectAreaBeansToAccessOMRS.createSchemaAttribute(testuserid, requestedSchemaAttribute);
        assertEquals(requestedSchemaAttribute.getName(),returnedSchemaAttribute.getName());

        assertEquals(requestedSchemaAttribute.getPosition(),returnedSchemaAttribute.getPosition());

        assertEquals(requestedSchemaAttribute.getCardinality(),returnedSchemaAttribute.getCardinality());

        assertEquals(requestedSchemaAttribute.getDefaultValueOverride(),returnedSchemaAttribute.getDefaultValueOverride());

        assertEquals(requestedSchemaAttribute.getQualifiedName(),returnedSchemaAttribute.getQualifiedName());

        assertEquals(requestedSchemaAttribute.getAdditionalProperties(),returnedSchemaAttribute.getAdditionalProperties());

    }    
    @Test
    public void testGetSchemaAttributeById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-SchemaAttribute-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_INT);
        Integer position = new Integer(1);
        primitivePropertyValue.setPrimitiveValue(position);
        instanceProperties.setProperty("position", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String cardinality = "string2";
        primitivePropertyValue.setPrimitiveValue(cardinality);
        instanceProperties.setProperty("cardinality", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String defaultValueOverride = "string3";
        primitivePropertyValue.setPrimitiveValue(defaultValueOverride);
        instanceProperties.setProperty("defaultValueOverride", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string4";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("SchemaAttribute");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        SchemaAttribute schemaAttributeEntity = subjectAreaBeansToAccessOMRS.getSchemaAttributeById(testuserid, testguid1);
        assertEquals(schemaAttributeEntity.getName(),name);
        assertEquals(schemaAttributeEntity.getPosition(),position);
        assertEquals(schemaAttributeEntity.getCardinality(),cardinality);
        assertEquals(schemaAttributeEntity.getDefaultValueOverride(),defaultValueOverride);
        assertEquals(schemaAttributeEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateSchemaAttribute() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateSchemaAttribute";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_INT);
            Integer position = new Integer(1);
            primitivePropertyValue.setPrimitiveValue(position);
            instanceProperties.setProperty("position", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String cardinality = "string2";
            primitivePropertyValue.setPrimitiveValue(cardinality);
            instanceProperties.setProperty("cardinality", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String defaultValueOverride = "string3";
            primitivePropertyValue.setPrimitiveValue(defaultValueOverride);
            instanceProperties.setProperty("defaultValueOverride", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string4";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("SchemaAttribute");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SchemaAttribute requestedSchemaAttribute = new SchemaAttribute();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedSchemaAttribute.setSystemAttributes(systemAttributes);

            requestedSchemaAttribute.setName(name);

            requestedSchemaAttribute.setPosition(position);

            requestedSchemaAttribute.setCardinality(cardinality);

            requestedSchemaAttribute.setDefaultValueOverride(defaultValueOverride);

            requestedSchemaAttribute.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedSchemaAttribute.setAdditionalProperties(mapValue);
            SchemaAttribute returnedSchemaAttribute = subjectAreaBeansToAccessOMRS.updateSchemaAttribute(testuserid,requestedSchemaAttribute);
            assertEquals(requestedSchemaAttribute.getName(),returnedSchemaAttribute.getName());

            assertEquals(requestedSchemaAttribute.getPosition(),returnedSchemaAttribute.getPosition());

            assertEquals(requestedSchemaAttribute.getCardinality(),returnedSchemaAttribute.getCardinality());

            assertEquals(requestedSchemaAttribute.getDefaultValueOverride(),returnedSchemaAttribute.getDefaultValueOverride());

            assertEquals(requestedSchemaAttribute.getQualifiedName(),returnedSchemaAttribute.getQualifiedName());

            assertEquals(requestedSchemaAttribute.getAdditionalProperties(),returnedSchemaAttribute.getAdditionalProperties());

        }
@Test
    public void testCreateGraphEdge() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateGraphEdge";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_INT);
        Integer position = new Integer(1);
        primitivePropertyValue.setPrimitiveValue(position);
        instanceProperties.setProperty("position", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String cardinality = "string2";
        primitivePropertyValue.setPrimitiveValue(cardinality);
        instanceProperties.setProperty("cardinality", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String defaultValueOverride = "string3";
        primitivePropertyValue.setPrimitiveValue(defaultValueOverride);
        instanceProperties.setProperty("defaultValueOverride", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string4";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GraphEdge");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GraphEdge requestedGraphEdge = new GraphEdge();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedGraphEdge.setSystemAttributes(systemAttributes);

        requestedGraphEdge.setName(name);

        requestedGraphEdge.setPosition(position);

        requestedGraphEdge.setCardinality(cardinality);

        requestedGraphEdge.setDefaultValueOverride(defaultValueOverride);

        requestedGraphEdge.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedGraphEdge.setAdditionalProperties(mapValue);
        GraphEdge returnedGraphEdge = subjectAreaBeansToAccessOMRS.createGraphEdge(testuserid, requestedGraphEdge);
        assertEquals(requestedGraphEdge.getName(),returnedGraphEdge.getName());

        assertEquals(requestedGraphEdge.getPosition(),returnedGraphEdge.getPosition());

        assertEquals(requestedGraphEdge.getCardinality(),returnedGraphEdge.getCardinality());

        assertEquals(requestedGraphEdge.getDefaultValueOverride(),returnedGraphEdge.getDefaultValueOverride());

        assertEquals(requestedGraphEdge.getQualifiedName(),returnedGraphEdge.getQualifiedName());

        assertEquals(requestedGraphEdge.getAdditionalProperties(),returnedGraphEdge.getAdditionalProperties());

    }    
    @Test
    public void testGetGraphEdgeById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-GraphEdge-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_INT);
        Integer position = new Integer(1);
        primitivePropertyValue.setPrimitiveValue(position);
        instanceProperties.setProperty("position", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String cardinality = "string2";
        primitivePropertyValue.setPrimitiveValue(cardinality);
        instanceProperties.setProperty("cardinality", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String defaultValueOverride = "string3";
        primitivePropertyValue.setPrimitiveValue(defaultValueOverride);
        instanceProperties.setProperty("defaultValueOverride", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string4";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("GraphEdge");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        GraphEdge graphEdgeEntity = subjectAreaBeansToAccessOMRS.getGraphEdgeById(testuserid, testguid1);
        assertEquals(graphEdgeEntity.getName(),name);
        assertEquals(graphEdgeEntity.getPosition(),position);
        assertEquals(graphEdgeEntity.getCardinality(),cardinality);
        assertEquals(graphEdgeEntity.getDefaultValueOverride(),defaultValueOverride);
        assertEquals(graphEdgeEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateGraphEdge() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGraphEdge";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_INT);
            Integer position = new Integer(1);
            primitivePropertyValue.setPrimitiveValue(position);
            instanceProperties.setProperty("position", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String cardinality = "string2";
            primitivePropertyValue.setPrimitiveValue(cardinality);
            instanceProperties.setProperty("cardinality", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String defaultValueOverride = "string3";
            primitivePropertyValue.setPrimitiveValue(defaultValueOverride);
            instanceProperties.setProperty("defaultValueOverride", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string4";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("GraphEdge");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GraphEdge requestedGraphEdge = new GraphEdge();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedGraphEdge.setSystemAttributes(systemAttributes);

            requestedGraphEdge.setName(name);

            requestedGraphEdge.setPosition(position);

            requestedGraphEdge.setCardinality(cardinality);

            requestedGraphEdge.setDefaultValueOverride(defaultValueOverride);

            requestedGraphEdge.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedGraphEdge.setAdditionalProperties(mapValue);
            GraphEdge returnedGraphEdge = subjectAreaBeansToAccessOMRS.updateGraphEdge(testuserid,requestedGraphEdge);
            assertEquals(requestedGraphEdge.getName(),returnedGraphEdge.getName());

            assertEquals(requestedGraphEdge.getPosition(),returnedGraphEdge.getPosition());

            assertEquals(requestedGraphEdge.getCardinality(),returnedGraphEdge.getCardinality());

            assertEquals(requestedGraphEdge.getDefaultValueOverride(),returnedGraphEdge.getDefaultValueOverride());

            assertEquals(requestedGraphEdge.getQualifiedName(),returnedGraphEdge.getQualifiedName());

            assertEquals(requestedGraphEdge.getAdditionalProperties(),returnedGraphEdge.getAdditionalProperties());

        }
@Test
    public void testCreateCommunity() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateCommunity";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String mission = "string2";
        primitivePropertyValue.setPrimitiveValue(mission);
        instanceProperties.setProperty("mission", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Community");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Community requestedCommunity = new Community();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedCommunity.setSystemAttributes(systemAttributes);

        requestedCommunity.setName(name);

        requestedCommunity.setDescription(description);

        requestedCommunity.setMission(mission);

        requestedCommunity.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedCommunity.setAdditionalProperties(mapValue);
        Community returnedCommunity = subjectAreaBeansToAccessOMRS.createCommunity(testuserid, requestedCommunity);
        assertEquals(requestedCommunity.getName(),returnedCommunity.getName());

        assertEquals(requestedCommunity.getDescription(),returnedCommunity.getDescription());

        assertEquals(requestedCommunity.getMission(),returnedCommunity.getMission());

        assertEquals(requestedCommunity.getQualifiedName(),returnedCommunity.getQualifiedName());

        assertEquals(requestedCommunity.getAdditionalProperties(),returnedCommunity.getAdditionalProperties());

    }    
    @Test
    public void testGetCommunityById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-Community-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String name = "string0";
        primitivePropertyValue.setPrimitiveValue(name);
        instanceProperties.setProperty("name", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String mission = "string2";
        primitivePropertyValue.setPrimitiveValue(mission);
        instanceProperties.setProperty("mission", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string3";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Community");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Community communityEntity = subjectAreaBeansToAccessOMRS.getCommunityById(testuserid, testguid1);
        assertEquals(communityEntity.getName(),name);
        assertEquals(communityEntity.getDescription(),description);
        assertEquals(communityEntity.getMission(),mission);
        assertEquals(communityEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateCommunity() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateCommunity";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String name = "string0";
            primitivePropertyValue.setPrimitiveValue(name);
            instanceProperties.setProperty("name", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String mission = "string2";
            primitivePropertyValue.setPrimitiveValue(mission);
            instanceProperties.setProperty("mission", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string3";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("Community");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Community requestedCommunity = new Community();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedCommunity.setSystemAttributes(systemAttributes);

            requestedCommunity.setName(name);

            requestedCommunity.setDescription(description);

            requestedCommunity.setMission(mission);

            requestedCommunity.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedCommunity.setAdditionalProperties(mapValue);
            Community returnedCommunity = subjectAreaBeansToAccessOMRS.updateCommunity(testuserid,requestedCommunity);
            assertEquals(requestedCommunity.getName(),returnedCommunity.getName());

            assertEquals(requestedCommunity.getDescription(),returnedCommunity.getDescription());

            assertEquals(requestedCommunity.getMission(),returnedCommunity.getMission());

            assertEquals(requestedCommunity.getQualifiedName(),returnedCommunity.getQualifiedName());

            assertEquals(requestedCommunity.getAdditionalProperties(),returnedCommunity.getAdditionalProperties());

        }
@Test
    public void testCreateLocation() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateLocation";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string2";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Location");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Location requestedLocation = new Location();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedLocation.setSystemAttributes(systemAttributes);

        requestedLocation.setDisplayName(displayName);

        requestedLocation.setDescription(description);

        requestedLocation.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedLocation.setAdditionalProperties(mapValue);
        Location returnedLocation = subjectAreaBeansToAccessOMRS.createLocation(testuserid, requestedLocation);
        assertEquals(requestedLocation.getDisplayName(),returnedLocation.getDisplayName());

        assertEquals(requestedLocation.getDescription(),returnedLocation.getDescription());

        assertEquals(requestedLocation.getQualifiedName(),returnedLocation.getQualifiedName());

        assertEquals(requestedLocation.getAdditionalProperties(),returnedLocation.getAdditionalProperties());

    }    
    @Test
    public void testGetLocationById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-Location-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String displayName = "string0";
        primitivePropertyValue.setPrimitiveValue(displayName);
        instanceProperties.setProperty("displayName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string1";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string2";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("Location");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        Location locationEntity = subjectAreaBeansToAccessOMRS.getLocationById(testuserid, testguid1);
        assertEquals(locationEntity.getDisplayName(),displayName);
        assertEquals(locationEntity.getDescription(),description);
        assertEquals(locationEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateLocation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateLocation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String displayName = "string0";
            primitivePropertyValue.setPrimitiveValue(displayName);
            instanceProperties.setProperty("displayName", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string2";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("Location");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Location requestedLocation = new Location();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedLocation.setSystemAttributes(systemAttributes);

            requestedLocation.setDisplayName(displayName);

            requestedLocation.setDescription(description);

            requestedLocation.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedLocation.setAdditionalProperties(mapValue);
            Location returnedLocation = subjectAreaBeansToAccessOMRS.updateLocation(testuserid,requestedLocation);
            assertEquals(requestedLocation.getDisplayName(),returnedLocation.getDisplayName());

            assertEquals(requestedLocation.getDescription(),returnedLocation.getDescription());

            assertEquals(requestedLocation.getQualifiedName(),returnedLocation.getQualifiedName());

            assertEquals(requestedLocation.getAdditionalProperties(),returnedLocation.getAdditionalProperties());

        }
@Test
    public void testCreateBusinessCapability() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateBusinessCapability";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string0";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string1";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(BusinessCapabilityType.values()[0].name());
        instanceProperties.setProperty("type", enumPropertyValue);

        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("BusinessCapability");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        BusinessCapability requestedBusinessCapability = new BusinessCapability();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedBusinessCapability.setSystemAttributes(systemAttributes);

        requestedBusinessCapability.setDescription(description);

        requestedBusinessCapability.setQualifiedName(qualifiedName);

        EnumPropertyValue BusinessCapabilityTypeEnumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        BusinessCapabilityTypeEnumPropertyValue.setSymbolicName(BusinessCapabilityType.values()[0].name());
        instanceProperties.setProperty("type", BusinessCapabilityTypeEnumPropertyValue);

        requestedBusinessCapability.setType(BusinessCapabilityType.values()[0]);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedBusinessCapability.setAdditionalProperties(mapValue);
        BusinessCapability returnedBusinessCapability = subjectAreaBeansToAccessOMRS.createBusinessCapability(testuserid, requestedBusinessCapability);
        assertEquals(requestedBusinessCapability.getDescription(),returnedBusinessCapability.getDescription());

        assertEquals(requestedBusinessCapability.getQualifiedName(),returnedBusinessCapability.getQualifiedName());

        assertEquals(requestedBusinessCapability.getType(),returnedBusinessCapability.getType());

        assertEquals(requestedBusinessCapability.getAdditionalProperties(),returnedBusinessCapability.getAdditionalProperties());

    }    
    @Test
    public void testGetBusinessCapabilityById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-BusinessCapability-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String description = "string0";
        primitivePropertyValue.setPrimitiveValue(description);
        instanceProperties.setProperty("description", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string1";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        enumPropertyValue = new EnumPropertyValue();
        // get the name of the first enumeration value as a sample data.
        enumPropertyValue.setSymbolicName(BusinessCapabilityType.values()[0].name());
        instanceProperties.setProperty("type", enumPropertyValue);

        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("BusinessCapability");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        BusinessCapability businessCapabilityEntity = subjectAreaBeansToAccessOMRS.getBusinessCapabilityById(testuserid, testguid1);
        assertEquals(businessCapabilityEntity.getDescription(),description);
        assertEquals(businessCapabilityEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateBusinessCapability() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateBusinessCapability";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string1";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(BusinessCapabilityType.values()[0].name());
            instanceProperties.setProperty("type", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("BusinessCapability");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            BusinessCapability requestedBusinessCapability = new BusinessCapability();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedBusinessCapability.setSystemAttributes(systemAttributes);

            requestedBusinessCapability.setDescription(description);

            requestedBusinessCapability.setQualifiedName(qualifiedName);

            EnumPropertyValue BusinessCapabilityTypeEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            BusinessCapabilityTypeEnumPropertyValue.setSymbolicName(BusinessCapabilityType.values()[0].name());
            instanceProperties.setProperty("type", BusinessCapabilityTypeEnumPropertyValue);

            requestedBusinessCapability.setType(BusinessCapabilityType.values()[0]);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedBusinessCapability.setAdditionalProperties(mapValue);
            BusinessCapability returnedBusinessCapability = subjectAreaBeansToAccessOMRS.updateBusinessCapability(testuserid,requestedBusinessCapability);
            assertEquals(requestedBusinessCapability.getDescription(),returnedBusinessCapability.getDescription());

            assertEquals(requestedBusinessCapability.getQualifiedName(),returnedBusinessCapability.getQualifiedName());

            assertEquals(requestedBusinessCapability.getType(),returnedBusinessCapability.getType());

            assertEquals(requestedBusinessCapability.getAdditionalProperties(),returnedBusinessCapability.getAdditionalProperties());

        }
@Test
    public void testCreateSchemaLinkElement() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcreateSchemaLinkElement";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();
        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        ArrayPropertyValue arrayPropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String linkName = "string0";
        primitivePropertyValue.setPrimitiveValue(linkName);
        instanceProperties.setProperty("linkName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string1";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.
        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues =null;

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("linkProperties", mapPropertyValue);

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("additionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("SchemaLinkElement");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSAddEntity(anyString(),any())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        SchemaLinkElement requestedSchemaLinkElement = new SchemaLinkElement();
        SystemAttributes systemAttributes = new SystemAttributes();
        systemAttributes.setGUID(testguid1);
        requestedSchemaLinkElement.setSystemAttributes(systemAttributes);

        requestedSchemaLinkElement.setLinkName(linkName);

        requestedSchemaLinkElement.setQualifiedName(qualifiedName);

        Map<String,String>  mapValue=null;

        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedSchemaLinkElement.setLinkProperties(mapValue);
        mapValue = new HashMap<>();
        mapValue.put("a_new_property_name","test string value for map");
        requestedSchemaLinkElement.setAdditionalProperties(mapValue);
        SchemaLinkElement returnedSchemaLinkElement = subjectAreaBeansToAccessOMRS.createSchemaLinkElement(testuserid, requestedSchemaLinkElement);
        assertEquals(requestedSchemaLinkElement.getLinkName(),returnedSchemaLinkElement.getLinkName());

        assertEquals(requestedSchemaLinkElement.getQualifiedName(),returnedSchemaLinkElement.getQualifiedName());

        assertEquals(requestedSchemaLinkElement.getLinkProperties(),returnedSchemaLinkElement.getLinkProperties());

        assertEquals(requestedSchemaLinkElement.getAdditionalProperties(),returnedSchemaLinkElement.getAdditionalProperties());

    }    
    @Test
    public void testGetSchemaLinkElementById() throws Exception {
        String testuserid = "userid1";
        String testguid1 = "testcallOMRSGetEntityByGuid-SchemaLinkElement-guid";
        SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

        EntityDetail mockEntity = new EntityDetail();

        InstanceProperties instanceProperties = new InstanceProperties();

        PrimitivePropertyValue primitivePropertyValue;
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String linkName = "string0";
        primitivePropertyValue.setPrimitiveValue(linkName);
        instanceProperties.setProperty("linkName", primitivePropertyValue);
        primitivePropertyValue = new PrimitivePropertyValue();
        primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        String qualifiedName = "string1";
        primitivePropertyValue.setPrimitiveValue(qualifiedName);
        instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
        EnumPropertyValue enumPropertyValue;
        MapPropertyValue mapPropertyValue =null;
        // In the models we are generating from we only have map<String,String> types, this code assumes those types.

        PrimitivePropertyValue primitivePropertyValueForMap=null;
        InstanceProperties mapValues=null;
        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("LinkProperties", mapPropertyValue);

        mapPropertyValue = new MapPropertyValue();
        primitivePropertyValueForMap = new PrimitivePropertyValue();
        primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
        primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

        mapValues = new InstanceProperties();
        mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
        mapPropertyValue.setMapValues(mapValues);
        instanceProperties.setProperty("AdditionalProperties", mapPropertyValue);

        mockEntity.setProperties(instanceProperties);
        mockEntity.setGUID(testguid1);
        mockEntity.setVersion(1L);
        InstanceType typeOfEntity = new InstanceType();
        typeOfEntity.setTypeDefName("SchemaLinkElement");
        mockEntity.setType(typeOfEntity);

        when( oMRSAPIHelper.callOMRSGetEntityByGuid(anyString(),anyString())).thenReturn(mockEntity);
        // set the mock omrs in to the rest file.
        subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
        SchemaLinkElement schemaLinkElementEntity = subjectAreaBeansToAccessOMRS.getSchemaLinkElementById(testuserid, testguid1);
        assertEquals(schemaLinkElementEntity.getLinkName(),linkName);
        assertEquals(schemaLinkElementEntity.getQualifiedName(),qualifiedName);
    }
    @Test
        public void testUpdateSchemaLinkElement() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateSchemaLinkElement";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            EntityDetail mockEntity = new EntityDetail();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String linkName = "string0";
            primitivePropertyValue.setPrimitiveValue(linkName);
            instanceProperties.setProperty("linkName", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String qualifiedName = "string1";
            primitivePropertyValue.setPrimitiveValue(qualifiedName);
            instanceProperties.setProperty("qualifiedName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            PrimitivePropertyValue primitivePropertyValueForMap=null;
            InstanceProperties mapValues =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("linkProperties", mapPropertyValue);

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("additionalProperties", mapPropertyValue);

            mockEntity.setProperties(instanceProperties);
            mockEntity.setGUID(testguid1);
            mockEntity.setVersion(1L);
            InstanceType typeOfEntity = new InstanceType();
            typeOfEntity.setTypeDefName("SchemaLinkElement");
            mockEntity.setType(typeOfEntity);

            when( oMRSAPIHelper.callOMRSUpdateEntity(anyString(),any())).thenReturn(mockEntity);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SchemaLinkElement requestedSchemaLinkElement = new SchemaLinkElement();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setGUID(testguid1);
            requestedSchemaLinkElement.setSystemAttributes(systemAttributes);

            requestedSchemaLinkElement.setLinkName(linkName);

            requestedSchemaLinkElement.setQualifiedName(qualifiedName);


            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue=null;
            Map<String,String>  mapValue=null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedSchemaLinkElement.setLinkProperties(mapValue);
            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            mapValue = new HashMap<>();
            mapValue.put("a_new_property_name","test string value for map");
            requestedSchemaLinkElement.setAdditionalProperties(mapValue);
            SchemaLinkElement returnedSchemaLinkElement = subjectAreaBeansToAccessOMRS.updateSchemaLinkElement(testuserid,requestedSchemaLinkElement);
            assertEquals(requestedSchemaLinkElement.getLinkName(),returnedSchemaLinkElement.getLinkName());

            assertEquals(requestedSchemaLinkElement.getQualifiedName(),returnedSchemaLinkElement.getQualifiedName());

            assertEquals(requestedSchemaLinkElement.getLinkProperties(),returnedSchemaLinkElement.getLinkProperties());

            assertEquals(requestedSchemaLinkElement.getAdditionalProperties(),returnedSchemaLinkElement.getAdditionalProperties());

        }


    @Test
        public void testCreateUsedInContext() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateUsedInContext";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("UsedInContext");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ContextRelevantTerms");
            mockRelationship.setEntityTwoPropertyName("UsedInContexts");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            UsedInContext requestedUsedInContext = new UsedInContext();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedUsedInContext.setSystemAttributes(systemAttributes);

            requestedUsedInContext.setDescription(description);

            requestedUsedInContext.setExpression(expression);

            requestedUsedInContext.setSteward(steward);

            requestedUsedInContext.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedUsedInContext.setStatus(TermRelationshipStatus.values()[0]);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            UsedInContext returnedUsedInContext = subjectAreaBeansToAccessOMRS.createUsedInContextRelationship(testuserid, requestedUsedInContext);
            assertEquals(requestedUsedInContext.getDescription(),returnedUsedInContext.getDescription());

            assertEquals(requestedUsedInContext.getExpression(),returnedUsedInContext.getExpression());

            assertEquals(requestedUsedInContext.getSteward(),returnedUsedInContext.getSteward());

            assertEquals(requestedUsedInContext.getSource(),returnedUsedInContext.getSource());

            assertEquals(requestedUsedInContext.getStatus(),returnedUsedInContext.getStatus());

        }

        @Test
        public void testGetUsedInContext() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetUsedInContext";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("UsedInContext");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ContextRelevantTerms");
            mockRelationship.setEntityTwoPropertyName("UsedInContexts");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            UsedInContext requestedUsedInContext = new UsedInContext();

            requestedUsedInContext.setDescription(description);

            requestedUsedInContext.setExpression(expression);

            requestedUsedInContext.setSteward(steward);

            requestedUsedInContext.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedUsedInContext.setStatus(TermRelationshipStatus.values()[0]);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            UsedInContext returnedUsedInContext = subjectAreaBeansToAccessOMRS.getUsedInContextRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedUsedInContext.getDescription(),returnedUsedInContext.getDescription());

            assertEquals(requestedUsedInContext.getExpression(),returnedUsedInContext.getExpression());

            assertEquals(requestedUsedInContext.getSteward(),returnedUsedInContext.getSteward());

            assertEquals(requestedUsedInContext.getSource(),returnedUsedInContext.getSource());

            assertEquals(requestedUsedInContext.getStatus(),returnedUsedInContext.getStatus());

        }
        @Test
        public void testUpdateUsedInContext() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateUsedInContext";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("UsedInContext");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ContextRelevantTerms");
            mockRelationship.setEntityTwoPropertyName("UsedInContexts");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            UsedInContext requestedUsedInContext = new UsedInContext();

            requestedUsedInContext.setDescription(description);

            requestedUsedInContext.setExpression(expression);

            requestedUsedInContext.setSteward(steward);

            requestedUsedInContext.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedUsedInContext.setStatus(TermRelationshipStatus.values()[0]);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedUsedInContext.setSystemAttributes(systemAttributes);


            UsedInContext returnedUsedInContext = subjectAreaBeansToAccessOMRS.updateUsedInContextRelationship(testuserid, requestedUsedInContext);
            assertEquals(requestedUsedInContext.getDescription(),returnedUsedInContext.getDescription());

            assertEquals(requestedUsedInContext.getExpression(),returnedUsedInContext.getExpression());

            assertEquals(requestedUsedInContext.getSteward(),returnedUsedInContext.getSteward());

            assertEquals(requestedUsedInContext.getSource(),returnedUsedInContext.getSource());

            assertEquals(requestedUsedInContext.getStatus(),returnedUsedInContext.getStatus());

        }

    @Test
        public void testCreateLeadership() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateLeadership";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("Leadership");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Leads");
            mockRelationship.setEntityTwoPropertyName("Follows");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("ActorProfile");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ActorProfile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Leadership requestedLeadership = new Leadership();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedLeadership.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            Leadership returnedLeadership = subjectAreaBeansToAccessOMRS.createLeadershipRelationship(testuserid, requestedLeadership);
        }

        @Test
        public void testGetLeadership() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetLeadership";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("Leadership");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Leads");
            mockRelationship.setEntityTwoPropertyName("Follows");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("ActorProfile");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ActorProfile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Leadership requestedLeadership = new Leadership();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            Leadership returnedLeadership = subjectAreaBeansToAccessOMRS.getLeadershipRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateLeadership() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateLeadership";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("Leadership");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Leads");
            mockRelationship.setEntityTwoPropertyName("Follows");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("ActorProfile");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ActorProfile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Leadership requestedLeadership = new Leadership();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedLeadership.setSystemAttributes(systemAttributes);


            Leadership returnedLeadership = subjectAreaBeansToAccessOMRS.updateLeadershipRelationship(testuserid, requestedLeadership);
        }

    @Test
        public void testCreateAttachedComment() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateAttachedComment";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AttachedComment");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("CommentOnElement");
            mockRelationship.setEntityTwoPropertyName("Comments");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Comment");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AttachedComment requestedAttachedComment = new AttachedComment();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAttachedComment.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            AttachedComment returnedAttachedComment = subjectAreaBeansToAccessOMRS.createAttachedCommentRelationship(testuserid, requestedAttachedComment);
        }

        @Test
        public void testGetAttachedComment() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetAttachedComment";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AttachedComment");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("CommentOnElement");
            mockRelationship.setEntityTwoPropertyName("Comments");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Comment");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AttachedComment requestedAttachedComment = new AttachedComment();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            AttachedComment returnedAttachedComment = subjectAreaBeansToAccessOMRS.getAttachedCommentRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateAttachedComment() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateAttachedComment";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AttachedComment");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("CommentOnElement");
            mockRelationship.setEntityTwoPropertyName("Comments");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Comment");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AttachedComment requestedAttachedComment = new AttachedComment();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAttachedComment.setSystemAttributes(systemAttributes);


            AttachedComment returnedAttachedComment = subjectAreaBeansToAccessOMRS.updateAttachedCommentRelationship(testuserid, requestedAttachedComment);
        }

    @Test
        public void testCreateContactThrough() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateContactThrough";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String contactMethodValue = "string0";
            primitivePropertyValue.setPrimitiveValue(contactMethodValue);
            instanceProperties.setProperty("contactMethodValue", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(ContactMethodType.values()[0].name());
            instanceProperties.setProperty("contactMethodType", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ContactThrough");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ContactDetails");
            mockRelationship.setEntityTwoPropertyName("Contacts");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("ActorProfile");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ContactDetails");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ContactThrough requestedContactThrough = new ContactThrough();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedContactThrough.setSystemAttributes(systemAttributes);

            requestedContactThrough.setContactMethodValue(contactMethodValue);

            EnumPropertyValue ContactMethodTypeEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            ContactMethodTypeEnumPropertyValue.setSymbolicName(ContactMethodType.values()[0].name());
            instanceProperties.setProperty("contactMethodType", ContactMethodTypeEnumPropertyValue);

            requestedContactThrough.setContactMethodType(ContactMethodType.values()[0]);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ContactThrough returnedContactThrough = subjectAreaBeansToAccessOMRS.createContactThroughRelationship(testuserid, requestedContactThrough);
            assertEquals(requestedContactThrough.getContactMethodValue(),returnedContactThrough.getContactMethodValue());

            assertEquals(requestedContactThrough.getContactMethodType(),returnedContactThrough.getContactMethodType());

        }

        @Test
        public void testGetContactThrough() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetContactThrough";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String contactMethodValue = "string0";
            primitivePropertyValue.setPrimitiveValue(contactMethodValue);
            instanceProperties.setProperty("contactMethodValue", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(ContactMethodType.values()[0].name());
            instanceProperties.setProperty("contactMethodType", enumPropertyValue);

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ContactThrough");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ContactDetails");
            mockRelationship.setEntityTwoPropertyName("Contacts");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("ActorProfile");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ContactDetails");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ContactThrough requestedContactThrough = new ContactThrough();

            requestedContactThrough.setContactMethodValue(contactMethodValue);

            EnumPropertyValue ContactMethodTypeEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            ContactMethodTypeEnumPropertyValue.setSymbolicName(ContactMethodType.values()[0].name());
            instanceProperties.setProperty("contactMethodType", ContactMethodTypeEnumPropertyValue);

            requestedContactThrough.setContactMethodType(ContactMethodType.values()[0]);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ContactThrough returnedContactThrough = subjectAreaBeansToAccessOMRS.getContactThroughRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedContactThrough.getContactMethodValue(),returnedContactThrough.getContactMethodValue());

            assertEquals(requestedContactThrough.getContactMethodType(),returnedContactThrough.getContactMethodType());

        }
        @Test
        public void testUpdateContactThrough() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateContactThrough";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String contactMethodValue = "string0";
            primitivePropertyValue.setPrimitiveValue(contactMethodValue);
            instanceProperties.setProperty("contactMethodValue", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(ContactMethodType.values()[0].name());
            instanceProperties.setProperty("contactMethodType", enumPropertyValue);

            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ContactThrough");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ContactDetails");
            mockRelationship.setEntityTwoPropertyName("Contacts");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("ActorProfile");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ContactDetails");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ContactThrough requestedContactThrough = new ContactThrough();

            requestedContactThrough.setContactMethodValue(contactMethodValue);

            EnumPropertyValue ContactMethodTypeEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            ContactMethodTypeEnumPropertyValue.setSymbolicName(ContactMethodType.values()[0].name());
            instanceProperties.setProperty("contactMethodType", ContactMethodTypeEnumPropertyValue);

            requestedContactThrough.setContactMethodType(ContactMethodType.values()[0]);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedContactThrough.setSystemAttributes(systemAttributes);


            ContactThrough returnedContactThrough = subjectAreaBeansToAccessOMRS.updateContactThroughRelationship(testuserid, requestedContactThrough);
            assertEquals(requestedContactThrough.getContactMethodValue(),returnedContactThrough.getContactMethodValue());

            assertEquals(requestedContactThrough.getContactMethodType(),returnedContactThrough.getContactMethodType());

        }

    @Test
        public void testCreateLicense() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateLicense";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String licenseGUID = "string0";
            primitivePropertyValue.setPrimitiveValue(licenseGUID);
            instanceProperties.setProperty("licenseGUID", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date start = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(start);
            instanceProperties.setProperty("start", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date end = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(end);
            instanceProperties.setProperty("end", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String conditions = "string3";
            primitivePropertyValue.setPrimitiveValue(conditions);
            instanceProperties.setProperty("conditions", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String licensedBy = "string4";
            primitivePropertyValue.setPrimitiveValue(licensedBy);
            instanceProperties.setProperty("licensedBy", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String custodian = "string5";
            primitivePropertyValue.setPrimitiveValue(custodian);
            instanceProperties.setProperty("custodian", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String licensee = "string6";
            primitivePropertyValue.setPrimitiveValue(licensee);
            instanceProperties.setProperty("licensee", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String notes = "string7";
            primitivePropertyValue.setPrimitiveValue(notes);
            instanceProperties.setProperty("notes", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("License");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Licensed");
            mockRelationship.setEntityTwoPropertyName("Licenses");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("LicenseType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            License requestedLicense = new License();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedLicense.setSystemAttributes(systemAttributes);

            requestedLicense.setLicenseGUID(licenseGUID);

            requestedLicense.setStart(start);

            requestedLicense.setEnd(end);

            requestedLicense.setConditions(conditions);

            requestedLicense.setLicensedBy(licensedBy);

            requestedLicense.setCustodian(custodian);

            requestedLicense.setLicensee(licensee);

            requestedLicense.setNotes(notes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            License returnedLicense = subjectAreaBeansToAccessOMRS.createLicenseRelationship(testuserid, requestedLicense);
            assertEquals(requestedLicense.getLicenseGUID(),returnedLicense.getLicenseGUID());

            assertEquals(requestedLicense.getStart(),returnedLicense.getStart());

            assertEquals(requestedLicense.getEnd(),returnedLicense.getEnd());

            assertEquals(requestedLicense.getConditions(),returnedLicense.getConditions());

            assertEquals(requestedLicense.getLicensedBy(),returnedLicense.getLicensedBy());

            assertEquals(requestedLicense.getCustodian(),returnedLicense.getCustodian());

            assertEquals(requestedLicense.getLicensee(),returnedLicense.getLicensee());

            assertEquals(requestedLicense.getNotes(),returnedLicense.getNotes());

        }

        @Test
        public void testGetLicense() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetLicense";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String licenseGUID = "string0";
            primitivePropertyValue.setPrimitiveValue(licenseGUID);
            instanceProperties.setProperty("licenseGUID", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date start = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(start);
            instanceProperties.setProperty("start", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date end = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(end);
            instanceProperties.setProperty("end", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String conditions = "string3";
            primitivePropertyValue.setPrimitiveValue(conditions);
            instanceProperties.setProperty("conditions", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String licensedBy = "string4";
            primitivePropertyValue.setPrimitiveValue(licensedBy);
            instanceProperties.setProperty("licensedBy", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String custodian = "string5";
            primitivePropertyValue.setPrimitiveValue(custodian);
            instanceProperties.setProperty("custodian", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String licensee = "string6";
            primitivePropertyValue.setPrimitiveValue(licensee);
            instanceProperties.setProperty("licensee", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String notes = "string7";
            primitivePropertyValue.setPrimitiveValue(notes);
            instanceProperties.setProperty("notes", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("License");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Licensed");
            mockRelationship.setEntityTwoPropertyName("Licenses");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("LicenseType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            License requestedLicense = new License();

            requestedLicense.setLicenseGUID(licenseGUID);

            requestedLicense.setStart(start);

            requestedLicense.setEnd(end);

            requestedLicense.setConditions(conditions);

            requestedLicense.setLicensedBy(licensedBy);

            requestedLicense.setCustodian(custodian);

            requestedLicense.setLicensee(licensee);

            requestedLicense.setNotes(notes);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            License returnedLicense = subjectAreaBeansToAccessOMRS.getLicenseRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedLicense.getLicenseGUID(),returnedLicense.getLicenseGUID());

            assertEquals(requestedLicense.getStart(),returnedLicense.getStart());

            assertEquals(requestedLicense.getEnd(),returnedLicense.getEnd());

            assertEquals(requestedLicense.getConditions(),returnedLicense.getConditions());

            assertEquals(requestedLicense.getLicensedBy(),returnedLicense.getLicensedBy());

            assertEquals(requestedLicense.getCustodian(),returnedLicense.getCustodian());

            assertEquals(requestedLicense.getLicensee(),returnedLicense.getLicensee());

            assertEquals(requestedLicense.getNotes(),returnedLicense.getNotes());

        }
        @Test
        public void testUpdateLicense() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateLicense";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String licenseGUID = "string0";
            primitivePropertyValue.setPrimitiveValue(licenseGUID);
            instanceProperties.setProperty("licenseGUID", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date start = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(start);
            instanceProperties.setProperty("start", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date end = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(end);
            instanceProperties.setProperty("end", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String conditions = "string3";
            primitivePropertyValue.setPrimitiveValue(conditions);
            instanceProperties.setProperty("conditions", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String licensedBy = "string4";
            primitivePropertyValue.setPrimitiveValue(licensedBy);
            instanceProperties.setProperty("licensedBy", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String custodian = "string5";
            primitivePropertyValue.setPrimitiveValue(custodian);
            instanceProperties.setProperty("custodian", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String licensee = "string6";
            primitivePropertyValue.setPrimitiveValue(licensee);
            instanceProperties.setProperty("licensee", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String notes = "string7";
            primitivePropertyValue.setPrimitiveValue(notes);
            instanceProperties.setProperty("notes", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("License");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Licensed");
            mockRelationship.setEntityTwoPropertyName("Licenses");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("LicenseType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            License requestedLicense = new License();

            requestedLicense.setLicenseGUID(licenseGUID);

            requestedLicense.setStart(start);

            requestedLicense.setEnd(end);

            requestedLicense.setConditions(conditions);

            requestedLicense.setLicensedBy(licensedBy);

            requestedLicense.setCustodian(custodian);

            requestedLicense.setLicensee(licensee);

            requestedLicense.setNotes(notes);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedLicense.setSystemAttributes(systemAttributes);


            License returnedLicense = subjectAreaBeansToAccessOMRS.updateLicenseRelationship(testuserid, requestedLicense);
            assertEquals(requestedLicense.getLicenseGUID(),returnedLicense.getLicenseGUID());

            assertEquals(requestedLicense.getStart(),returnedLicense.getStart());

            assertEquals(requestedLicense.getEnd(),returnedLicense.getEnd());

            assertEquals(requestedLicense.getConditions(),returnedLicense.getConditions());

            assertEquals(requestedLicense.getLicensedBy(),returnedLicense.getLicensedBy());

            assertEquals(requestedLicense.getCustodian(),returnedLicense.getCustodian());

            assertEquals(requestedLicense.getLicensee(),returnedLicense.getLicensee());

            assertEquals(requestedLicense.getNotes(),returnedLicense.getNotes());

        }

    @Test
        public void testCreateZoneGovernance() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateZoneGovernance";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ZoneGovernance");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("GovernedZones");
            mockRelationship.setEntityTwoPropertyName("GovernedBy");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceZone");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GovernanceDefinition");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ZoneGovernance requestedZoneGovernance = new ZoneGovernance();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedZoneGovernance.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ZoneGovernance returnedZoneGovernance = subjectAreaBeansToAccessOMRS.createZoneGovernanceRelationship(testuserid, requestedZoneGovernance);
        }

        @Test
        public void testGetZoneGovernance() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetZoneGovernance";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ZoneGovernance");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("GovernedZones");
            mockRelationship.setEntityTwoPropertyName("GovernedBy");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceZone");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GovernanceDefinition");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ZoneGovernance requestedZoneGovernance = new ZoneGovernance();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ZoneGovernance returnedZoneGovernance = subjectAreaBeansToAccessOMRS.getZoneGovernanceRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateZoneGovernance() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateZoneGovernance";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ZoneGovernance");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("GovernedZones");
            mockRelationship.setEntityTwoPropertyName("GovernedBy");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceZone");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GovernanceDefinition");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ZoneGovernance requestedZoneGovernance = new ZoneGovernance();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedZoneGovernance.setSystemAttributes(systemAttributes);


            ZoneGovernance returnedZoneGovernance = subjectAreaBeansToAccessOMRS.updateZoneGovernanceRelationship(testuserid, requestedZoneGovernance);
        }

    @Test
        public void testCreateFolderHierarchy() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateFolderHierarchy";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("FolderHierarchy");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ParentFolder");
            mockRelationship.setEntityTwoPropertyName("NestedFolder");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("FileFolder");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("FileFolder");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            FolderHierarchy requestedFolderHierarchy = new FolderHierarchy();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedFolderHierarchy.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            FolderHierarchy returnedFolderHierarchy = subjectAreaBeansToAccessOMRS.createFolderHierarchyRelationship(testuserid, requestedFolderHierarchy);
        }

        @Test
        public void testGetFolderHierarchy() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetFolderHierarchy";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("FolderHierarchy");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ParentFolder");
            mockRelationship.setEntityTwoPropertyName("NestedFolder");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("FileFolder");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("FileFolder");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            FolderHierarchy requestedFolderHierarchy = new FolderHierarchy();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            FolderHierarchy returnedFolderHierarchy = subjectAreaBeansToAccessOMRS.getFolderHierarchyRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateFolderHierarchy() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateFolderHierarchy";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("FolderHierarchy");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ParentFolder");
            mockRelationship.setEntityTwoPropertyName("NestedFolder");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("FileFolder");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("FileFolder");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            FolderHierarchy requestedFolderHierarchy = new FolderHierarchy();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedFolderHierarchy.setSystemAttributes(systemAttributes);


            FolderHierarchy returnedFolderHierarchy = subjectAreaBeansToAccessOMRS.updateFolderHierarchyRelationship(testuserid, requestedFolderHierarchy);
        }

    @Test
        public void testCreateHostClusterMember() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateHostClusterMember";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("HostClusterMember");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("HostCluster");
            mockRelationship.setEntityTwoPropertyName("Hosts");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("HostCluster");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Host");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            HostClusterMember requestedHostClusterMember = new HostClusterMember();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedHostClusterMember.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            HostClusterMember returnedHostClusterMember = subjectAreaBeansToAccessOMRS.createHostClusterMemberRelationship(testuserid, requestedHostClusterMember);
        }

        @Test
        public void testGetHostClusterMember() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetHostClusterMember";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("HostClusterMember");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("HostCluster");
            mockRelationship.setEntityTwoPropertyName("Hosts");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("HostCluster");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Host");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            HostClusterMember requestedHostClusterMember = new HostClusterMember();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            HostClusterMember returnedHostClusterMember = subjectAreaBeansToAccessOMRS.getHostClusterMemberRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateHostClusterMember() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateHostClusterMember";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("HostClusterMember");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("HostCluster");
            mockRelationship.setEntityTwoPropertyName("Hosts");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("HostCluster");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Host");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            HostClusterMember requestedHostClusterMember = new HostClusterMember();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedHostClusterMember.setSystemAttributes(systemAttributes);


            HostClusterMember returnedHostClusterMember = subjectAreaBeansToAccessOMRS.updateHostClusterMemberRelationship(testuserid, requestedHostClusterMember);
        }

    @Test
        public void testCreateLibraryCategoryReference() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateLibraryCategoryReference";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String identifier = "string0";
            primitivePropertyValue.setPrimitiveValue(identifier);
            instanceProperties.setProperty("identifier", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date lastVerified = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(lastVerified);
            instanceProperties.setProperty("lastVerified", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("LibraryCategoryReference");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LocalCategories");
            mockRelationship.setEntityTwoPropertyName("ExternalGlossaryCategories");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryCategory");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ExternalGlossaryLink");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            LibraryCategoryReference requestedLibraryCategoryReference = new LibraryCategoryReference();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedLibraryCategoryReference.setSystemAttributes(systemAttributes);

            requestedLibraryCategoryReference.setIdentifier(identifier);

            requestedLibraryCategoryReference.setDescription(description);

            requestedLibraryCategoryReference.setSteward(steward);

            requestedLibraryCategoryReference.setLastVerified(lastVerified);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            LibraryCategoryReference returnedLibraryCategoryReference = subjectAreaBeansToAccessOMRS.createLibraryCategoryReferenceRelationship(testuserid, requestedLibraryCategoryReference);
            assertEquals(requestedLibraryCategoryReference.getIdentifier(),returnedLibraryCategoryReference.getIdentifier());

            assertEquals(requestedLibraryCategoryReference.getDescription(),returnedLibraryCategoryReference.getDescription());

            assertEquals(requestedLibraryCategoryReference.getSteward(),returnedLibraryCategoryReference.getSteward());

            assertEquals(requestedLibraryCategoryReference.getLastVerified(),returnedLibraryCategoryReference.getLastVerified());

        }

        @Test
        public void testGetLibraryCategoryReference() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetLibraryCategoryReference";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String identifier = "string0";
            primitivePropertyValue.setPrimitiveValue(identifier);
            instanceProperties.setProperty("identifier", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date lastVerified = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(lastVerified);
            instanceProperties.setProperty("lastVerified", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("LibraryCategoryReference");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LocalCategories");
            mockRelationship.setEntityTwoPropertyName("ExternalGlossaryCategories");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryCategory");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ExternalGlossaryLink");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            LibraryCategoryReference requestedLibraryCategoryReference = new LibraryCategoryReference();

            requestedLibraryCategoryReference.setIdentifier(identifier);

            requestedLibraryCategoryReference.setDescription(description);

            requestedLibraryCategoryReference.setSteward(steward);

            requestedLibraryCategoryReference.setLastVerified(lastVerified);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            LibraryCategoryReference returnedLibraryCategoryReference = subjectAreaBeansToAccessOMRS.getLibraryCategoryReferenceRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedLibraryCategoryReference.getIdentifier(),returnedLibraryCategoryReference.getIdentifier());

            assertEquals(requestedLibraryCategoryReference.getDescription(),returnedLibraryCategoryReference.getDescription());

            assertEquals(requestedLibraryCategoryReference.getSteward(),returnedLibraryCategoryReference.getSteward());

            assertEquals(requestedLibraryCategoryReference.getLastVerified(),returnedLibraryCategoryReference.getLastVerified());

        }
        @Test
        public void testUpdateLibraryCategoryReference() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateLibraryCategoryReference";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String identifier = "string0";
            primitivePropertyValue.setPrimitiveValue(identifier);
            instanceProperties.setProperty("identifier", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date lastVerified = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(lastVerified);
            instanceProperties.setProperty("lastVerified", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("LibraryCategoryReference");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LocalCategories");
            mockRelationship.setEntityTwoPropertyName("ExternalGlossaryCategories");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryCategory");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ExternalGlossaryLink");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            LibraryCategoryReference requestedLibraryCategoryReference = new LibraryCategoryReference();

            requestedLibraryCategoryReference.setIdentifier(identifier);

            requestedLibraryCategoryReference.setDescription(description);

            requestedLibraryCategoryReference.setSteward(steward);

            requestedLibraryCategoryReference.setLastVerified(lastVerified);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedLibraryCategoryReference.setSystemAttributes(systemAttributes);


            LibraryCategoryReference returnedLibraryCategoryReference = subjectAreaBeansToAccessOMRS.updateLibraryCategoryReferenceRelationship(testuserid, requestedLibraryCategoryReference);
            assertEquals(requestedLibraryCategoryReference.getIdentifier(),returnedLibraryCategoryReference.getIdentifier());

            assertEquals(requestedLibraryCategoryReference.getDescription(),returnedLibraryCategoryReference.getDescription());

            assertEquals(requestedLibraryCategoryReference.getSteward(),returnedLibraryCategoryReference.getSteward());

            assertEquals(requestedLibraryCategoryReference.getLastVerified(),returnedLibraryCategoryReference.getLastVerified());

        }

    @Test
        public void testCreateProjectCharterLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateProjectCharterLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProjectCharterLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Projects");
            mockRelationship.setEntityTwoPropertyName("Charter");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Project");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ProjectCharter");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProjectCharterLink requestedProjectCharterLink = new ProjectCharterLink();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedProjectCharterLink.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ProjectCharterLink returnedProjectCharterLink = subjectAreaBeansToAccessOMRS.createProjectCharterLinkRelationship(testuserid, requestedProjectCharterLink);
        }

        @Test
        public void testGetProjectCharterLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetProjectCharterLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProjectCharterLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Projects");
            mockRelationship.setEntityTwoPropertyName("Charter");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Project");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ProjectCharter");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProjectCharterLink requestedProjectCharterLink = new ProjectCharterLink();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ProjectCharterLink returnedProjectCharterLink = subjectAreaBeansToAccessOMRS.getProjectCharterLinkRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateProjectCharterLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateProjectCharterLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProjectCharterLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Projects");
            mockRelationship.setEntityTwoPropertyName("Charter");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Project");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ProjectCharter");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProjectCharterLink requestedProjectCharterLink = new ProjectCharterLink();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedProjectCharterLink.setSystemAttributes(systemAttributes);


            ProjectCharterLink returnedProjectCharterLink = subjectAreaBeansToAccessOMRS.updateProjectCharterLinkRelationship(testuserid, requestedProjectCharterLink);
        }

    @Test
        public void testCreateProfileIdentity() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateProfileIdentity";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String userId = "string0";
            primitivePropertyValue.setPrimitiveValue(userId);
            instanceProperties.setProperty("userId", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProfileIdentity");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Profile");
            mockRelationship.setEntityTwoPropertyName("UserIdentities");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("ActorProfile");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("UserIdentity");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProfileIdentity requestedProfileIdentity = new ProfileIdentity();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedProfileIdentity.setSystemAttributes(systemAttributes);

            requestedProfileIdentity.setUserId(userId);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ProfileIdentity returnedProfileIdentity = subjectAreaBeansToAccessOMRS.createProfileIdentityRelationship(testuserid, requestedProfileIdentity);
            assertEquals(requestedProfileIdentity.getUserId(),returnedProfileIdentity.getUserId());

        }

        @Test
        public void testGetProfileIdentity() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetProfileIdentity";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String userId = "string0";
            primitivePropertyValue.setPrimitiveValue(userId);
            instanceProperties.setProperty("userId", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProfileIdentity");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Profile");
            mockRelationship.setEntityTwoPropertyName("UserIdentities");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("ActorProfile");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("UserIdentity");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProfileIdentity requestedProfileIdentity = new ProfileIdentity();

            requestedProfileIdentity.setUserId(userId);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ProfileIdentity returnedProfileIdentity = subjectAreaBeansToAccessOMRS.getProfileIdentityRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedProfileIdentity.getUserId(),returnedProfileIdentity.getUserId());

        }
        @Test
        public void testUpdateProfileIdentity() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateProfileIdentity";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String userId = "string0";
            primitivePropertyValue.setPrimitiveValue(userId);
            instanceProperties.setProperty("userId", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProfileIdentity");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Profile");
            mockRelationship.setEntityTwoPropertyName("UserIdentities");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("ActorProfile");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("UserIdentity");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProfileIdentity requestedProfileIdentity = new ProfileIdentity();

            requestedProfileIdentity.setUserId(userId);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedProfileIdentity.setSystemAttributes(systemAttributes);


            ProfileIdentity returnedProfileIdentity = subjectAreaBeansToAccessOMRS.updateProfileIdentityRelationship(testuserid, requestedProfileIdentity);
            assertEquals(requestedProfileIdentity.getUserId(),returnedProfileIdentity.getUserId());

        }

    @Test
        public void testCreateToDoSource() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateToDoSource";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ToDoSource");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ActionSource");
            mockRelationship.setEntityTwoPropertyName("Actions");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ToDo");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ToDoSource requestedToDoSource = new ToDoSource();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedToDoSource.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ToDoSource returnedToDoSource = subjectAreaBeansToAccessOMRS.createToDoSourceRelationship(testuserid, requestedToDoSource);
        }

        @Test
        public void testGetToDoSource() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetToDoSource";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ToDoSource");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ActionSource");
            mockRelationship.setEntityTwoPropertyName("Actions");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ToDo");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ToDoSource requestedToDoSource = new ToDoSource();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ToDoSource returnedToDoSource = subjectAreaBeansToAccessOMRS.getToDoSourceRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateToDoSource() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateToDoSource";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ToDoSource");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ActionSource");
            mockRelationship.setEntityTwoPropertyName("Actions");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ToDo");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ToDoSource requestedToDoSource = new ToDoSource();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedToDoSource.setSystemAttributes(systemAttributes);


            ToDoSource returnedToDoSource = subjectAreaBeansToAccessOMRS.updateToDoSourceRelationship(testuserid, requestedToDoSource);
        }

    @Test
        public void testCreateTranslation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateTranslation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("Translation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Translations");
            mockRelationship.setEntityTwoPropertyName("Translations");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Translation requestedTranslation = new Translation();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedTranslation.setSystemAttributes(systemAttributes);

            requestedTranslation.setDescription(description);

            requestedTranslation.setExpression(expression);

            requestedTranslation.setSteward(steward);

            requestedTranslation.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedTranslation.setStatus(TermRelationshipStatus.values()[0]);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            Translation returnedTranslation = subjectAreaBeansToAccessOMRS.createTranslationRelationship(testuserid, requestedTranslation);
            assertEquals(requestedTranslation.getDescription(),returnedTranslation.getDescription());

            assertEquals(requestedTranslation.getExpression(),returnedTranslation.getExpression());

            assertEquals(requestedTranslation.getSteward(),returnedTranslation.getSteward());

            assertEquals(requestedTranslation.getSource(),returnedTranslation.getSource());

            assertEquals(requestedTranslation.getStatus(),returnedTranslation.getStatus());

        }

        @Test
        public void testGetTranslation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetTranslation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("Translation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Translations");
            mockRelationship.setEntityTwoPropertyName("Translations");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Translation requestedTranslation = new Translation();

            requestedTranslation.setDescription(description);

            requestedTranslation.setExpression(expression);

            requestedTranslation.setSteward(steward);

            requestedTranslation.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedTranslation.setStatus(TermRelationshipStatus.values()[0]);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            Translation returnedTranslation = subjectAreaBeansToAccessOMRS.getTranslationRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedTranslation.getDescription(),returnedTranslation.getDescription());

            assertEquals(requestedTranslation.getExpression(),returnedTranslation.getExpression());

            assertEquals(requestedTranslation.getSteward(),returnedTranslation.getSteward());

            assertEquals(requestedTranslation.getSource(),returnedTranslation.getSource());

            assertEquals(requestedTranslation.getStatus(),returnedTranslation.getStatus());

        }
        @Test
        public void testUpdateTranslation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateTranslation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("Translation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Translations");
            mockRelationship.setEntityTwoPropertyName("Translations");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Translation requestedTranslation = new Translation();

            requestedTranslation.setDescription(description);

            requestedTranslation.setExpression(expression);

            requestedTranslation.setSteward(steward);

            requestedTranslation.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedTranslation.setStatus(TermRelationshipStatus.values()[0]);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedTranslation.setSystemAttributes(systemAttributes);


            Translation returnedTranslation = subjectAreaBeansToAccessOMRS.updateTranslationRelationship(testuserid, requestedTranslation);
            assertEquals(requestedTranslation.getDescription(),returnedTranslation.getDescription());

            assertEquals(requestedTranslation.getExpression(),returnedTranslation.getExpression());

            assertEquals(requestedTranslation.getSteward(),returnedTranslation.getSteward());

            assertEquals(requestedTranslation.getSource(),returnedTranslation.getSource());

            assertEquals(requestedTranslation.getStatus(),returnedTranslation.getStatus());

        }

    @Test
        public void testCreateSchemaLinkToType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateSchemaLinkToType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("SchemaLinkToType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("UsedIn");
            mockRelationship.setEntityTwoPropertyName("ExternalType");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SchemaAttribute");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaLinkElement");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SchemaLinkToType requestedSchemaLinkToType = new SchemaLinkToType();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedSchemaLinkToType.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            SchemaLinkToType returnedSchemaLinkToType = subjectAreaBeansToAccessOMRS.createSchemaLinkToTypeRelationship(testuserid, requestedSchemaLinkToType);
        }

        @Test
        public void testGetSchemaLinkToType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetSchemaLinkToType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("SchemaLinkToType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("UsedIn");
            mockRelationship.setEntityTwoPropertyName("ExternalType");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SchemaAttribute");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaLinkElement");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SchemaLinkToType requestedSchemaLinkToType = new SchemaLinkToType();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            SchemaLinkToType returnedSchemaLinkToType = subjectAreaBeansToAccessOMRS.getSchemaLinkToTypeRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateSchemaLinkToType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateSchemaLinkToType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("SchemaLinkToType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("UsedIn");
            mockRelationship.setEntityTwoPropertyName("ExternalType");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SchemaAttribute");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaLinkElement");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SchemaLinkToType requestedSchemaLinkToType = new SchemaLinkToType();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedSchemaLinkToType.setSystemAttributes(systemAttributes);


            SchemaLinkToType returnedSchemaLinkToType = subjectAreaBeansToAccessOMRS.updateSchemaLinkToTypeRelationship(testuserid, requestedSchemaLinkToType);
        }

    @Test
        public void testCreateCommunityResources() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateCommunityResources";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("CommunityResources");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("CommunityUses");
            mockRelationship.setEntityTwoPropertyName("SupportingResources");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Community");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Collection");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            CommunityResources requestedCommunityResources = new CommunityResources();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedCommunityResources.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            CommunityResources returnedCommunityResources = subjectAreaBeansToAccessOMRS.createCommunityResourcesRelationship(testuserid, requestedCommunityResources);
        }

        @Test
        public void testGetCommunityResources() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetCommunityResources";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("CommunityResources");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("CommunityUses");
            mockRelationship.setEntityTwoPropertyName("SupportingResources");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Community");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Collection");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            CommunityResources requestedCommunityResources = new CommunityResources();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            CommunityResources returnedCommunityResources = subjectAreaBeansToAccessOMRS.getCommunityResourcesRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateCommunityResources() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateCommunityResources";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("CommunityResources");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("CommunityUses");
            mockRelationship.setEntityTwoPropertyName("SupportingResources");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Community");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Collection");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            CommunityResources requestedCommunityResources = new CommunityResources();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedCommunityResources.setSystemAttributes(systemAttributes);


            CommunityResources returnedCommunityResources = subjectAreaBeansToAccessOMRS.updateCommunityResourcesRelationship(testuserid, requestedCommunityResources);
        }

    @Test
        public void testCreateDataContentForDataSet() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateDataContentForDataSet";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("DataContentForDataSet");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("DataContent");
            mockRelationship.setEntityTwoPropertyName("SupportedDataSets");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Asset");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DataSet");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            DataContentForDataSet requestedDataContentForDataSet = new DataContentForDataSet();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedDataContentForDataSet.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            DataContentForDataSet returnedDataContentForDataSet = subjectAreaBeansToAccessOMRS.createDataContentForDataSetRelationship(testuserid, requestedDataContentForDataSet);
        }

        @Test
        public void testGetDataContentForDataSet() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetDataContentForDataSet";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("DataContentForDataSet");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("DataContent");
            mockRelationship.setEntityTwoPropertyName("SupportedDataSets");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Asset");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DataSet");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            DataContentForDataSet requestedDataContentForDataSet = new DataContentForDataSet();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            DataContentForDataSet returnedDataContentForDataSet = subjectAreaBeansToAccessOMRS.getDataContentForDataSetRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateDataContentForDataSet() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateDataContentForDataSet";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("DataContentForDataSet");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("DataContent");
            mockRelationship.setEntityTwoPropertyName("SupportedDataSets");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Asset");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DataSet");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            DataContentForDataSet requestedDataContentForDataSet = new DataContentForDataSet();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedDataContentForDataSet.setSystemAttributes(systemAttributes);


            DataContentForDataSet returnedDataContentForDataSet = subjectAreaBeansToAccessOMRS.updateDataContentForDataSetRelationship(testuserid, requestedDataContentForDataSet);
        }

    @Test
        public void testCreateServerEndpoint() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateServerEndpoint";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ServerEndpoint");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Servers");
            mockRelationship.setEntityTwoPropertyName("Endpoints");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SoftwareServer");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Endpoint");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ServerEndpoint requestedServerEndpoint = new ServerEndpoint();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedServerEndpoint.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ServerEndpoint returnedServerEndpoint = subjectAreaBeansToAccessOMRS.createServerEndpointRelationship(testuserid, requestedServerEndpoint);
        }

        @Test
        public void testGetServerEndpoint() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetServerEndpoint";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ServerEndpoint");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Servers");
            mockRelationship.setEntityTwoPropertyName("Endpoints");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SoftwareServer");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Endpoint");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ServerEndpoint requestedServerEndpoint = new ServerEndpoint();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ServerEndpoint returnedServerEndpoint = subjectAreaBeansToAccessOMRS.getServerEndpointRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateServerEndpoint() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateServerEndpoint";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ServerEndpoint");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Servers");
            mockRelationship.setEntityTwoPropertyName("Endpoints");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SoftwareServer");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Endpoint");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ServerEndpoint requestedServerEndpoint = new ServerEndpoint();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedServerEndpoint.setSystemAttributes(systemAttributes);


            ServerEndpoint returnedServerEndpoint = subjectAreaBeansToAccessOMRS.updateServerEndpointRelationship(testuserid, requestedServerEndpoint);
        }

    @Test
        public void testCreateExternalIdLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateExternalIdLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String usage = "string1";
            primitivePropertyValue.setPrimitiveValue(usage);
            instanceProperties.setProperty("usage", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string2";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ExternalIdLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Resource");
            mockRelationship.setEntityTwoPropertyName("AlsoKnownAs");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ExternalId");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ExternalIdLink requestedExternalIdLink = new ExternalIdLink();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedExternalIdLink.setSystemAttributes(systemAttributes);

            requestedExternalIdLink.setDescription(description);

            requestedExternalIdLink.setUsage(usage);

            requestedExternalIdLink.setSource(source);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ExternalIdLink returnedExternalIdLink = subjectAreaBeansToAccessOMRS.createExternalIdLinkRelationship(testuserid, requestedExternalIdLink);
            assertEquals(requestedExternalIdLink.getDescription(),returnedExternalIdLink.getDescription());

            assertEquals(requestedExternalIdLink.getUsage(),returnedExternalIdLink.getUsage());

            assertEquals(requestedExternalIdLink.getSource(),returnedExternalIdLink.getSource());

        }

        @Test
        public void testGetExternalIdLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetExternalIdLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String usage = "string1";
            primitivePropertyValue.setPrimitiveValue(usage);
            instanceProperties.setProperty("usage", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string2";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ExternalIdLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Resource");
            mockRelationship.setEntityTwoPropertyName("AlsoKnownAs");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ExternalId");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ExternalIdLink requestedExternalIdLink = new ExternalIdLink();

            requestedExternalIdLink.setDescription(description);

            requestedExternalIdLink.setUsage(usage);

            requestedExternalIdLink.setSource(source);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ExternalIdLink returnedExternalIdLink = subjectAreaBeansToAccessOMRS.getExternalIdLinkRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedExternalIdLink.getDescription(),returnedExternalIdLink.getDescription());

            assertEquals(requestedExternalIdLink.getUsage(),returnedExternalIdLink.getUsage());

            assertEquals(requestedExternalIdLink.getSource(),returnedExternalIdLink.getSource());

        }
        @Test
        public void testUpdateExternalIdLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateExternalIdLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String usage = "string1";
            primitivePropertyValue.setPrimitiveValue(usage);
            instanceProperties.setProperty("usage", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string2";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ExternalIdLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Resource");
            mockRelationship.setEntityTwoPropertyName("AlsoKnownAs");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ExternalId");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ExternalIdLink requestedExternalIdLink = new ExternalIdLink();

            requestedExternalIdLink.setDescription(description);

            requestedExternalIdLink.setUsage(usage);

            requestedExternalIdLink.setSource(source);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedExternalIdLink.setSystemAttributes(systemAttributes);


            ExternalIdLink returnedExternalIdLink = subjectAreaBeansToAccessOMRS.updateExternalIdLinkRelationship(testuserid, requestedExternalIdLink);
            assertEquals(requestedExternalIdLink.getDescription(),returnedExternalIdLink.getDescription());

            assertEquals(requestedExternalIdLink.getUsage(),returnedExternalIdLink.getUsage());

            assertEquals(requestedExternalIdLink.getSource(),returnedExternalIdLink.getSource());

        }

    @Test
        public void testCreateCategoryHierarchyLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateCategoryHierarchyLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("CategoryHierarchyLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("SuperCategory");
            mockRelationship.setEntityTwoPropertyName("Subcategories");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryCategory");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryCategory");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            CategoryHierarchyLink requestedCategoryHierarchyLink = new CategoryHierarchyLink();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedCategoryHierarchyLink.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            CategoryHierarchyLink returnedCategoryHierarchyLink = subjectAreaBeansToAccessOMRS.createCategoryHierarchyLinkRelationship(testuserid, requestedCategoryHierarchyLink);
        }

        @Test
        public void testGetCategoryHierarchyLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetCategoryHierarchyLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("CategoryHierarchyLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("SuperCategory");
            mockRelationship.setEntityTwoPropertyName("Subcategories");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryCategory");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryCategory");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            CategoryHierarchyLink requestedCategoryHierarchyLink = new CategoryHierarchyLink();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            CategoryHierarchyLink returnedCategoryHierarchyLink = subjectAreaBeansToAccessOMRS.getCategoryHierarchyLinkRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateCategoryHierarchyLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateCategoryHierarchyLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("CategoryHierarchyLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("SuperCategory");
            mockRelationship.setEntityTwoPropertyName("Subcategories");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryCategory");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryCategory");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            CategoryHierarchyLink requestedCategoryHierarchyLink = new CategoryHierarchyLink();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedCategoryHierarchyLink.setSystemAttributes(systemAttributes);


            CategoryHierarchyLink returnedCategoryHierarchyLink = subjectAreaBeansToAccessOMRS.updateCategoryHierarchyLinkRelationship(testuserid, requestedCategoryHierarchyLink);
        }

    @Test
        public void testCreatePreferredTerm() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreatePreferredTerm";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("PreferredTerm");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("AlternateTerms");
            mockRelationship.setEntityTwoPropertyName("PreferredTerms");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            PreferredTerm requestedPreferredTerm = new PreferredTerm();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedPreferredTerm.setSystemAttributes(systemAttributes);

            requestedPreferredTerm.setDescription(description);

            requestedPreferredTerm.setExpression(expression);

            requestedPreferredTerm.setSteward(steward);

            requestedPreferredTerm.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedPreferredTerm.setStatus(TermRelationshipStatus.values()[0]);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            PreferredTerm returnedPreferredTerm = subjectAreaBeansToAccessOMRS.createPreferredTermRelationship(testuserid, requestedPreferredTerm);
            assertEquals(requestedPreferredTerm.getDescription(),returnedPreferredTerm.getDescription());

            assertEquals(requestedPreferredTerm.getExpression(),returnedPreferredTerm.getExpression());

            assertEquals(requestedPreferredTerm.getSteward(),returnedPreferredTerm.getSteward());

            assertEquals(requestedPreferredTerm.getSource(),returnedPreferredTerm.getSource());

            assertEquals(requestedPreferredTerm.getStatus(),returnedPreferredTerm.getStatus());

        }

        @Test
        public void testGetPreferredTerm() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetPreferredTerm";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("PreferredTerm");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("AlternateTerms");
            mockRelationship.setEntityTwoPropertyName("PreferredTerms");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            PreferredTerm requestedPreferredTerm = new PreferredTerm();

            requestedPreferredTerm.setDescription(description);

            requestedPreferredTerm.setExpression(expression);

            requestedPreferredTerm.setSteward(steward);

            requestedPreferredTerm.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedPreferredTerm.setStatus(TermRelationshipStatus.values()[0]);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            PreferredTerm returnedPreferredTerm = subjectAreaBeansToAccessOMRS.getPreferredTermRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedPreferredTerm.getDescription(),returnedPreferredTerm.getDescription());

            assertEquals(requestedPreferredTerm.getExpression(),returnedPreferredTerm.getExpression());

            assertEquals(requestedPreferredTerm.getSteward(),returnedPreferredTerm.getSteward());

            assertEquals(requestedPreferredTerm.getSource(),returnedPreferredTerm.getSource());

            assertEquals(requestedPreferredTerm.getStatus(),returnedPreferredTerm.getStatus());

        }
        @Test
        public void testUpdatePreferredTerm() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdatePreferredTerm";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("PreferredTerm");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("AlternateTerms");
            mockRelationship.setEntityTwoPropertyName("PreferredTerms");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            PreferredTerm requestedPreferredTerm = new PreferredTerm();

            requestedPreferredTerm.setDescription(description);

            requestedPreferredTerm.setExpression(expression);

            requestedPreferredTerm.setSteward(steward);

            requestedPreferredTerm.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedPreferredTerm.setStatus(TermRelationshipStatus.values()[0]);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedPreferredTerm.setSystemAttributes(systemAttributes);


            PreferredTerm returnedPreferredTerm = subjectAreaBeansToAccessOMRS.updatePreferredTermRelationship(testuserid, requestedPreferredTerm);
            assertEquals(requestedPreferredTerm.getDescription(),returnedPreferredTerm.getDescription());

            assertEquals(requestedPreferredTerm.getExpression(),returnedPreferredTerm.getExpression());

            assertEquals(requestedPreferredTerm.getSteward(),returnedPreferredTerm.getSteward());

            assertEquals(requestedPreferredTerm.getSource(),returnedPreferredTerm.getSource());

            assertEquals(requestedPreferredTerm.getStatus(),returnedPreferredTerm.getStatus());

        }

    @Test
        public void testCreateProjectHierarchy() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateProjectHierarchy";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProjectHierarchy");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ManagingProject");
            mockRelationship.setEntityTwoPropertyName("ManagedProject");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Project");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Project");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProjectHierarchy requestedProjectHierarchy = new ProjectHierarchy();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedProjectHierarchy.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ProjectHierarchy returnedProjectHierarchy = subjectAreaBeansToAccessOMRS.createProjectHierarchyRelationship(testuserid, requestedProjectHierarchy);
        }

        @Test
        public void testGetProjectHierarchy() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetProjectHierarchy";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProjectHierarchy");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ManagingProject");
            mockRelationship.setEntityTwoPropertyName("ManagedProject");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Project");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Project");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProjectHierarchy requestedProjectHierarchy = new ProjectHierarchy();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ProjectHierarchy returnedProjectHierarchy = subjectAreaBeansToAccessOMRS.getProjectHierarchyRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateProjectHierarchy() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateProjectHierarchy";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProjectHierarchy");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ManagingProject");
            mockRelationship.setEntityTwoPropertyName("ManagedProject");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Project");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Project");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProjectHierarchy requestedProjectHierarchy = new ProjectHierarchy();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedProjectHierarchy.setSystemAttributes(systemAttributes);


            ProjectHierarchy returnedProjectHierarchy = subjectAreaBeansToAccessOMRS.updateProjectHierarchyRelationship(testuserid, requestedProjectHierarchy);
        }

    @Test
        public void testCreateDeployedVirtualContainer() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateDeployedVirtualContainer";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("DeployedVirtualContainer");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Hosts");
            mockRelationship.setEntityTwoPropertyName("HostedContainers");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Host");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("VirtualContainer");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            DeployedVirtualContainer requestedDeployedVirtualContainer = new DeployedVirtualContainer();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedDeployedVirtualContainer.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            DeployedVirtualContainer returnedDeployedVirtualContainer = subjectAreaBeansToAccessOMRS.createDeployedVirtualContainerRelationship(testuserid, requestedDeployedVirtualContainer);
        }

        @Test
        public void testGetDeployedVirtualContainer() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetDeployedVirtualContainer";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("DeployedVirtualContainer");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Hosts");
            mockRelationship.setEntityTwoPropertyName("HostedContainers");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Host");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("VirtualContainer");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            DeployedVirtualContainer requestedDeployedVirtualContainer = new DeployedVirtualContainer();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            DeployedVirtualContainer returnedDeployedVirtualContainer = subjectAreaBeansToAccessOMRS.getDeployedVirtualContainerRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateDeployedVirtualContainer() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateDeployedVirtualContainer";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("DeployedVirtualContainer");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Hosts");
            mockRelationship.setEntityTwoPropertyName("HostedContainers");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Host");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("VirtualContainer");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            DeployedVirtualContainer requestedDeployedVirtualContainer = new DeployedVirtualContainer();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedDeployedVirtualContainer.setSystemAttributes(systemAttributes);


            DeployedVirtualContainer returnedDeployedVirtualContainer = subjectAreaBeansToAccessOMRS.updateDeployedVirtualContainerRelationship(testuserid, requestedDeployedVirtualContainer);
        }

    @Test
        public void testCreateProjectMeeting() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateProjectMeeting";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProjectMeeting");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("RelatedProjects");
            mockRelationship.setEntityTwoPropertyName("Meetings");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Project");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Meeting");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProjectMeeting requestedProjectMeeting = new ProjectMeeting();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedProjectMeeting.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ProjectMeeting returnedProjectMeeting = subjectAreaBeansToAccessOMRS.createProjectMeetingRelationship(testuserid, requestedProjectMeeting);
        }

        @Test
        public void testGetProjectMeeting() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetProjectMeeting";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProjectMeeting");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("RelatedProjects");
            mockRelationship.setEntityTwoPropertyName("Meetings");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Project");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Meeting");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProjectMeeting requestedProjectMeeting = new ProjectMeeting();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ProjectMeeting returnedProjectMeeting = subjectAreaBeansToAccessOMRS.getProjectMeetingRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateProjectMeeting() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateProjectMeeting";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProjectMeeting");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("RelatedProjects");
            mockRelationship.setEntityTwoPropertyName("Meetings");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Project");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Meeting");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProjectMeeting requestedProjectMeeting = new ProjectMeeting();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedProjectMeeting.setSystemAttributes(systemAttributes);


            ProjectMeeting returnedProjectMeeting = subjectAreaBeansToAccessOMRS.updateProjectMeetingRelationship(testuserid, requestedProjectMeeting);
        }

    @Test
        public void testCreateGovernanceResults() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateGovernanceResults";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String query = "string0";
            primitivePropertyValue.setPrimitiveValue(query);
            instanceProperties.setProperty("query", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernanceResults");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Metrics");
            mockRelationship.setEntityTwoPropertyName("Measurements");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceMetric");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DataSet");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceResults requestedGovernanceResults = new GovernanceResults();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedGovernanceResults.setSystemAttributes(systemAttributes);

            requestedGovernanceResults.setQuery(query);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            GovernanceResults returnedGovernanceResults = subjectAreaBeansToAccessOMRS.createGovernanceResultsRelationship(testuserid, requestedGovernanceResults);
            assertEquals(requestedGovernanceResults.getQuery(),returnedGovernanceResults.getQuery());

        }

        @Test
        public void testGetGovernanceResults() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetGovernanceResults";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String query = "string0";
            primitivePropertyValue.setPrimitiveValue(query);
            instanceProperties.setProperty("query", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernanceResults");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Metrics");
            mockRelationship.setEntityTwoPropertyName("Measurements");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceMetric");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DataSet");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceResults requestedGovernanceResults = new GovernanceResults();

            requestedGovernanceResults.setQuery(query);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            GovernanceResults returnedGovernanceResults = subjectAreaBeansToAccessOMRS.getGovernanceResultsRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedGovernanceResults.getQuery(),returnedGovernanceResults.getQuery());

        }
        @Test
        public void testUpdateGovernanceResults() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGovernanceResults";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String query = "string0";
            primitivePropertyValue.setPrimitiveValue(query);
            instanceProperties.setProperty("query", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernanceResults");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Metrics");
            mockRelationship.setEntityTwoPropertyName("Measurements");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceMetric");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DataSet");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceResults requestedGovernanceResults = new GovernanceResults();

            requestedGovernanceResults.setQuery(query);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedGovernanceResults.setSystemAttributes(systemAttributes);


            GovernanceResults returnedGovernanceResults = subjectAreaBeansToAccessOMRS.updateGovernanceResultsRelationship(testuserid, requestedGovernanceResults);
            assertEquals(requestedGovernanceResults.getQuery(),returnedGovernanceResults.getQuery());

        }

    @Test
        public void testCreateAPIResponse() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateAPIResponse";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("APIResponse");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("UsedAsAPIResponse");
            mockRelationship.setEntityTwoPropertyName("ApiResponse");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("APIOperation");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            APIResponse requestedAPIResponse = new APIResponse();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAPIResponse.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            APIResponse returnedAPIResponse = subjectAreaBeansToAccessOMRS.createAPIResponseRelationship(testuserid, requestedAPIResponse);
        }

        @Test
        public void testGetAPIResponse() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetAPIResponse";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("APIResponse");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("UsedAsAPIResponse");
            mockRelationship.setEntityTwoPropertyName("ApiResponse");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("APIOperation");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            APIResponse requestedAPIResponse = new APIResponse();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            APIResponse returnedAPIResponse = subjectAreaBeansToAccessOMRS.getAPIResponseRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateAPIResponse() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateAPIResponse";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("APIResponse");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("UsedAsAPIResponse");
            mockRelationship.setEntityTwoPropertyName("ApiResponse");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("APIOperation");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            APIResponse requestedAPIResponse = new APIResponse();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAPIResponse.setSystemAttributes(systemAttributes);


            APIResponse returnedAPIResponse = subjectAreaBeansToAccessOMRS.updateAPIResponseRelationship(testuserid, requestedAPIResponse);
        }

    @Test
        public void testCreateServerSupportedCapability() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateServerSupportedCapability";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date deploymentTime = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(deploymentTime);
            instanceProperties.setProperty("deploymentTime", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String deployer = "string1";
            primitivePropertyValue.setPrimitiveValue(deployer);
            instanceProperties.setProperty("deployer", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(OperationalStatus.values()[0].name());
            instanceProperties.setProperty("serverCapabilityStatus", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ServerSupportedCapability");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Servers");
            mockRelationship.setEntityTwoPropertyName("Capabilities");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SoftwareServer");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SoftwareServerCapability");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ServerSupportedCapability requestedServerSupportedCapability = new ServerSupportedCapability();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedServerSupportedCapability.setSystemAttributes(systemAttributes);

            requestedServerSupportedCapability.setDeploymentTime(deploymentTime);

            requestedServerSupportedCapability.setDeployer(deployer);

            EnumPropertyValue OperationalStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            OperationalStatusEnumPropertyValue.setSymbolicName(OperationalStatus.values()[0].name());
            instanceProperties.setProperty("serverCapabilityStatus", OperationalStatusEnumPropertyValue);

            requestedServerSupportedCapability.setServerCapabilityStatus(OperationalStatus.values()[0]);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ServerSupportedCapability returnedServerSupportedCapability = subjectAreaBeansToAccessOMRS.createServerSupportedCapabilityRelationship(testuserid, requestedServerSupportedCapability);
            assertEquals(requestedServerSupportedCapability.getDeploymentTime(),returnedServerSupportedCapability.getDeploymentTime());

            assertEquals(requestedServerSupportedCapability.getDeployer(),returnedServerSupportedCapability.getDeployer());

            assertEquals(requestedServerSupportedCapability.getServerCapabilityStatus(),returnedServerSupportedCapability.getServerCapabilityStatus());

        }

        @Test
        public void testGetServerSupportedCapability() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetServerSupportedCapability";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date deploymentTime = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(deploymentTime);
            instanceProperties.setProperty("deploymentTime", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String deployer = "string1";
            primitivePropertyValue.setPrimitiveValue(deployer);
            instanceProperties.setProperty("deployer", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(OperationalStatus.values()[0].name());
            instanceProperties.setProperty("serverCapabilityStatus", enumPropertyValue);

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ServerSupportedCapability");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Servers");
            mockRelationship.setEntityTwoPropertyName("Capabilities");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SoftwareServer");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SoftwareServerCapability");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ServerSupportedCapability requestedServerSupportedCapability = new ServerSupportedCapability();

            requestedServerSupportedCapability.setDeploymentTime(deploymentTime);

            requestedServerSupportedCapability.setDeployer(deployer);

            EnumPropertyValue OperationalStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            OperationalStatusEnumPropertyValue.setSymbolicName(OperationalStatus.values()[0].name());
            instanceProperties.setProperty("serverCapabilityStatus", OperationalStatusEnumPropertyValue);

            requestedServerSupportedCapability.setServerCapabilityStatus(OperationalStatus.values()[0]);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ServerSupportedCapability returnedServerSupportedCapability = subjectAreaBeansToAccessOMRS.getServerSupportedCapabilityRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedServerSupportedCapability.getDeploymentTime(),returnedServerSupportedCapability.getDeploymentTime());

            assertEquals(requestedServerSupportedCapability.getDeployer(),returnedServerSupportedCapability.getDeployer());

            assertEquals(requestedServerSupportedCapability.getServerCapabilityStatus(),returnedServerSupportedCapability.getServerCapabilityStatus());

        }
        @Test
        public void testUpdateServerSupportedCapability() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateServerSupportedCapability";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date deploymentTime = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(deploymentTime);
            instanceProperties.setProperty("deploymentTime", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String deployer = "string1";
            primitivePropertyValue.setPrimitiveValue(deployer);
            instanceProperties.setProperty("deployer", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(OperationalStatus.values()[0].name());
            instanceProperties.setProperty("serverCapabilityStatus", enumPropertyValue);

            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ServerSupportedCapability");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Servers");
            mockRelationship.setEntityTwoPropertyName("Capabilities");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SoftwareServer");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SoftwareServerCapability");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ServerSupportedCapability requestedServerSupportedCapability = new ServerSupportedCapability();

            requestedServerSupportedCapability.setDeploymentTime(deploymentTime);

            requestedServerSupportedCapability.setDeployer(deployer);

            EnumPropertyValue OperationalStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            OperationalStatusEnumPropertyValue.setSymbolicName(OperationalStatus.values()[0].name());
            instanceProperties.setProperty("serverCapabilityStatus", OperationalStatusEnumPropertyValue);

            requestedServerSupportedCapability.setServerCapabilityStatus(OperationalStatus.values()[0]);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedServerSupportedCapability.setSystemAttributes(systemAttributes);


            ServerSupportedCapability returnedServerSupportedCapability = subjectAreaBeansToAccessOMRS.updateServerSupportedCapabilityRelationship(testuserid, requestedServerSupportedCapability);
            assertEquals(requestedServerSupportedCapability.getDeploymentTime(),returnedServerSupportedCapability.getDeploymentTime());

            assertEquals(requestedServerSupportedCapability.getDeployer(),returnedServerSupportedCapability.getDeployer());

            assertEquals(requestedServerSupportedCapability.getServerCapabilityStatus(),returnedServerSupportedCapability.getServerCapabilityStatus());

        }

    @Test
        public void testCreateCollectionMember() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateCollectionMember";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("CollectionMember");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("FoundInCollections");
            mockRelationship.setEntityTwoPropertyName("Members");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Collection");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Referenceable");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            CollectionMember requestedCollectionMember = new CollectionMember();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedCollectionMember.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            CollectionMember returnedCollectionMember = subjectAreaBeansToAccessOMRS.createCollectionMemberRelationship(testuserid, requestedCollectionMember);
        }

        @Test
        public void testGetCollectionMember() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetCollectionMember";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("CollectionMember");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("FoundInCollections");
            mockRelationship.setEntityTwoPropertyName("Members");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Collection");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Referenceable");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            CollectionMember requestedCollectionMember = new CollectionMember();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            CollectionMember returnedCollectionMember = subjectAreaBeansToAccessOMRS.getCollectionMemberRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateCollectionMember() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateCollectionMember";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("CollectionMember");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("FoundInCollections");
            mockRelationship.setEntityTwoPropertyName("Members");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Collection");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Referenceable");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            CollectionMember requestedCollectionMember = new CollectionMember();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedCollectionMember.setSystemAttributes(systemAttributes);


            CollectionMember returnedCollectionMember = subjectAreaBeansToAccessOMRS.updateCollectionMemberRelationship(testuserid, requestedCollectionMember);
        }

    @Test
        public void testCreateHostNetwork() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateHostNetwork";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("HostNetwork");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ConnectedHosts");
            mockRelationship.setEntityTwoPropertyName("NetworkConnections");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Host");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Network");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            HostNetwork requestedHostNetwork = new HostNetwork();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedHostNetwork.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            HostNetwork returnedHostNetwork = subjectAreaBeansToAccessOMRS.createHostNetworkRelationship(testuserid, requestedHostNetwork);
        }

        @Test
        public void testGetHostNetwork() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetHostNetwork";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("HostNetwork");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ConnectedHosts");
            mockRelationship.setEntityTwoPropertyName("NetworkConnections");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Host");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Network");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            HostNetwork requestedHostNetwork = new HostNetwork();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            HostNetwork returnedHostNetwork = subjectAreaBeansToAccessOMRS.getHostNetworkRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateHostNetwork() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateHostNetwork";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("HostNetwork");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ConnectedHosts");
            mockRelationship.setEntityTwoPropertyName("NetworkConnections");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Host");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Network");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            HostNetwork requestedHostNetwork = new HostNetwork();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedHostNetwork.setSystemAttributes(systemAttributes);


            HostNetwork returnedHostNetwork = subjectAreaBeansToAccessOMRS.updateHostNetworkRelationship(testuserid, requestedHostNetwork);
        }

    @Test
        public void testCreateAttributeForSchema() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateAttributeForSchema";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AttributeForSchema");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ParentSchemas");
            mockRelationship.setEntityTwoPropertyName("Attributes");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("ComplexSchemaType");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaAttribute");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AttributeForSchema requestedAttributeForSchema = new AttributeForSchema();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAttributeForSchema.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            AttributeForSchema returnedAttributeForSchema = subjectAreaBeansToAccessOMRS.createAttributeForSchemaRelationship(testuserid, requestedAttributeForSchema);
        }

        @Test
        public void testGetAttributeForSchema() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetAttributeForSchema";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AttributeForSchema");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ParentSchemas");
            mockRelationship.setEntityTwoPropertyName("Attributes");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("ComplexSchemaType");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaAttribute");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AttributeForSchema requestedAttributeForSchema = new AttributeForSchema();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            AttributeForSchema returnedAttributeForSchema = subjectAreaBeansToAccessOMRS.getAttributeForSchemaRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateAttributeForSchema() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateAttributeForSchema";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AttributeForSchema");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ParentSchemas");
            mockRelationship.setEntityTwoPropertyName("Attributes");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("ComplexSchemaType");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaAttribute");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AttributeForSchema requestedAttributeForSchema = new AttributeForSchema();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAttributeForSchema.setSystemAttributes(systemAttributes);


            AttributeForSchema returnedAttributeForSchema = subjectAreaBeansToAccessOMRS.updateAttributeForSchemaRelationship(testuserid, requestedAttributeForSchema);
        }

    @Test
        public void testCreateAssetLocation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateAssetLocation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AssetLocation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("KnownLocations");
            mockRelationship.setEntityTwoPropertyName("LocalAssets");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Location");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Location");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AssetLocation requestedAssetLocation = new AssetLocation();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAssetLocation.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            AssetLocation returnedAssetLocation = subjectAreaBeansToAccessOMRS.createAssetLocationRelationship(testuserid, requestedAssetLocation);
        }

        @Test
        public void testGetAssetLocation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetAssetLocation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AssetLocation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("KnownLocations");
            mockRelationship.setEntityTwoPropertyName("LocalAssets");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Location");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Location");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AssetLocation requestedAssetLocation = new AssetLocation();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            AssetLocation returnedAssetLocation = subjectAreaBeansToAccessOMRS.getAssetLocationRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateAssetLocation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateAssetLocation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AssetLocation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("KnownLocations");
            mockRelationship.setEntityTwoPropertyName("LocalAssets");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Location");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Location");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AssetLocation requestedAssetLocation = new AssetLocation();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAssetLocation.setSystemAttributes(systemAttributes);


            AssetLocation returnedAssetLocation = subjectAreaBeansToAccessOMRS.updateAssetLocationRelationship(testuserid, requestedAssetLocation);
        }

    @Test
        public void testCreateSchemaAttributeType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateSchemaAttributeType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("SchemaAttributeType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("UsedInSchemas");
            mockRelationship.setEntityTwoPropertyName("Type");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SchemaAttribute");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SchemaAttributeType requestedSchemaAttributeType = new SchemaAttributeType();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedSchemaAttributeType.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            SchemaAttributeType returnedSchemaAttributeType = subjectAreaBeansToAccessOMRS.createSchemaAttributeTypeRelationship(testuserid, requestedSchemaAttributeType);
        }

        @Test
        public void testGetSchemaAttributeType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetSchemaAttributeType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("SchemaAttributeType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("UsedInSchemas");
            mockRelationship.setEntityTwoPropertyName("Type");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SchemaAttribute");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SchemaAttributeType requestedSchemaAttributeType = new SchemaAttributeType();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            SchemaAttributeType returnedSchemaAttributeType = subjectAreaBeansToAccessOMRS.getSchemaAttributeTypeRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateSchemaAttributeType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateSchemaAttributeType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("SchemaAttributeType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("UsedInSchemas");
            mockRelationship.setEntityTwoPropertyName("Type");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SchemaAttribute");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SchemaAttributeType requestedSchemaAttributeType = new SchemaAttributeType();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedSchemaAttributeType.setSystemAttributes(systemAttributes);


            SchemaAttributeType returnedSchemaAttributeType = subjectAreaBeansToAccessOMRS.updateSchemaAttributeTypeRelationship(testuserid, requestedSchemaAttributeType);
        }

    @Test
        public void testCreateGovernanceImplementation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateGovernanceImplementation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String rationale = "string0";
            primitivePropertyValue.setPrimitiveValue(rationale);
            instanceProperties.setProperty("rationale", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernanceImplementation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Policies");
            mockRelationship.setEntityTwoPropertyName("Implementations");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernancePolicy");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GovernanceControl");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceImplementation requestedGovernanceImplementation = new GovernanceImplementation();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedGovernanceImplementation.setSystemAttributes(systemAttributes);

            requestedGovernanceImplementation.setRationale(rationale);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            GovernanceImplementation returnedGovernanceImplementation = subjectAreaBeansToAccessOMRS.createGovernanceImplementationRelationship(testuserid, requestedGovernanceImplementation);
            assertEquals(requestedGovernanceImplementation.getRationale(),returnedGovernanceImplementation.getRationale());

        }

        @Test
        public void testGetGovernanceImplementation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetGovernanceImplementation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String rationale = "string0";
            primitivePropertyValue.setPrimitiveValue(rationale);
            instanceProperties.setProperty("rationale", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernanceImplementation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Policies");
            mockRelationship.setEntityTwoPropertyName("Implementations");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernancePolicy");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GovernanceControl");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceImplementation requestedGovernanceImplementation = new GovernanceImplementation();

            requestedGovernanceImplementation.setRationale(rationale);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            GovernanceImplementation returnedGovernanceImplementation = subjectAreaBeansToAccessOMRS.getGovernanceImplementationRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedGovernanceImplementation.getRationale(),returnedGovernanceImplementation.getRationale());

        }
        @Test
        public void testUpdateGovernanceImplementation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGovernanceImplementation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String rationale = "string0";
            primitivePropertyValue.setPrimitiveValue(rationale);
            instanceProperties.setProperty("rationale", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernanceImplementation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Policies");
            mockRelationship.setEntityTwoPropertyName("Implementations");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernancePolicy");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GovernanceControl");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceImplementation requestedGovernanceImplementation = new GovernanceImplementation();

            requestedGovernanceImplementation.setRationale(rationale);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedGovernanceImplementation.setSystemAttributes(systemAttributes);


            GovernanceImplementation returnedGovernanceImplementation = subjectAreaBeansToAccessOMRS.updateGovernanceImplementationRelationship(testuserid, requestedGovernanceImplementation);
            assertEquals(requestedGovernanceImplementation.getRationale(),returnedGovernanceImplementation.getRationale());

        }

    @Test
        public void testCreateLinkedMedia() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateLinkedMedia";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("LinkedMedia");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LinkedMediaFiles");
            mockRelationship.setEntityTwoPropertyName("LinkedMediaFiles");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("MediaFile");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("MediaFile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            LinkedMedia requestedLinkedMedia = new LinkedMedia();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedLinkedMedia.setSystemAttributes(systemAttributes);

            requestedLinkedMedia.setDescription(description);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            LinkedMedia returnedLinkedMedia = subjectAreaBeansToAccessOMRS.createLinkedMediaRelationship(testuserid, requestedLinkedMedia);
            assertEquals(requestedLinkedMedia.getDescription(),returnedLinkedMedia.getDescription());

        }

        @Test
        public void testGetLinkedMedia() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetLinkedMedia";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("LinkedMedia");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LinkedMediaFiles");
            mockRelationship.setEntityTwoPropertyName("LinkedMediaFiles");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("MediaFile");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("MediaFile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            LinkedMedia requestedLinkedMedia = new LinkedMedia();

            requestedLinkedMedia.setDescription(description);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            LinkedMedia returnedLinkedMedia = subjectAreaBeansToAccessOMRS.getLinkedMediaRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedLinkedMedia.getDescription(),returnedLinkedMedia.getDescription());

        }
        @Test
        public void testUpdateLinkedMedia() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateLinkedMedia";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("LinkedMedia");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LinkedMediaFiles");
            mockRelationship.setEntityTwoPropertyName("LinkedMediaFiles");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("MediaFile");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("MediaFile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            LinkedMedia requestedLinkedMedia = new LinkedMedia();

            requestedLinkedMedia.setDescription(description);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedLinkedMedia.setSystemAttributes(systemAttributes);


            LinkedMedia returnedLinkedMedia = subjectAreaBeansToAccessOMRS.updateLinkedMediaRelationship(testuserid, requestedLinkedMedia);
            assertEquals(requestedLinkedMedia.getDescription(),returnedLinkedMedia.getDescription());

        }

    @Test
        public void testCreateMapToElementType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateMapToElementType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("MapToElementType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ParentMapTo");
            mockRelationship.setEntityTwoPropertyName("MapToElement");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("MapSchemaType");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            MapToElementType requestedMapToElementType = new MapToElementType();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedMapToElementType.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapToElementType returnedMapToElementType = subjectAreaBeansToAccessOMRS.createMapToElementTypeRelationship(testuserid, requestedMapToElementType);
        }

        @Test
        public void testGetMapToElementType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetMapToElementType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("MapToElementType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ParentMapTo");
            mockRelationship.setEntityTwoPropertyName("MapToElement");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("MapSchemaType");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            MapToElementType requestedMapToElementType = new MapToElementType();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            MapToElementType returnedMapToElementType = subjectAreaBeansToAccessOMRS.getMapToElementTypeRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateMapToElementType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateMapToElementType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("MapToElementType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ParentMapTo");
            mockRelationship.setEntityTwoPropertyName("MapToElement");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("MapSchemaType");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            MapToElementType requestedMapToElementType = new MapToElementType();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedMapToElementType.setSystemAttributes(systemAttributes);


            MapToElementType returnedMapToElementType = subjectAreaBeansToAccessOMRS.updateMapToElementTypeRelationship(testuserid, requestedMapToElementType);
        }

    @Test
        public void testCreateExternallySourcedGlossary() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateExternallySourcedGlossary";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ExternallySourcedGlossary");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LocalGlossary");
            mockRelationship.setEntityTwoPropertyName("ExternalGlossaryLink");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Glossary");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ExternalGlossaryLink");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ExternallySourcedGlossary requestedExternallySourcedGlossary = new ExternallySourcedGlossary();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedExternallySourcedGlossary.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ExternallySourcedGlossary returnedExternallySourcedGlossary = subjectAreaBeansToAccessOMRS.createExternallySourcedGlossaryRelationship(testuserid, requestedExternallySourcedGlossary);
        }

        @Test
        public void testGetExternallySourcedGlossary() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetExternallySourcedGlossary";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ExternallySourcedGlossary");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LocalGlossary");
            mockRelationship.setEntityTwoPropertyName("ExternalGlossaryLink");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Glossary");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ExternalGlossaryLink");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ExternallySourcedGlossary requestedExternallySourcedGlossary = new ExternallySourcedGlossary();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ExternallySourcedGlossary returnedExternallySourcedGlossary = subjectAreaBeansToAccessOMRS.getExternallySourcedGlossaryRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateExternallySourcedGlossary() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateExternallySourcedGlossary";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ExternallySourcedGlossary");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LocalGlossary");
            mockRelationship.setEntityTwoPropertyName("ExternalGlossaryLink");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Glossary");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ExternalGlossaryLink");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ExternallySourcedGlossary requestedExternallySourcedGlossary = new ExternallySourcedGlossary();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedExternallySourcedGlossary.setSystemAttributes(systemAttributes);


            ExternallySourcedGlossary returnedExternallySourcedGlossary = subjectAreaBeansToAccessOMRS.updateExternallySourcedGlossaryRelationship(testuserid, requestedExternallySourcedGlossary);
        }

    @Test
        public void testCreateExternalReferenceLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateExternalReferenceLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String referenceId = "string0";
            primitivePropertyValue.setPrimitiveValue(referenceId);
            instanceProperties.setProperty("referenceId", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ExternalReferenceLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("RelatedItem");
            mockRelationship.setEntityTwoPropertyName("ExternalReference");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ExternalReference");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ExternalReferenceLink requestedExternalReferenceLink = new ExternalReferenceLink();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedExternalReferenceLink.setSystemAttributes(systemAttributes);

            requestedExternalReferenceLink.setReferenceId(referenceId);

            requestedExternalReferenceLink.setDescription(description);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ExternalReferenceLink returnedExternalReferenceLink = subjectAreaBeansToAccessOMRS.createExternalReferenceLinkRelationship(testuserid, requestedExternalReferenceLink);
            assertEquals(requestedExternalReferenceLink.getReferenceId(),returnedExternalReferenceLink.getReferenceId());

            assertEquals(requestedExternalReferenceLink.getDescription(),returnedExternalReferenceLink.getDescription());

        }

        @Test
        public void testGetExternalReferenceLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetExternalReferenceLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String referenceId = "string0";
            primitivePropertyValue.setPrimitiveValue(referenceId);
            instanceProperties.setProperty("referenceId", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ExternalReferenceLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("RelatedItem");
            mockRelationship.setEntityTwoPropertyName("ExternalReference");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ExternalReference");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ExternalReferenceLink requestedExternalReferenceLink = new ExternalReferenceLink();

            requestedExternalReferenceLink.setReferenceId(referenceId);

            requestedExternalReferenceLink.setDescription(description);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ExternalReferenceLink returnedExternalReferenceLink = subjectAreaBeansToAccessOMRS.getExternalReferenceLinkRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedExternalReferenceLink.getReferenceId(),returnedExternalReferenceLink.getReferenceId());

            assertEquals(requestedExternalReferenceLink.getDescription(),returnedExternalReferenceLink.getDescription());

        }
        @Test
        public void testUpdateExternalReferenceLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateExternalReferenceLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String referenceId = "string0";
            primitivePropertyValue.setPrimitiveValue(referenceId);
            instanceProperties.setProperty("referenceId", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ExternalReferenceLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("RelatedItem");
            mockRelationship.setEntityTwoPropertyName("ExternalReference");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ExternalReference");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ExternalReferenceLink requestedExternalReferenceLink = new ExternalReferenceLink();

            requestedExternalReferenceLink.setReferenceId(referenceId);

            requestedExternalReferenceLink.setDescription(description);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedExternalReferenceLink.setSystemAttributes(systemAttributes);


            ExternalReferenceLink returnedExternalReferenceLink = subjectAreaBeansToAccessOMRS.updateExternalReferenceLinkRelationship(testuserid, requestedExternalReferenceLink);
            assertEquals(requestedExternalReferenceLink.getReferenceId(),returnedExternalReferenceLink.getReferenceId());

            assertEquals(requestedExternalReferenceLink.getDescription(),returnedExternalReferenceLink.getDescription());

        }

    @Test
        public void testCreateMediaReference() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateMediaReference";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String mediaId = "string0";
            primitivePropertyValue.setPrimitiveValue(mediaId);
            instanceProperties.setProperty("mediaId", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("MediaReference");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ConsumingItem");
            mockRelationship.setEntityTwoPropertyName("RelatedMedia");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("RelatedMedia");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            MediaReference requestedMediaReference = new MediaReference();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedMediaReference.setSystemAttributes(systemAttributes);

            requestedMediaReference.setMediaId(mediaId);

            requestedMediaReference.setDescription(description);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MediaReference returnedMediaReference = subjectAreaBeansToAccessOMRS.createMediaReferenceRelationship(testuserid, requestedMediaReference);
            assertEquals(requestedMediaReference.getMediaId(),returnedMediaReference.getMediaId());

            assertEquals(requestedMediaReference.getDescription(),returnedMediaReference.getDescription());

        }

        @Test
        public void testGetMediaReference() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetMediaReference";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String mediaId = "string0";
            primitivePropertyValue.setPrimitiveValue(mediaId);
            instanceProperties.setProperty("mediaId", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("MediaReference");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ConsumingItem");
            mockRelationship.setEntityTwoPropertyName("RelatedMedia");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("RelatedMedia");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            MediaReference requestedMediaReference = new MediaReference();

            requestedMediaReference.setMediaId(mediaId);

            requestedMediaReference.setDescription(description);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            MediaReference returnedMediaReference = subjectAreaBeansToAccessOMRS.getMediaReferenceRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedMediaReference.getMediaId(),returnedMediaReference.getMediaId());

            assertEquals(requestedMediaReference.getDescription(),returnedMediaReference.getDescription());

        }
        @Test
        public void testUpdateMediaReference() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateMediaReference";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String mediaId = "string0";
            primitivePropertyValue.setPrimitiveValue(mediaId);
            instanceProperties.setProperty("mediaId", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string1";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("MediaReference");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ConsumingItem");
            mockRelationship.setEntityTwoPropertyName("RelatedMedia");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("RelatedMedia");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            MediaReference requestedMediaReference = new MediaReference();

            requestedMediaReference.setMediaId(mediaId);

            requestedMediaReference.setDescription(description);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedMediaReference.setSystemAttributes(systemAttributes);


            MediaReference returnedMediaReference = subjectAreaBeansToAccessOMRS.updateMediaReferenceRelationship(testuserid, requestedMediaReference);
            assertEquals(requestedMediaReference.getMediaId(),returnedMediaReference.getMediaId());

            assertEquals(requestedMediaReference.getDescription(),returnedMediaReference.getDescription());

        }

    @Test
        public void testCreateCommunityMembership() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateCommunityMembership";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(CommunityMembershipType.values()[0].name());
            instanceProperties.setProperty("relationshipType", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("CommunityMembership");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Communities");
            mockRelationship.setEntityTwoPropertyName("Members");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Community");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ActorProfile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            CommunityMembership requestedCommunityMembership = new CommunityMembership();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedCommunityMembership.setSystemAttributes(systemAttributes);

            EnumPropertyValue CommunityMembershipTypeEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            CommunityMembershipTypeEnumPropertyValue.setSymbolicName(CommunityMembershipType.values()[0].name());
            instanceProperties.setProperty("relationshipType", CommunityMembershipTypeEnumPropertyValue);

            requestedCommunityMembership.setRelationshipType(CommunityMembershipType.values()[0]);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            CommunityMembership returnedCommunityMembership = subjectAreaBeansToAccessOMRS.createCommunityMembershipRelationship(testuserid, requestedCommunityMembership);
            assertEquals(requestedCommunityMembership.getRelationshipType(),returnedCommunityMembership.getRelationshipType());

        }

        @Test
        public void testGetCommunityMembership() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetCommunityMembership";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(CommunityMembershipType.values()[0].name());
            instanceProperties.setProperty("relationshipType", enumPropertyValue);

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("CommunityMembership");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Communities");
            mockRelationship.setEntityTwoPropertyName("Members");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Community");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ActorProfile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            CommunityMembership requestedCommunityMembership = new CommunityMembership();

            EnumPropertyValue CommunityMembershipTypeEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            CommunityMembershipTypeEnumPropertyValue.setSymbolicName(CommunityMembershipType.values()[0].name());
            instanceProperties.setProperty("relationshipType", CommunityMembershipTypeEnumPropertyValue);

            requestedCommunityMembership.setRelationshipType(CommunityMembershipType.values()[0]);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            CommunityMembership returnedCommunityMembership = subjectAreaBeansToAccessOMRS.getCommunityMembershipRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedCommunityMembership.getRelationshipType(),returnedCommunityMembership.getRelationshipType());

        }
        @Test
        public void testUpdateCommunityMembership() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateCommunityMembership";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(CommunityMembershipType.values()[0].name());
            instanceProperties.setProperty("relationshipType", enumPropertyValue);

            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("CommunityMembership");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Communities");
            mockRelationship.setEntityTwoPropertyName("Members");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Community");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ActorProfile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            CommunityMembership requestedCommunityMembership = new CommunityMembership();

            EnumPropertyValue CommunityMembershipTypeEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            CommunityMembershipTypeEnumPropertyValue.setSymbolicName(CommunityMembershipType.values()[0].name());
            instanceProperties.setProperty("relationshipType", CommunityMembershipTypeEnumPropertyValue);

            requestedCommunityMembership.setRelationshipType(CommunityMembershipType.values()[0]);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedCommunityMembership.setSystemAttributes(systemAttributes);


            CommunityMembership returnedCommunityMembership = subjectAreaBeansToAccessOMRS.updateCommunityMembershipRelationship(testuserid, requestedCommunityMembership);
            assertEquals(requestedCommunityMembership.getRelationshipType(),returnedCommunityMembership.getRelationshipType());

        }

    @Test
        public void testCreateExternalIdScope() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateExternalIdScope";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ExternalIdScope");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ScopedTo");
            mockRelationship.setEntityTwoPropertyName("ManagedResources");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ExternalId");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ExternalIdScope requestedExternalIdScope = new ExternalIdScope();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedExternalIdScope.setSystemAttributes(systemAttributes);

            requestedExternalIdScope.setDescription(description);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ExternalIdScope returnedExternalIdScope = subjectAreaBeansToAccessOMRS.createExternalIdScopeRelationship(testuserid, requestedExternalIdScope);
            assertEquals(requestedExternalIdScope.getDescription(),returnedExternalIdScope.getDescription());

        }

        @Test
        public void testGetExternalIdScope() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetExternalIdScope";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ExternalIdScope");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ScopedTo");
            mockRelationship.setEntityTwoPropertyName("ManagedResources");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ExternalId");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ExternalIdScope requestedExternalIdScope = new ExternalIdScope();

            requestedExternalIdScope.setDescription(description);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ExternalIdScope returnedExternalIdScope = subjectAreaBeansToAccessOMRS.getExternalIdScopeRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedExternalIdScope.getDescription(),returnedExternalIdScope.getDescription());

        }
        @Test
        public void testUpdateExternalIdScope() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateExternalIdScope";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ExternalIdScope");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ScopedTo");
            mockRelationship.setEntityTwoPropertyName("ManagedResources");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ExternalId");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ExternalIdScope requestedExternalIdScope = new ExternalIdScope();

            requestedExternalIdScope.setDescription(description);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedExternalIdScope.setSystemAttributes(systemAttributes);


            ExternalIdScope returnedExternalIdScope = subjectAreaBeansToAccessOMRS.updateExternalIdScopeRelationship(testuserid, requestedExternalIdScope);
            assertEquals(requestedExternalIdScope.getDescription(),returnedExternalIdScope.getDescription());

        }

    @Test
        public void testCreateValidValue() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateValidValue";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ValidValue");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ValidValueFor");
            mockRelationship.setEntityTwoPropertyName("ValidValues");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ValidValue requestedValidValue = new ValidValue();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedValidValue.setSystemAttributes(systemAttributes);

            requestedValidValue.setDescription(description);

            requestedValidValue.setExpression(expression);

            requestedValidValue.setSteward(steward);

            requestedValidValue.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedValidValue.setStatus(TermRelationshipStatus.values()[0]);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ValidValue returnedValidValue = subjectAreaBeansToAccessOMRS.createValidValueRelationship(testuserid, requestedValidValue);
            assertEquals(requestedValidValue.getDescription(),returnedValidValue.getDescription());

            assertEquals(requestedValidValue.getExpression(),returnedValidValue.getExpression());

            assertEquals(requestedValidValue.getSteward(),returnedValidValue.getSteward());

            assertEquals(requestedValidValue.getSource(),returnedValidValue.getSource());

            assertEquals(requestedValidValue.getStatus(),returnedValidValue.getStatus());

        }

        @Test
        public void testGetValidValue() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetValidValue";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ValidValue");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ValidValueFor");
            mockRelationship.setEntityTwoPropertyName("ValidValues");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ValidValue requestedValidValue = new ValidValue();

            requestedValidValue.setDescription(description);

            requestedValidValue.setExpression(expression);

            requestedValidValue.setSteward(steward);

            requestedValidValue.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedValidValue.setStatus(TermRelationshipStatus.values()[0]);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ValidValue returnedValidValue = subjectAreaBeansToAccessOMRS.getValidValueRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedValidValue.getDescription(),returnedValidValue.getDescription());

            assertEquals(requestedValidValue.getExpression(),returnedValidValue.getExpression());

            assertEquals(requestedValidValue.getSteward(),returnedValidValue.getSteward());

            assertEquals(requestedValidValue.getSource(),returnedValidValue.getSource());

            assertEquals(requestedValidValue.getStatus(),returnedValidValue.getStatus());

        }
        @Test
        public void testUpdateValidValue() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateValidValue";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ValidValue");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ValidValueFor");
            mockRelationship.setEntityTwoPropertyName("ValidValues");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ValidValue requestedValidValue = new ValidValue();

            requestedValidValue.setDescription(description);

            requestedValidValue.setExpression(expression);

            requestedValidValue.setSteward(steward);

            requestedValidValue.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedValidValue.setStatus(TermRelationshipStatus.values()[0]);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedValidValue.setSystemAttributes(systemAttributes);


            ValidValue returnedValidValue = subjectAreaBeansToAccessOMRS.updateValidValueRelationship(testuserid, requestedValidValue);
            assertEquals(requestedValidValue.getDescription(),returnedValidValue.getDescription());

            assertEquals(requestedValidValue.getExpression(),returnedValidValue.getExpression());

            assertEquals(requestedValidValue.getSteward(),returnedValidValue.getSteward());

            assertEquals(requestedValidValue.getSource(),returnedValidValue.getSource());

            assertEquals(requestedValidValue.getStatus(),returnedValidValue.getStatus());

        }

    @Test
        public void testCreateAcceptedAnswer() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateAcceptedAnswer";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AcceptedAnswer");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("AnsweredQuestions");
            mockRelationship.setEntityTwoPropertyName("AcceptedAnswers");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Comment");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Comment");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AcceptedAnswer requestedAcceptedAnswer = new AcceptedAnswer();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAcceptedAnswer.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            AcceptedAnswer returnedAcceptedAnswer = subjectAreaBeansToAccessOMRS.createAcceptedAnswerRelationship(testuserid, requestedAcceptedAnswer);
        }

        @Test
        public void testGetAcceptedAnswer() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetAcceptedAnswer";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AcceptedAnswer");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("AnsweredQuestions");
            mockRelationship.setEntityTwoPropertyName("AcceptedAnswers");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Comment");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Comment");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AcceptedAnswer requestedAcceptedAnswer = new AcceptedAnswer();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            AcceptedAnswer returnedAcceptedAnswer = subjectAreaBeansToAccessOMRS.getAcceptedAnswerRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateAcceptedAnswer() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateAcceptedAnswer";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AcceptedAnswer");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("AnsweredQuestions");
            mockRelationship.setEntityTwoPropertyName("AcceptedAnswers");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Comment");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Comment");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AcceptedAnswer requestedAcceptedAnswer = new AcceptedAnswer();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAcceptedAnswer.setSystemAttributes(systemAttributes);


            AcceptedAnswer returnedAcceptedAnswer = subjectAreaBeansToAccessOMRS.updateAcceptedAnswerRelationship(testuserid, requestedAcceptedAnswer);
        }

    @Test
        public void testCreateGovernanceDefinitionMetric() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateGovernanceDefinitionMetric";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String rationale = "string0";
            primitivePropertyValue.setPrimitiveValue(rationale);
            instanceProperties.setProperty("rationale", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernanceDefinitionMetric");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Metrics");
            mockRelationship.setEntityTwoPropertyName("MeasuredDefinitions");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceMetric");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GovernanceDefinition");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceDefinitionMetric requestedGovernanceDefinitionMetric = new GovernanceDefinitionMetric();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedGovernanceDefinitionMetric.setSystemAttributes(systemAttributes);

            requestedGovernanceDefinitionMetric.setRationale(rationale);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            GovernanceDefinitionMetric returnedGovernanceDefinitionMetric = subjectAreaBeansToAccessOMRS.createGovernanceDefinitionMetricRelationship(testuserid, requestedGovernanceDefinitionMetric);
            assertEquals(requestedGovernanceDefinitionMetric.getRationale(),returnedGovernanceDefinitionMetric.getRationale());

        }

        @Test
        public void testGetGovernanceDefinitionMetric() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetGovernanceDefinitionMetric";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String rationale = "string0";
            primitivePropertyValue.setPrimitiveValue(rationale);
            instanceProperties.setProperty("rationale", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernanceDefinitionMetric");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Metrics");
            mockRelationship.setEntityTwoPropertyName("MeasuredDefinitions");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceMetric");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GovernanceDefinition");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceDefinitionMetric requestedGovernanceDefinitionMetric = new GovernanceDefinitionMetric();

            requestedGovernanceDefinitionMetric.setRationale(rationale);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            GovernanceDefinitionMetric returnedGovernanceDefinitionMetric = subjectAreaBeansToAccessOMRS.getGovernanceDefinitionMetricRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedGovernanceDefinitionMetric.getRationale(),returnedGovernanceDefinitionMetric.getRationale());

        }
        @Test
        public void testUpdateGovernanceDefinitionMetric() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGovernanceDefinitionMetric";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String rationale = "string0";
            primitivePropertyValue.setPrimitiveValue(rationale);
            instanceProperties.setProperty("rationale", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernanceDefinitionMetric");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Metrics");
            mockRelationship.setEntityTwoPropertyName("MeasuredDefinitions");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceMetric");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GovernanceDefinition");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceDefinitionMetric requestedGovernanceDefinitionMetric = new GovernanceDefinitionMetric();

            requestedGovernanceDefinitionMetric.setRationale(rationale);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedGovernanceDefinitionMetric.setSystemAttributes(systemAttributes);


            GovernanceDefinitionMetric returnedGovernanceDefinitionMetric = subjectAreaBeansToAccessOMRS.updateGovernanceDefinitionMetricRelationship(testuserid, requestedGovernanceDefinitionMetric);
            assertEquals(requestedGovernanceDefinitionMetric.getRationale(),returnedGovernanceDefinitionMetric.getRationale());

        }

    @Test
        public void testCreateSchemaQueryImplementation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateSchemaQueryImplementation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String query = "string0";
            primitivePropertyValue.setPrimitiveValue(query);
            instanceProperties.setProperty("query", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("SchemaQueryImplementation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("UsedBy");
            mockRelationship.setEntityTwoPropertyName("QueryTarget");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("DerivedSchemaAttribute");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaAttribute");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SchemaQueryImplementation requestedSchemaQueryImplementation = new SchemaQueryImplementation();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedSchemaQueryImplementation.setSystemAttributes(systemAttributes);

            requestedSchemaQueryImplementation.setQuery(query);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            SchemaQueryImplementation returnedSchemaQueryImplementation = subjectAreaBeansToAccessOMRS.createSchemaQueryImplementationRelationship(testuserid, requestedSchemaQueryImplementation);
            assertEquals(requestedSchemaQueryImplementation.getQuery(),returnedSchemaQueryImplementation.getQuery());

        }

        @Test
        public void testGetSchemaQueryImplementation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetSchemaQueryImplementation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String query = "string0";
            primitivePropertyValue.setPrimitiveValue(query);
            instanceProperties.setProperty("query", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("SchemaQueryImplementation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("UsedBy");
            mockRelationship.setEntityTwoPropertyName("QueryTarget");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("DerivedSchemaAttribute");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaAttribute");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SchemaQueryImplementation requestedSchemaQueryImplementation = new SchemaQueryImplementation();

            requestedSchemaQueryImplementation.setQuery(query);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            SchemaQueryImplementation returnedSchemaQueryImplementation = subjectAreaBeansToAccessOMRS.getSchemaQueryImplementationRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedSchemaQueryImplementation.getQuery(),returnedSchemaQueryImplementation.getQuery());

        }
        @Test
        public void testUpdateSchemaQueryImplementation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateSchemaQueryImplementation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String query = "string0";
            primitivePropertyValue.setPrimitiveValue(query);
            instanceProperties.setProperty("query", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("SchemaQueryImplementation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("UsedBy");
            mockRelationship.setEntityTwoPropertyName("QueryTarget");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("DerivedSchemaAttribute");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaAttribute");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SchemaQueryImplementation requestedSchemaQueryImplementation = new SchemaQueryImplementation();

            requestedSchemaQueryImplementation.setQuery(query);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedSchemaQueryImplementation.setSystemAttributes(systemAttributes);


            SchemaQueryImplementation returnedSchemaQueryImplementation = subjectAreaBeansToAccessOMRS.updateSchemaQueryImplementationRelationship(testuserid, requestedSchemaQueryImplementation);
            assertEquals(requestedSchemaQueryImplementation.getQuery(),returnedSchemaQueryImplementation.getQuery());

        }

    @Test
        public void testCreateAssetSchemaType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateAssetSchemaType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AssetSchemaType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("DescribesAssets");
            mockRelationship.setEntityTwoPropertyName("Schema");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Asset");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AssetSchemaType requestedAssetSchemaType = new AssetSchemaType();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAssetSchemaType.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            AssetSchemaType returnedAssetSchemaType = subjectAreaBeansToAccessOMRS.createAssetSchemaTypeRelationship(testuserid, requestedAssetSchemaType);
        }

        @Test
        public void testGetAssetSchemaType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetAssetSchemaType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AssetSchemaType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("DescribesAssets");
            mockRelationship.setEntityTwoPropertyName("Schema");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Asset");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AssetSchemaType requestedAssetSchemaType = new AssetSchemaType();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            AssetSchemaType returnedAssetSchemaType = subjectAreaBeansToAccessOMRS.getAssetSchemaTypeRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateAssetSchemaType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateAssetSchemaType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AssetSchemaType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("DescribesAssets");
            mockRelationship.setEntityTwoPropertyName("Schema");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Asset");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AssetSchemaType requestedAssetSchemaType = new AssetSchemaType();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAssetSchemaType.setSystemAttributes(systemAttributes);


            AssetSchemaType returnedAssetSchemaType = subjectAreaBeansToAccessOMRS.updateAssetSchemaTypeRelationship(testuserid, requestedAssetSchemaType);
        }

    @Test
        public void testCreateProjectDependency() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateProjectDependency";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date dependencySummary = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(dependencySummary);
            instanceProperties.setProperty("dependencySummary", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProjectDependency");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("DependentProject");
            mockRelationship.setEntityTwoPropertyName("DependsOnProjects");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Project");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Project");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProjectDependency requestedProjectDependency = new ProjectDependency();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedProjectDependency.setSystemAttributes(systemAttributes);

            requestedProjectDependency.setDependencySummary(dependencySummary);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ProjectDependency returnedProjectDependency = subjectAreaBeansToAccessOMRS.createProjectDependencyRelationship(testuserid, requestedProjectDependency);
            assertEquals(requestedProjectDependency.getDependencySummary(),returnedProjectDependency.getDependencySummary());

        }

        @Test
        public void testGetProjectDependency() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetProjectDependency";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date dependencySummary = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(dependencySummary);
            instanceProperties.setProperty("dependencySummary", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProjectDependency");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("DependentProject");
            mockRelationship.setEntityTwoPropertyName("DependsOnProjects");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Project");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Project");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProjectDependency requestedProjectDependency = new ProjectDependency();

            requestedProjectDependency.setDependencySummary(dependencySummary);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ProjectDependency returnedProjectDependency = subjectAreaBeansToAccessOMRS.getProjectDependencyRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedProjectDependency.getDependencySummary(),returnedProjectDependency.getDependencySummary());

        }
        @Test
        public void testUpdateProjectDependency() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateProjectDependency";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date dependencySummary = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(dependencySummary);
            instanceProperties.setProperty("dependencySummary", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProjectDependency");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("DependentProject");
            mockRelationship.setEntityTwoPropertyName("DependsOnProjects");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Project");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Project");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProjectDependency requestedProjectDependency = new ProjectDependency();

            requestedProjectDependency.setDependencySummary(dependencySummary);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedProjectDependency.setSystemAttributes(systemAttributes);


            ProjectDependency returnedProjectDependency = subjectAreaBeansToAccessOMRS.updateProjectDependencyRelationship(testuserid, requestedProjectDependency);
            assertEquals(requestedProjectDependency.getDependencySummary(),returnedProjectDependency.getDependencySummary());

        }

    @Test
        public void testCreateTopicSubscribers() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateTopicSubscribers";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("TopicSubscribers");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Subscribers");
            mockRelationship.setEntityTwoPropertyName("Topics");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SubscriberList");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Topic");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            TopicSubscribers requestedTopicSubscribers = new TopicSubscribers();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedTopicSubscribers.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            TopicSubscribers returnedTopicSubscribers = subjectAreaBeansToAccessOMRS.createTopicSubscribersRelationship(testuserid, requestedTopicSubscribers);
        }

        @Test
        public void testGetTopicSubscribers() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetTopicSubscribers";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("TopicSubscribers");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Subscribers");
            mockRelationship.setEntityTwoPropertyName("Topics");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SubscriberList");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Topic");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            TopicSubscribers requestedTopicSubscribers = new TopicSubscribers();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            TopicSubscribers returnedTopicSubscribers = subjectAreaBeansToAccessOMRS.getTopicSubscribersRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateTopicSubscribers() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateTopicSubscribers";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("TopicSubscribers");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Subscribers");
            mockRelationship.setEntityTwoPropertyName("Topics");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SubscriberList");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Topic");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            TopicSubscribers requestedTopicSubscribers = new TopicSubscribers();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedTopicSubscribers.setSystemAttributes(systemAttributes);


            TopicSubscribers returnedTopicSubscribers = subjectAreaBeansToAccessOMRS.updateTopicSubscribersRelationship(testuserid, requestedTopicSubscribers);
        }

    @Test
        public void testCreateReplacementTerm() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateReplacementTerm";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ReplacementTerm");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ReplacedTerms");
            mockRelationship.setEntityTwoPropertyName("ReplacementTerms");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ReplacementTerm requestedReplacementTerm = new ReplacementTerm();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedReplacementTerm.setSystemAttributes(systemAttributes);

            requestedReplacementTerm.setDescription(description);

            requestedReplacementTerm.setExpression(expression);

            requestedReplacementTerm.setSteward(steward);

            requestedReplacementTerm.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedReplacementTerm.setStatus(TermRelationshipStatus.values()[0]);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ReplacementTerm returnedReplacementTerm = subjectAreaBeansToAccessOMRS.createReplacementTermRelationship(testuserid, requestedReplacementTerm);
            assertEquals(requestedReplacementTerm.getDescription(),returnedReplacementTerm.getDescription());

            assertEquals(requestedReplacementTerm.getExpression(),returnedReplacementTerm.getExpression());

            assertEquals(requestedReplacementTerm.getSteward(),returnedReplacementTerm.getSteward());

            assertEquals(requestedReplacementTerm.getSource(),returnedReplacementTerm.getSource());

            assertEquals(requestedReplacementTerm.getStatus(),returnedReplacementTerm.getStatus());

        }

        @Test
        public void testGetReplacementTerm() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetReplacementTerm";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ReplacementTerm");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ReplacedTerms");
            mockRelationship.setEntityTwoPropertyName("ReplacementTerms");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ReplacementTerm requestedReplacementTerm = new ReplacementTerm();

            requestedReplacementTerm.setDescription(description);

            requestedReplacementTerm.setExpression(expression);

            requestedReplacementTerm.setSteward(steward);

            requestedReplacementTerm.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedReplacementTerm.setStatus(TermRelationshipStatus.values()[0]);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ReplacementTerm returnedReplacementTerm = subjectAreaBeansToAccessOMRS.getReplacementTermRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedReplacementTerm.getDescription(),returnedReplacementTerm.getDescription());

            assertEquals(requestedReplacementTerm.getExpression(),returnedReplacementTerm.getExpression());

            assertEquals(requestedReplacementTerm.getSteward(),returnedReplacementTerm.getSteward());

            assertEquals(requestedReplacementTerm.getSource(),returnedReplacementTerm.getSource());

            assertEquals(requestedReplacementTerm.getStatus(),returnedReplacementTerm.getStatus());

        }
        @Test
        public void testUpdateReplacementTerm() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateReplacementTerm";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ReplacementTerm");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ReplacedTerms");
            mockRelationship.setEntityTwoPropertyName("ReplacementTerms");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ReplacementTerm requestedReplacementTerm = new ReplacementTerm();

            requestedReplacementTerm.setDescription(description);

            requestedReplacementTerm.setExpression(expression);

            requestedReplacementTerm.setSteward(steward);

            requestedReplacementTerm.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedReplacementTerm.setStatus(TermRelationshipStatus.values()[0]);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedReplacementTerm.setSystemAttributes(systemAttributes);


            ReplacementTerm returnedReplacementTerm = subjectAreaBeansToAccessOMRS.updateReplacementTermRelationship(testuserid, requestedReplacementTerm);
            assertEquals(requestedReplacementTerm.getDescription(),returnedReplacementTerm.getDescription());

            assertEquals(requestedReplacementTerm.getExpression(),returnedReplacementTerm.getExpression());

            assertEquals(requestedReplacementTerm.getSteward(),returnedReplacementTerm.getSteward());

            assertEquals(requestedReplacementTerm.getSource(),returnedReplacementTerm.getSource());

            assertEquals(requestedReplacementTerm.getStatus(),returnedReplacementTerm.getStatus());

        }

    @Test
        public void testCreateOrganizationalCapability() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateOrganizationalCapability";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("OrganizationalCapability");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("SupportsBusinessCapabilities");
            mockRelationship.setEntityTwoPropertyName("SupportingTeams");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("BusinessCapability");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Team");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            OrganizationalCapability requestedOrganizationalCapability = new OrganizationalCapability();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedOrganizationalCapability.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            OrganizationalCapability returnedOrganizationalCapability = subjectAreaBeansToAccessOMRS.createOrganizationalCapabilityRelationship(testuserid, requestedOrganizationalCapability);
        }

        @Test
        public void testGetOrganizationalCapability() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetOrganizationalCapability";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("OrganizationalCapability");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("SupportsBusinessCapabilities");
            mockRelationship.setEntityTwoPropertyName("SupportingTeams");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("BusinessCapability");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Team");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            OrganizationalCapability requestedOrganizationalCapability = new OrganizationalCapability();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            OrganizationalCapability returnedOrganizationalCapability = subjectAreaBeansToAccessOMRS.getOrganizationalCapabilityRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateOrganizationalCapability() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateOrganizationalCapability";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("OrganizationalCapability");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("SupportsBusinessCapabilities");
            mockRelationship.setEntityTwoPropertyName("SupportingTeams");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("BusinessCapability");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Team");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            OrganizationalCapability requestedOrganizationalCapability = new OrganizationalCapability();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedOrganizationalCapability.setSystemAttributes(systemAttributes);


            OrganizationalCapability returnedOrganizationalCapability = subjectAreaBeansToAccessOMRS.updateOrganizationalCapabilityRelationship(testuserid, requestedOrganizationalCapability);
        }

    @Test
        public void testCreateMetadataCohortPeer() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateMetadataCohortPeer";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date registrationDate = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(registrationDate);
            instanceProperties.setProperty("registrationDate", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("MetadataCohortPeer");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("RegisteredWithCohorts");
            mockRelationship.setEntityTwoPropertyName("CohortMembership");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("MetadataRepositoryCohort");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("CohortMember");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            MetadataCohortPeer requestedMetadataCohortPeer = new MetadataCohortPeer();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedMetadataCohortPeer.setSystemAttributes(systemAttributes);

            requestedMetadataCohortPeer.setRegistrationDate(registrationDate);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MetadataCohortPeer returnedMetadataCohortPeer = subjectAreaBeansToAccessOMRS.createMetadataCohortPeerRelationship(testuserid, requestedMetadataCohortPeer);
            assertEquals(requestedMetadataCohortPeer.getRegistrationDate(),returnedMetadataCohortPeer.getRegistrationDate());

        }

        @Test
        public void testGetMetadataCohortPeer() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetMetadataCohortPeer";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date registrationDate = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(registrationDate);
            instanceProperties.setProperty("registrationDate", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("MetadataCohortPeer");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("RegisteredWithCohorts");
            mockRelationship.setEntityTwoPropertyName("CohortMembership");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("MetadataRepositoryCohort");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("CohortMember");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            MetadataCohortPeer requestedMetadataCohortPeer = new MetadataCohortPeer();

            requestedMetadataCohortPeer.setRegistrationDate(registrationDate);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            MetadataCohortPeer returnedMetadataCohortPeer = subjectAreaBeansToAccessOMRS.getMetadataCohortPeerRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedMetadataCohortPeer.getRegistrationDate(),returnedMetadataCohortPeer.getRegistrationDate());

        }
        @Test
        public void testUpdateMetadataCohortPeer() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateMetadataCohortPeer";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date registrationDate = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(registrationDate);
            instanceProperties.setProperty("registrationDate", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("MetadataCohortPeer");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("RegisteredWithCohorts");
            mockRelationship.setEntityTwoPropertyName("CohortMembership");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("MetadataRepositoryCohort");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("CohortMember");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            MetadataCohortPeer requestedMetadataCohortPeer = new MetadataCohortPeer();

            requestedMetadataCohortPeer.setRegistrationDate(registrationDate);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedMetadataCohortPeer.setSystemAttributes(systemAttributes);


            MetadataCohortPeer returnedMetadataCohortPeer = subjectAreaBeansToAccessOMRS.updateMetadataCohortPeerRelationship(testuserid, requestedMetadataCohortPeer);
            assertEquals(requestedMetadataCohortPeer.getRegistrationDate(),returnedMetadataCohortPeer.getRegistrationDate());

        }

    @Test
        public void testCreateAttachedNoteLogEntry() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateAttachedNoteLogEntry";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AttachedNoteLogEntry");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Logs");
            mockRelationship.setEntityTwoPropertyName("Entries");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("NoteLog");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("NoteEntry");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AttachedNoteLogEntry requestedAttachedNoteLogEntry = new AttachedNoteLogEntry();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAttachedNoteLogEntry.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            AttachedNoteLogEntry returnedAttachedNoteLogEntry = subjectAreaBeansToAccessOMRS.createAttachedNoteLogEntryRelationship(testuserid, requestedAttachedNoteLogEntry);
        }

        @Test
        public void testGetAttachedNoteLogEntry() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetAttachedNoteLogEntry";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AttachedNoteLogEntry");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Logs");
            mockRelationship.setEntityTwoPropertyName("Entries");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("NoteLog");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("NoteEntry");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AttachedNoteLogEntry requestedAttachedNoteLogEntry = new AttachedNoteLogEntry();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            AttachedNoteLogEntry returnedAttachedNoteLogEntry = subjectAreaBeansToAccessOMRS.getAttachedNoteLogEntryRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateAttachedNoteLogEntry() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateAttachedNoteLogEntry";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AttachedNoteLogEntry");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Logs");
            mockRelationship.setEntityTwoPropertyName("Entries");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("NoteLog");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("NoteEntry");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AttachedNoteLogEntry requestedAttachedNoteLogEntry = new AttachedNoteLogEntry();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAttachedNoteLogEntry.setSystemAttributes(systemAttributes);


            AttachedNoteLogEntry returnedAttachedNoteLogEntry = subjectAreaBeansToAccessOMRS.updateAttachedNoteLogEntryRelationship(testuserid, requestedAttachedNoteLogEntry);
        }

    @Test
        public void testCreateAssetServerUse() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateAssetServerUse";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(ServerAssetUse.values()[0].name());
            instanceProperties.setProperty("useType", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AssetServerUse");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ConsumedBy");
            mockRelationship.setEntityTwoPropertyName("ConsumedAsset");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SoftwareServerCapability");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Asset");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AssetServerUse requestedAssetServerUse = new AssetServerUse();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAssetServerUse.setSystemAttributes(systemAttributes);

            requestedAssetServerUse.setDescription(description);

            EnumPropertyValue ServerAssetUseEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            ServerAssetUseEnumPropertyValue.setSymbolicName(ServerAssetUse.values()[0].name());
            instanceProperties.setProperty("useType", ServerAssetUseEnumPropertyValue);

            requestedAssetServerUse.setUseType(ServerAssetUse.values()[0]);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            AssetServerUse returnedAssetServerUse = subjectAreaBeansToAccessOMRS.createAssetServerUseRelationship(testuserid, requestedAssetServerUse);
            assertEquals(requestedAssetServerUse.getDescription(),returnedAssetServerUse.getDescription());

            assertEquals(requestedAssetServerUse.getUseType(),returnedAssetServerUse.getUseType());

        }

        @Test
        public void testGetAssetServerUse() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetAssetServerUse";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(ServerAssetUse.values()[0].name());
            instanceProperties.setProperty("useType", enumPropertyValue);

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AssetServerUse");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ConsumedBy");
            mockRelationship.setEntityTwoPropertyName("ConsumedAsset");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SoftwareServerCapability");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Asset");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AssetServerUse requestedAssetServerUse = new AssetServerUse();

            requestedAssetServerUse.setDescription(description);

            EnumPropertyValue ServerAssetUseEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            ServerAssetUseEnumPropertyValue.setSymbolicName(ServerAssetUse.values()[0].name());
            instanceProperties.setProperty("useType", ServerAssetUseEnumPropertyValue);

            requestedAssetServerUse.setUseType(ServerAssetUse.values()[0]);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            AssetServerUse returnedAssetServerUse = subjectAreaBeansToAccessOMRS.getAssetServerUseRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedAssetServerUse.getDescription(),returnedAssetServerUse.getDescription());

            assertEquals(requestedAssetServerUse.getUseType(),returnedAssetServerUse.getUseType());

        }
        @Test
        public void testUpdateAssetServerUse() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateAssetServerUse";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(ServerAssetUse.values()[0].name());
            instanceProperties.setProperty("useType", enumPropertyValue);

            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AssetServerUse");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ConsumedBy");
            mockRelationship.setEntityTwoPropertyName("ConsumedAsset");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SoftwareServerCapability");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Asset");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AssetServerUse requestedAssetServerUse = new AssetServerUse();

            requestedAssetServerUse.setDescription(description);

            EnumPropertyValue ServerAssetUseEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            ServerAssetUseEnumPropertyValue.setSymbolicName(ServerAssetUse.values()[0].name());
            instanceProperties.setProperty("useType", ServerAssetUseEnumPropertyValue);

            requestedAssetServerUse.setUseType(ServerAssetUse.values()[0]);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAssetServerUse.setSystemAttributes(systemAttributes);


            AssetServerUse returnedAssetServerUse = subjectAreaBeansToAccessOMRS.updateAssetServerUseRelationship(testuserid, requestedAssetServerUse);
            assertEquals(requestedAssetServerUse.getDescription(),returnedAssetServerUse.getDescription());

            assertEquals(requestedAssetServerUse.getUseType(),returnedAssetServerUse.getUseType());

        }

    @Test
        public void testCreateRuntimeForProcess() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateRuntimeForProcess";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("RuntimeForProcess");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ImplementingApplication");
            mockRelationship.setEntityTwoPropertyName("ImplementedProcesses");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Application");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Process");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            RuntimeForProcess requestedRuntimeForProcess = new RuntimeForProcess();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedRuntimeForProcess.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            RuntimeForProcess returnedRuntimeForProcess = subjectAreaBeansToAccessOMRS.createRuntimeForProcessRelationship(testuserid, requestedRuntimeForProcess);
        }

        @Test
        public void testGetRuntimeForProcess() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetRuntimeForProcess";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("RuntimeForProcess");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ImplementingApplication");
            mockRelationship.setEntityTwoPropertyName("ImplementedProcesses");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Application");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Process");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            RuntimeForProcess requestedRuntimeForProcess = new RuntimeForProcess();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            RuntimeForProcess returnedRuntimeForProcess = subjectAreaBeansToAccessOMRS.getRuntimeForProcessRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateRuntimeForProcess() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateRuntimeForProcess";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("RuntimeForProcess");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ImplementingApplication");
            mockRelationship.setEntityTwoPropertyName("ImplementedProcesses");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Application");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Process");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            RuntimeForProcess requestedRuntimeForProcess = new RuntimeForProcess();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedRuntimeForProcess.setSystemAttributes(systemAttributes);


            RuntimeForProcess returnedRuntimeForProcess = subjectAreaBeansToAccessOMRS.updateRuntimeForProcessRelationship(testuserid, requestedRuntimeForProcess);
        }

    @Test
        public void testCreateNestedLocation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateNestedLocation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("NestedLocation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("GroupingLocation");
            mockRelationship.setEntityTwoPropertyName("NestedLocation");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Location");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Location");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            NestedLocation requestedNestedLocation = new NestedLocation();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedNestedLocation.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            NestedLocation returnedNestedLocation = subjectAreaBeansToAccessOMRS.createNestedLocationRelationship(testuserid, requestedNestedLocation);
        }

        @Test
        public void testGetNestedLocation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetNestedLocation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("NestedLocation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("GroupingLocation");
            mockRelationship.setEntityTwoPropertyName("NestedLocation");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Location");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Location");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            NestedLocation requestedNestedLocation = new NestedLocation();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            NestedLocation returnedNestedLocation = subjectAreaBeansToAccessOMRS.getNestedLocationRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateNestedLocation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateNestedLocation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("NestedLocation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("GroupingLocation");
            mockRelationship.setEntityTwoPropertyName("NestedLocation");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Location");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Location");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            NestedLocation requestedNestedLocation = new NestedLocation();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedNestedLocation.setSystemAttributes(systemAttributes);


            NestedLocation returnedNestedLocation = subjectAreaBeansToAccessOMRS.updateNestedLocationRelationship(testuserid, requestedNestedLocation);
        }

    @Test
        public void testCreateStaffAssignment() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateStaffAssignment";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String responsibilityType = "string0";
            primitivePropertyValue.setPrimitiveValue(responsibilityType);
            instanceProperties.setProperty("responsibilityType", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("StaffAssignment");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Responsibilities");
            mockRelationship.setEntityTwoPropertyName("Staff");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Person");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            StaffAssignment requestedStaffAssignment = new StaffAssignment();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedStaffAssignment.setSystemAttributes(systemAttributes);

            requestedStaffAssignment.setResponsibilityType(responsibilityType);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            StaffAssignment returnedStaffAssignment = subjectAreaBeansToAccessOMRS.createStaffAssignmentRelationship(testuserid, requestedStaffAssignment);
            assertEquals(requestedStaffAssignment.getResponsibilityType(),returnedStaffAssignment.getResponsibilityType());

        }

        @Test
        public void testGetStaffAssignment() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetStaffAssignment";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String responsibilityType = "string0";
            primitivePropertyValue.setPrimitiveValue(responsibilityType);
            instanceProperties.setProperty("responsibilityType", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("StaffAssignment");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Responsibilities");
            mockRelationship.setEntityTwoPropertyName("Staff");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Person");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            StaffAssignment requestedStaffAssignment = new StaffAssignment();

            requestedStaffAssignment.setResponsibilityType(responsibilityType);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            StaffAssignment returnedStaffAssignment = subjectAreaBeansToAccessOMRS.getStaffAssignmentRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedStaffAssignment.getResponsibilityType(),returnedStaffAssignment.getResponsibilityType());

        }
        @Test
        public void testUpdateStaffAssignment() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateStaffAssignment";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String responsibilityType = "string0";
            primitivePropertyValue.setPrimitiveValue(responsibilityType);
            instanceProperties.setProperty("responsibilityType", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("StaffAssignment");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Responsibilities");
            mockRelationship.setEntityTwoPropertyName("Staff");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Person");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            StaffAssignment requestedStaffAssignment = new StaffAssignment();

            requestedStaffAssignment.setResponsibilityType(responsibilityType);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedStaffAssignment.setSystemAttributes(systemAttributes);


            StaffAssignment returnedStaffAssignment = subjectAreaBeansToAccessOMRS.updateStaffAssignmentRelationship(testuserid, requestedStaffAssignment);
            assertEquals(requestedStaffAssignment.getResponsibilityType(),returnedStaffAssignment.getResponsibilityType());

        }

    @Test
        public void testCreateLinkedFile() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateLinkedFile";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("LinkedFile");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LinkedFolders");
            mockRelationship.setEntityTwoPropertyName("LinkedFiles");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("FileFolder");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DataFile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            LinkedFile requestedLinkedFile = new LinkedFile();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedLinkedFile.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            LinkedFile returnedLinkedFile = subjectAreaBeansToAccessOMRS.createLinkedFileRelationship(testuserid, requestedLinkedFile);
        }

        @Test
        public void testGetLinkedFile() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetLinkedFile";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("LinkedFile");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LinkedFolders");
            mockRelationship.setEntityTwoPropertyName("LinkedFiles");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("FileFolder");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DataFile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            LinkedFile requestedLinkedFile = new LinkedFile();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            LinkedFile returnedLinkedFile = subjectAreaBeansToAccessOMRS.getLinkedFileRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateLinkedFile() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateLinkedFile";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("LinkedFile");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LinkedFolders");
            mockRelationship.setEntityTwoPropertyName("LinkedFiles");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("FileFolder");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DataFile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            LinkedFile requestedLinkedFile = new LinkedFile();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedLinkedFile.setSystemAttributes(systemAttributes);


            LinkedFile returnedLinkedFile = subjectAreaBeansToAccessOMRS.updateLinkedFileRelationship(testuserid, requestedLinkedFile);
        }

    @Test
        public void testCreateTermCategorization() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateTermCategorization";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("TermCategorization");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Categories");
            mockRelationship.setEntityTwoPropertyName("Terms");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryCategory");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            TermCategorization requestedTermCategorization = new TermCategorization();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedTermCategorization.setSystemAttributes(systemAttributes);

            requestedTermCategorization.setDescription(description);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedTermCategorization.setStatus(TermRelationshipStatus.values()[0]);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            TermCategorization returnedTermCategorization = subjectAreaBeansToAccessOMRS.createTermCategorizationRelationship(testuserid, requestedTermCategorization);
            assertEquals(requestedTermCategorization.getDescription(),returnedTermCategorization.getDescription());

            assertEquals(requestedTermCategorization.getStatus(),returnedTermCategorization.getStatus());

        }

        @Test
        public void testGetTermCategorization() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetTermCategorization";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("TermCategorization");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Categories");
            mockRelationship.setEntityTwoPropertyName("Terms");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryCategory");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            TermCategorization requestedTermCategorization = new TermCategorization();

            requestedTermCategorization.setDescription(description);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedTermCategorization.setStatus(TermRelationshipStatus.values()[0]);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            TermCategorization returnedTermCategorization = subjectAreaBeansToAccessOMRS.getTermCategorizationRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedTermCategorization.getDescription(),returnedTermCategorization.getDescription());

            assertEquals(requestedTermCategorization.getStatus(),returnedTermCategorization.getStatus());

        }
        @Test
        public void testUpdateTermCategorization() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateTermCategorization";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("TermCategorization");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Categories");
            mockRelationship.setEntityTwoPropertyName("Terms");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryCategory");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            TermCategorization requestedTermCategorization = new TermCategorization();

            requestedTermCategorization.setDescription(description);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedTermCategorization.setStatus(TermRelationshipStatus.values()[0]);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedTermCategorization.setSystemAttributes(systemAttributes);


            TermCategorization returnedTermCategorization = subjectAreaBeansToAccessOMRS.updateTermCategorizationRelationship(testuserid, requestedTermCategorization);
            assertEquals(requestedTermCategorization.getDescription(),returnedTermCategorization.getDescription());

            assertEquals(requestedTermCategorization.getStatus(),returnedTermCategorization.getStatus());

        }

    @Test
        public void testCreateZoneMembership() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateZoneMembership";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ZoneMembership");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Zones");
            mockRelationship.setEntityTwoPropertyName("ZoneMembers");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceZone");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Asset");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ZoneMembership requestedZoneMembership = new ZoneMembership();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedZoneMembership.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ZoneMembership returnedZoneMembership = subjectAreaBeansToAccessOMRS.createZoneMembershipRelationship(testuserid, requestedZoneMembership);
        }

        @Test
        public void testGetZoneMembership() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetZoneMembership";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ZoneMembership");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Zones");
            mockRelationship.setEntityTwoPropertyName("ZoneMembers");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceZone");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Asset");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ZoneMembership requestedZoneMembership = new ZoneMembership();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ZoneMembership returnedZoneMembership = subjectAreaBeansToAccessOMRS.getZoneMembershipRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateZoneMembership() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateZoneMembership";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ZoneMembership");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Zones");
            mockRelationship.setEntityTwoPropertyName("ZoneMembers");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceZone");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Asset");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ZoneMembership requestedZoneMembership = new ZoneMembership();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedZoneMembership.setSystemAttributes(systemAttributes);


            ZoneMembership returnedZoneMembership = subjectAreaBeansToAccessOMRS.updateZoneMembershipRelationship(testuserid, requestedZoneMembership);
        }

    @Test
        public void testCreateAPIEndpoint() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateAPIEndpoint";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("APIEndpoint");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("SupportedAPIs");
            mockRelationship.setEntityTwoPropertyName("AccessEndpoints");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("DeployedAPI");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Endpoint");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            APIEndpoint requestedAPIEndpoint = new APIEndpoint();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAPIEndpoint.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            APIEndpoint returnedAPIEndpoint = subjectAreaBeansToAccessOMRS.createAPIEndpointRelationship(testuserid, requestedAPIEndpoint);
        }

        @Test
        public void testGetAPIEndpoint() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetAPIEndpoint";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("APIEndpoint");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("SupportedAPIs");
            mockRelationship.setEntityTwoPropertyName("AccessEndpoints");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("DeployedAPI");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Endpoint");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            APIEndpoint requestedAPIEndpoint = new APIEndpoint();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            APIEndpoint returnedAPIEndpoint = subjectAreaBeansToAccessOMRS.getAPIEndpointRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateAPIEndpoint() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateAPIEndpoint";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("APIEndpoint");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("SupportedAPIs");
            mockRelationship.setEntityTwoPropertyName("AccessEndpoints");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("DeployedAPI");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Endpoint");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            APIEndpoint requestedAPIEndpoint = new APIEndpoint();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAPIEndpoint.setSystemAttributes(systemAttributes);


            APIEndpoint returnedAPIEndpoint = subjectAreaBeansToAccessOMRS.updateAPIEndpointRelationship(testuserid, requestedAPIEndpoint);
        }

    @Test
        public void testCreateConnectionEndpoint() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateConnectionEndpoint";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ConnectionEndpoint");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ConnectionEndpoint");
            mockRelationship.setEntityTwoPropertyName("Connections");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Endpoint");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Connection");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ConnectionEndpoint requestedConnectionEndpoint = new ConnectionEndpoint();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedConnectionEndpoint.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ConnectionEndpoint returnedConnectionEndpoint = subjectAreaBeansToAccessOMRS.createConnectionEndpointRelationship(testuserid, requestedConnectionEndpoint);
        }

        @Test
        public void testGetConnectionEndpoint() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetConnectionEndpoint";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ConnectionEndpoint");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ConnectionEndpoint");
            mockRelationship.setEntityTwoPropertyName("Connections");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Endpoint");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Connection");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ConnectionEndpoint requestedConnectionEndpoint = new ConnectionEndpoint();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ConnectionEndpoint returnedConnectionEndpoint = subjectAreaBeansToAccessOMRS.getConnectionEndpointRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateConnectionEndpoint() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateConnectionEndpoint";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ConnectionEndpoint");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ConnectionEndpoint");
            mockRelationship.setEntityTwoPropertyName("Connections");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Endpoint");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Connection");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ConnectionEndpoint requestedConnectionEndpoint = new ConnectionEndpoint();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedConnectionEndpoint.setSystemAttributes(systemAttributes);


            ConnectionEndpoint returnedConnectionEndpoint = subjectAreaBeansToAccessOMRS.updateConnectionEndpointRelationship(testuserid, requestedConnectionEndpoint);
        }

    @Test
        public void testCreateCategoryAnchor() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateCategoryAnchor";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("CategoryAnchor");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Anchor");
            mockRelationship.setEntityTwoPropertyName("Categories");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Glossary");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryCategory");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            CategoryAnchor requestedCategoryAnchor = new CategoryAnchor();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedCategoryAnchor.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            CategoryAnchor returnedCategoryAnchor = subjectAreaBeansToAccessOMRS.createCategoryAnchorRelationship(testuserid, requestedCategoryAnchor);
        }

        @Test
        public void testGetCategoryAnchor() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetCategoryAnchor";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("CategoryAnchor");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Anchor");
            mockRelationship.setEntityTwoPropertyName("Categories");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Glossary");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryCategory");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            CategoryAnchor requestedCategoryAnchor = new CategoryAnchor();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            CategoryAnchor returnedCategoryAnchor = subjectAreaBeansToAccessOMRS.getCategoryAnchorRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateCategoryAnchor() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateCategoryAnchor";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("CategoryAnchor");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Anchor");
            mockRelationship.setEntityTwoPropertyName("Categories");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Glossary");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryCategory");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            CategoryAnchor requestedCategoryAnchor = new CategoryAnchor();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedCategoryAnchor.setSystemAttributes(systemAttributes);


            CategoryAnchor returnedCategoryAnchor = subjectAreaBeansToAccessOMRS.updateCategoryAnchorRelationship(testuserid, requestedCategoryAnchor);
        }

    @Test
        public void testCreateProjectTeam() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateProjectTeam";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date teamRole = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(teamRole);
            instanceProperties.setProperty("teamRole", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProjectTeam");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ProjectFocus");
            mockRelationship.setEntityTwoPropertyName("SupportingTeams");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Project");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Team");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProjectTeam requestedProjectTeam = new ProjectTeam();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedProjectTeam.setSystemAttributes(systemAttributes);

            requestedProjectTeam.setTeamRole(teamRole);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ProjectTeam returnedProjectTeam = subjectAreaBeansToAccessOMRS.createProjectTeamRelationship(testuserid, requestedProjectTeam);
            assertEquals(requestedProjectTeam.getTeamRole(),returnedProjectTeam.getTeamRole());

        }

        @Test
        public void testGetProjectTeam() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetProjectTeam";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date teamRole = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(teamRole);
            instanceProperties.setProperty("teamRole", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProjectTeam");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ProjectFocus");
            mockRelationship.setEntityTwoPropertyName("SupportingTeams");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Project");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Team");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProjectTeam requestedProjectTeam = new ProjectTeam();

            requestedProjectTeam.setTeamRole(teamRole);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ProjectTeam returnedProjectTeam = subjectAreaBeansToAccessOMRS.getProjectTeamRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedProjectTeam.getTeamRole(),returnedProjectTeam.getTeamRole());

        }
        @Test
        public void testUpdateProjectTeam() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateProjectTeam";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date teamRole = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(teamRole);
            instanceProperties.setProperty("teamRole", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProjectTeam");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ProjectFocus");
            mockRelationship.setEntityTwoPropertyName("SupportingTeams");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Project");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Team");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProjectTeam requestedProjectTeam = new ProjectTeam();

            requestedProjectTeam.setTeamRole(teamRole);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedProjectTeam.setSystemAttributes(systemAttributes);


            ProjectTeam returnedProjectTeam = subjectAreaBeansToAccessOMRS.updateProjectTeamRelationship(testuserid, requestedProjectTeam);
            assertEquals(requestedProjectTeam.getTeamRole(),returnedProjectTeam.getTeamRole());

        }

    @Test
        public void testCreateProcessOutput() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateProcessOutput";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProcessOutput");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ProducedByProcess");
            mockRelationship.setEntityTwoPropertyName("ProcessOutputData");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Process");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DataSet");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProcessOutput requestedProcessOutput = new ProcessOutput();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedProcessOutput.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ProcessOutput returnedProcessOutput = subjectAreaBeansToAccessOMRS.createProcessOutputRelationship(testuserid, requestedProcessOutput);
        }

        @Test
        public void testGetProcessOutput() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetProcessOutput";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProcessOutput");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ProducedByProcess");
            mockRelationship.setEntityTwoPropertyName("ProcessOutputData");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Process");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DataSet");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProcessOutput requestedProcessOutput = new ProcessOutput();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ProcessOutput returnedProcessOutput = subjectAreaBeansToAccessOMRS.getProcessOutputRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateProcessOutput() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateProcessOutput";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProcessOutput");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ProducedByProcess");
            mockRelationship.setEntityTwoPropertyName("ProcessOutputData");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Process");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DataSet");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProcessOutput requestedProcessOutput = new ProcessOutput();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedProcessOutput.setSystemAttributes(systemAttributes);


            ProcessOutput returnedProcessOutput = subjectAreaBeansToAccessOMRS.updateProcessOutputRelationship(testuserid, requestedProcessOutput);
        }

    @Test
        public void testCreateAPIOperations() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateAPIOperations";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("APIOperations");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("UsedIn");
            mockRelationship.setEntityTwoPropertyName("Contains");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("APISchemaType");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("APIOperation");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            APIOperations requestedAPIOperations = new APIOperations();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAPIOperations.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            APIOperations returnedAPIOperations = subjectAreaBeansToAccessOMRS.createAPIOperationsRelationship(testuserid, requestedAPIOperations);
        }

        @Test
        public void testGetAPIOperations() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetAPIOperations";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("APIOperations");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("UsedIn");
            mockRelationship.setEntityTwoPropertyName("Contains");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("APISchemaType");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("APIOperation");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            APIOperations requestedAPIOperations = new APIOperations();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            APIOperations returnedAPIOperations = subjectAreaBeansToAccessOMRS.getAPIOperationsRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateAPIOperations() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateAPIOperations";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("APIOperations");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("UsedIn");
            mockRelationship.setEntityTwoPropertyName("Contains");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("APISchemaType");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("APIOperation");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            APIOperations requestedAPIOperations = new APIOperations();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAPIOperations.setSystemAttributes(systemAttributes);


            APIOperations returnedAPIOperations = subjectAreaBeansToAccessOMRS.updateAPIOperationsRelationship(testuserid, requestedAPIOperations);
        }

    @Test
        public void testCreateGovernancePolicyLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateGovernancePolicyLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernancePolicyLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LinkingPolicies");
            mockRelationship.setEntityTwoPropertyName("LinkedPolicies");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernancePolicy");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GovernancePolicy");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernancePolicyLink requestedGovernancePolicyLink = new GovernancePolicyLink();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedGovernancePolicyLink.setSystemAttributes(systemAttributes);

            requestedGovernancePolicyLink.setDescription(description);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            GovernancePolicyLink returnedGovernancePolicyLink = subjectAreaBeansToAccessOMRS.createGovernancePolicyLinkRelationship(testuserid, requestedGovernancePolicyLink);
            assertEquals(requestedGovernancePolicyLink.getDescription(),returnedGovernancePolicyLink.getDescription());

        }

        @Test
        public void testGetGovernancePolicyLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetGovernancePolicyLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernancePolicyLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LinkingPolicies");
            mockRelationship.setEntityTwoPropertyName("LinkedPolicies");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernancePolicy");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GovernancePolicy");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernancePolicyLink requestedGovernancePolicyLink = new GovernancePolicyLink();

            requestedGovernancePolicyLink.setDescription(description);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            GovernancePolicyLink returnedGovernancePolicyLink = subjectAreaBeansToAccessOMRS.getGovernancePolicyLinkRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedGovernancePolicyLink.getDescription(),returnedGovernancePolicyLink.getDescription());

        }
        @Test
        public void testUpdateGovernancePolicyLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGovernancePolicyLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernancePolicyLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LinkingPolicies");
            mockRelationship.setEntityTwoPropertyName("LinkedPolicies");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernancePolicy");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GovernancePolicy");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernancePolicyLink requestedGovernancePolicyLink = new GovernancePolicyLink();

            requestedGovernancePolicyLink.setDescription(description);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedGovernancePolicyLink.setSystemAttributes(systemAttributes);


            GovernancePolicyLink returnedGovernancePolicyLink = subjectAreaBeansToAccessOMRS.updateGovernancePolicyLinkRelationship(testuserid, requestedGovernancePolicyLink);
            assertEquals(requestedGovernancePolicyLink.getDescription(),returnedGovernancePolicyLink.getDescription());

        }

    @Test
        public void testCreateResponsibilityStaffContact() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateResponsibilityStaffContact";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String context = "string0";
            primitivePropertyValue.setPrimitiveValue(context);
            instanceProperties.setProperty("context", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ResponsibilityStaffContact");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ContactFor");
            mockRelationship.setEntityTwoPropertyName("AssignedStaff");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceResponsibility");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ActorProfile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ResponsibilityStaffContact requestedResponsibilityStaffContact = new ResponsibilityStaffContact();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedResponsibilityStaffContact.setSystemAttributes(systemAttributes);

            requestedResponsibilityStaffContact.setContext(context);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ResponsibilityStaffContact returnedResponsibilityStaffContact = subjectAreaBeansToAccessOMRS.createResponsibilityStaffContactRelationship(testuserid, requestedResponsibilityStaffContact);
            assertEquals(requestedResponsibilityStaffContact.getContext(),returnedResponsibilityStaffContact.getContext());

        }

        @Test
        public void testGetResponsibilityStaffContact() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetResponsibilityStaffContact";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String context = "string0";
            primitivePropertyValue.setPrimitiveValue(context);
            instanceProperties.setProperty("context", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ResponsibilityStaffContact");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ContactFor");
            mockRelationship.setEntityTwoPropertyName("AssignedStaff");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceResponsibility");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ActorProfile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ResponsibilityStaffContact requestedResponsibilityStaffContact = new ResponsibilityStaffContact();

            requestedResponsibilityStaffContact.setContext(context);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ResponsibilityStaffContact returnedResponsibilityStaffContact = subjectAreaBeansToAccessOMRS.getResponsibilityStaffContactRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedResponsibilityStaffContact.getContext(),returnedResponsibilityStaffContact.getContext());

        }
        @Test
        public void testUpdateResponsibilityStaffContact() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateResponsibilityStaffContact";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String context = "string0";
            primitivePropertyValue.setPrimitiveValue(context);
            instanceProperties.setProperty("context", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ResponsibilityStaffContact");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ContactFor");
            mockRelationship.setEntityTwoPropertyName("AssignedStaff");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceResponsibility");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ActorProfile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ResponsibilityStaffContact requestedResponsibilityStaffContact = new ResponsibilityStaffContact();

            requestedResponsibilityStaffContact.setContext(context);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedResponsibilityStaffContact.setSystemAttributes(systemAttributes);


            ResponsibilityStaffContact returnedResponsibilityStaffContact = subjectAreaBeansToAccessOMRS.updateResponsibilityStaffContactRelationship(testuserid, requestedResponsibilityStaffContact);
            assertEquals(requestedResponsibilityStaffContact.getContext(),returnedResponsibilityStaffContact.getContext());

        }

    @Test
        public void testCreatePeer() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreatePeer";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("Peer");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Peers");
            mockRelationship.setEntityTwoPropertyName("Peers");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("ActorProfile");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ActorProfile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Peer requestedPeer = new Peer();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedPeer.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            Peer returnedPeer = subjectAreaBeansToAccessOMRS.createPeerRelationship(testuserid, requestedPeer);
        }

        @Test
        public void testGetPeer() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetPeer";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("Peer");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Peers");
            mockRelationship.setEntityTwoPropertyName("Peers");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("ActorProfile");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ActorProfile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Peer requestedPeer = new Peer();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            Peer returnedPeer = subjectAreaBeansToAccessOMRS.getPeerRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdatePeer() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdatePeer";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("Peer");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Peers");
            mockRelationship.setEntityTwoPropertyName("Peers");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("ActorProfile");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ActorProfile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Peer requestedPeer = new Peer();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedPeer.setSystemAttributes(systemAttributes);


            Peer returnedPeer = subjectAreaBeansToAccessOMRS.updatePeerRelationship(testuserid, requestedPeer);
        }

    @Test
        public void testCreateTermTYPEDBYRelationship() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateTermTYPEDBYRelationship";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string1";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string2";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("TermTYPEDBYRelationship");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("AttributesTypedBy");
            mockRelationship.setEntityTwoPropertyName("Types");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            TermTYPEDBYRelationship requestedTermTYPEDBYRelationship = new TermTYPEDBYRelationship();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedTermTYPEDBYRelationship.setSystemAttributes(systemAttributes);

            requestedTermTYPEDBYRelationship.setDescription(description);

            requestedTermTYPEDBYRelationship.setSteward(steward);

            requestedTermTYPEDBYRelationship.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedTermTYPEDBYRelationship.setStatus(TermRelationshipStatus.values()[0]);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            TermTYPEDBYRelationship returnedTermTYPEDBYRelationship = subjectAreaBeansToAccessOMRS.createTermTYPEDBYRelationshipRelationship(testuserid, requestedTermTYPEDBYRelationship);
            assertEquals(requestedTermTYPEDBYRelationship.getDescription(),returnedTermTYPEDBYRelationship.getDescription());

            assertEquals(requestedTermTYPEDBYRelationship.getSteward(),returnedTermTYPEDBYRelationship.getSteward());

            assertEquals(requestedTermTYPEDBYRelationship.getSource(),returnedTermTYPEDBYRelationship.getSource());

            assertEquals(requestedTermTYPEDBYRelationship.getStatus(),returnedTermTYPEDBYRelationship.getStatus());

        }

        @Test
        public void testGetTermTYPEDBYRelationship() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetTermTYPEDBYRelationship";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string1";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string2";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("TermTYPEDBYRelationship");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("AttributesTypedBy");
            mockRelationship.setEntityTwoPropertyName("Types");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            TermTYPEDBYRelationship requestedTermTYPEDBYRelationship = new TermTYPEDBYRelationship();

            requestedTermTYPEDBYRelationship.setDescription(description);

            requestedTermTYPEDBYRelationship.setSteward(steward);

            requestedTermTYPEDBYRelationship.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedTermTYPEDBYRelationship.setStatus(TermRelationshipStatus.values()[0]);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            TermTYPEDBYRelationship returnedTermTYPEDBYRelationship = subjectAreaBeansToAccessOMRS.getTermTYPEDBYRelationshipRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedTermTYPEDBYRelationship.getDescription(),returnedTermTYPEDBYRelationship.getDescription());

            assertEquals(requestedTermTYPEDBYRelationship.getSteward(),returnedTermTYPEDBYRelationship.getSteward());

            assertEquals(requestedTermTYPEDBYRelationship.getSource(),returnedTermTYPEDBYRelationship.getSource());

            assertEquals(requestedTermTYPEDBYRelationship.getStatus(),returnedTermTYPEDBYRelationship.getStatus());

        }
        @Test
        public void testUpdateTermTYPEDBYRelationship() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateTermTYPEDBYRelationship";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string1";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string2";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("TermTYPEDBYRelationship");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("AttributesTypedBy");
            mockRelationship.setEntityTwoPropertyName("Types");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            TermTYPEDBYRelationship requestedTermTYPEDBYRelationship = new TermTYPEDBYRelationship();

            requestedTermTYPEDBYRelationship.setDescription(description);

            requestedTermTYPEDBYRelationship.setSteward(steward);

            requestedTermTYPEDBYRelationship.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedTermTYPEDBYRelationship.setStatus(TermRelationshipStatus.values()[0]);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedTermTYPEDBYRelationship.setSystemAttributes(systemAttributes);


            TermTYPEDBYRelationship returnedTermTYPEDBYRelationship = subjectAreaBeansToAccessOMRS.updateTermTYPEDBYRelationshipRelationship(testuserid, requestedTermTYPEDBYRelationship);
            assertEquals(requestedTermTYPEDBYRelationship.getDescription(),returnedTermTYPEDBYRelationship.getDescription());

            assertEquals(requestedTermTYPEDBYRelationship.getSteward(),returnedTermTYPEDBYRelationship.getSteward());

            assertEquals(requestedTermTYPEDBYRelationship.getSource(),returnedTermTYPEDBYRelationship.getSource());

            assertEquals(requestedTermTYPEDBYRelationship.getStatus(),returnedTermTYPEDBYRelationship.getStatus());

        }

    @Test
        public void testCreateMapFromElementType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateMapFromElementType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("MapFromElementType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ParentMapFrom");
            mockRelationship.setEntityTwoPropertyName("MapFromElement");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("MapSchemaType");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            MapFromElementType requestedMapFromElementType = new MapFromElementType();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedMapFromElementType.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapFromElementType returnedMapFromElementType = subjectAreaBeansToAccessOMRS.createMapFromElementTypeRelationship(testuserid, requestedMapFromElementType);
        }

        @Test
        public void testGetMapFromElementType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetMapFromElementType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("MapFromElementType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ParentMapFrom");
            mockRelationship.setEntityTwoPropertyName("MapFromElement");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("MapSchemaType");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            MapFromElementType requestedMapFromElementType = new MapFromElementType();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            MapFromElementType returnedMapFromElementType = subjectAreaBeansToAccessOMRS.getMapFromElementTypeRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateMapFromElementType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateMapFromElementType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("MapFromElementType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ParentMapFrom");
            mockRelationship.setEntityTwoPropertyName("MapFromElement");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("MapSchemaType");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            MapFromElementType requestedMapFromElementType = new MapFromElementType();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedMapFromElementType.setSystemAttributes(systemAttributes);


            MapFromElementType returnedMapFromElementType = subjectAreaBeansToAccessOMRS.updateMapFromElementTypeRelationship(testuserid, requestedMapFromElementType);
        }

    @Test
        public void testCreateCertification() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateCertification";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String certificateGUID = "string0";
            primitivePropertyValue.setPrimitiveValue(certificateGUID);
            instanceProperties.setProperty("certificateGUID", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date start = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(start);
            instanceProperties.setProperty("start", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date end = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(end);
            instanceProperties.setProperty("end", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String conditions = "string3";
            primitivePropertyValue.setPrimitiveValue(conditions);
            instanceProperties.setProperty("conditions", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String certifiedBy = "string4";
            primitivePropertyValue.setPrimitiveValue(certifiedBy);
            instanceProperties.setProperty("certifiedBy", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String custodian = "string5";
            primitivePropertyValue.setPrimitiveValue(custodian);
            instanceProperties.setProperty("custodian", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String recipient = "string6";
            primitivePropertyValue.setPrimitiveValue(recipient);
            instanceProperties.setProperty("recipient", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String notes = "string7";
            primitivePropertyValue.setPrimitiveValue(notes);
            instanceProperties.setProperty("notes", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("Certification");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Certifies");
            mockRelationship.setEntityTwoPropertyName("Certifications");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("CertificationType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Certification requestedCertification = new Certification();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedCertification.setSystemAttributes(systemAttributes);

            requestedCertification.setCertificateGUID(certificateGUID);

            requestedCertification.setStart(start);

            requestedCertification.setEnd(end);

            requestedCertification.setConditions(conditions);

            requestedCertification.setCertifiedBy(certifiedBy);

            requestedCertification.setCustodian(custodian);

            requestedCertification.setRecipient(recipient);

            requestedCertification.setNotes(notes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            Certification returnedCertification = subjectAreaBeansToAccessOMRS.createCertificationRelationship(testuserid, requestedCertification);
            assertEquals(requestedCertification.getCertificateGUID(),returnedCertification.getCertificateGUID());

            assertEquals(requestedCertification.getStart(),returnedCertification.getStart());

            assertEquals(requestedCertification.getEnd(),returnedCertification.getEnd());

            assertEquals(requestedCertification.getConditions(),returnedCertification.getConditions());

            assertEquals(requestedCertification.getCertifiedBy(),returnedCertification.getCertifiedBy());

            assertEquals(requestedCertification.getCustodian(),returnedCertification.getCustodian());

            assertEquals(requestedCertification.getRecipient(),returnedCertification.getRecipient());

            assertEquals(requestedCertification.getNotes(),returnedCertification.getNotes());

        }

        @Test
        public void testGetCertification() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetCertification";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String certificateGUID = "string0";
            primitivePropertyValue.setPrimitiveValue(certificateGUID);
            instanceProperties.setProperty("certificateGUID", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date start = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(start);
            instanceProperties.setProperty("start", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date end = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(end);
            instanceProperties.setProperty("end", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String conditions = "string3";
            primitivePropertyValue.setPrimitiveValue(conditions);
            instanceProperties.setProperty("conditions", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String certifiedBy = "string4";
            primitivePropertyValue.setPrimitiveValue(certifiedBy);
            instanceProperties.setProperty("certifiedBy", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String custodian = "string5";
            primitivePropertyValue.setPrimitiveValue(custodian);
            instanceProperties.setProperty("custodian", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String recipient = "string6";
            primitivePropertyValue.setPrimitiveValue(recipient);
            instanceProperties.setProperty("recipient", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String notes = "string7";
            primitivePropertyValue.setPrimitiveValue(notes);
            instanceProperties.setProperty("notes", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("Certification");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Certifies");
            mockRelationship.setEntityTwoPropertyName("Certifications");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("CertificationType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Certification requestedCertification = new Certification();

            requestedCertification.setCertificateGUID(certificateGUID);

            requestedCertification.setStart(start);

            requestedCertification.setEnd(end);

            requestedCertification.setConditions(conditions);

            requestedCertification.setCertifiedBy(certifiedBy);

            requestedCertification.setCustodian(custodian);

            requestedCertification.setRecipient(recipient);

            requestedCertification.setNotes(notes);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            Certification returnedCertification = subjectAreaBeansToAccessOMRS.getCertificationRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedCertification.getCertificateGUID(),returnedCertification.getCertificateGUID());

            assertEquals(requestedCertification.getStart(),returnedCertification.getStart());

            assertEquals(requestedCertification.getEnd(),returnedCertification.getEnd());

            assertEquals(requestedCertification.getConditions(),returnedCertification.getConditions());

            assertEquals(requestedCertification.getCertifiedBy(),returnedCertification.getCertifiedBy());

            assertEquals(requestedCertification.getCustodian(),returnedCertification.getCustodian());

            assertEquals(requestedCertification.getRecipient(),returnedCertification.getRecipient());

            assertEquals(requestedCertification.getNotes(),returnedCertification.getNotes());

        }
        @Test
        public void testUpdateCertification() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateCertification";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String certificateGUID = "string0";
            primitivePropertyValue.setPrimitiveValue(certificateGUID);
            instanceProperties.setProperty("certificateGUID", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date start = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(start);
            instanceProperties.setProperty("start", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date end = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(end);
            instanceProperties.setProperty("end", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String conditions = "string3";
            primitivePropertyValue.setPrimitiveValue(conditions);
            instanceProperties.setProperty("conditions", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String certifiedBy = "string4";
            primitivePropertyValue.setPrimitiveValue(certifiedBy);
            instanceProperties.setProperty("certifiedBy", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String custodian = "string5";
            primitivePropertyValue.setPrimitiveValue(custodian);
            instanceProperties.setProperty("custodian", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String recipient = "string6";
            primitivePropertyValue.setPrimitiveValue(recipient);
            instanceProperties.setProperty("recipient", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String notes = "string7";
            primitivePropertyValue.setPrimitiveValue(notes);
            instanceProperties.setProperty("notes", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("Certification");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Certifies");
            mockRelationship.setEntityTwoPropertyName("Certifications");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("CertificationType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Certification requestedCertification = new Certification();

            requestedCertification.setCertificateGUID(certificateGUID);

            requestedCertification.setStart(start);

            requestedCertification.setEnd(end);

            requestedCertification.setConditions(conditions);

            requestedCertification.setCertifiedBy(certifiedBy);

            requestedCertification.setCustodian(custodian);

            requestedCertification.setRecipient(recipient);

            requestedCertification.setNotes(notes);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedCertification.setSystemAttributes(systemAttributes);


            Certification returnedCertification = subjectAreaBeansToAccessOMRS.updateCertificationRelationship(testuserid, requestedCertification);
            assertEquals(requestedCertification.getCertificateGUID(),returnedCertification.getCertificateGUID());

            assertEquals(requestedCertification.getStart(),returnedCertification.getStart());

            assertEquals(requestedCertification.getEnd(),returnedCertification.getEnd());

            assertEquals(requestedCertification.getConditions(),returnedCertification.getConditions());

            assertEquals(requestedCertification.getCertifiedBy(),returnedCertification.getCertifiedBy());

            assertEquals(requestedCertification.getCustodian(),returnedCertification.getCustodian());

            assertEquals(requestedCertification.getRecipient(),returnedCertification.getRecipient());

            assertEquals(requestedCertification.getNotes(),returnedCertification.getNotes());

        }

    @Test
        public void testCreateNetworkGatewayLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateNetworkGatewayLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("NetworkGatewayLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Gateways");
            mockRelationship.setEntityTwoPropertyName("NetworkConnections");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("NetworkGateway");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Network");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            NetworkGatewayLink requestedNetworkGatewayLink = new NetworkGatewayLink();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedNetworkGatewayLink.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            NetworkGatewayLink returnedNetworkGatewayLink = subjectAreaBeansToAccessOMRS.createNetworkGatewayLinkRelationship(testuserid, requestedNetworkGatewayLink);
        }

        @Test
        public void testGetNetworkGatewayLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetNetworkGatewayLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("NetworkGatewayLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Gateways");
            mockRelationship.setEntityTwoPropertyName("NetworkConnections");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("NetworkGateway");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Network");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            NetworkGatewayLink requestedNetworkGatewayLink = new NetworkGatewayLink();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            NetworkGatewayLink returnedNetworkGatewayLink = subjectAreaBeansToAccessOMRS.getNetworkGatewayLinkRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateNetworkGatewayLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateNetworkGatewayLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("NetworkGatewayLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Gateways");
            mockRelationship.setEntityTwoPropertyName("NetworkConnections");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("NetworkGateway");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Network");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            NetworkGatewayLink requestedNetworkGatewayLink = new NetworkGatewayLink();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedNetworkGatewayLink.setSystemAttributes(systemAttributes);


            NetworkGatewayLink returnedNetworkGatewayLink = subjectAreaBeansToAccessOMRS.updateNetworkGatewayLinkRelationship(testuserid, requestedNetworkGatewayLink);
        }

    @Test
        public void testCreateConnectionConnectorType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateConnectionConnectorType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ConnectionConnectorType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Connections");
            mockRelationship.setEntityTwoPropertyName("ConnectorType");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Connection");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ConnectorType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ConnectionConnectorType requestedConnectionConnectorType = new ConnectionConnectorType();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedConnectionConnectorType.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ConnectionConnectorType returnedConnectionConnectorType = subjectAreaBeansToAccessOMRS.createConnectionConnectorTypeRelationship(testuserid, requestedConnectionConnectorType);
        }

        @Test
        public void testGetConnectionConnectorType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetConnectionConnectorType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ConnectionConnectorType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Connections");
            mockRelationship.setEntityTwoPropertyName("ConnectorType");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Connection");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ConnectorType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ConnectionConnectorType requestedConnectionConnectorType = new ConnectionConnectorType();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ConnectionConnectorType returnedConnectionConnectorType = subjectAreaBeansToAccessOMRS.getConnectionConnectorTypeRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateConnectionConnectorType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateConnectionConnectorType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ConnectionConnectorType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Connections");
            mockRelationship.setEntityTwoPropertyName("ConnectorType");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Connection");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ConnectorType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ConnectionConnectorType requestedConnectionConnectorType = new ConnectionConnectorType();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedConnectionConnectorType.setSystemAttributes(systemAttributes);


            ConnectionConnectorType returnedConnectionConnectorType = subjectAreaBeansToAccessOMRS.updateConnectionConnectorTypeRelationship(testuserid, requestedConnectionConnectorType);
        }

    @Test
        public void testCreateSynonym() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateSynonym";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("Synonym");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Synonyms");
            mockRelationship.setEntityTwoPropertyName("Synonyms");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Synonym requestedSynonym = new Synonym();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedSynonym.setSystemAttributes(systemAttributes);

            requestedSynonym.setDescription(description);

            requestedSynonym.setExpression(expression);

            requestedSynonym.setSteward(steward);

            requestedSynonym.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedSynonym.setStatus(TermRelationshipStatus.values()[0]);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            Synonym returnedSynonym = subjectAreaBeansToAccessOMRS.createSynonymRelationship(testuserid, requestedSynonym);
            assertEquals(requestedSynonym.getDescription(),returnedSynonym.getDescription());

            assertEquals(requestedSynonym.getExpression(),returnedSynonym.getExpression());

            assertEquals(requestedSynonym.getSteward(),returnedSynonym.getSteward());

            assertEquals(requestedSynonym.getSource(),returnedSynonym.getSource());

            assertEquals(requestedSynonym.getStatus(),returnedSynonym.getStatus());

        }

        @Test
        public void testGetSynonym() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetSynonym";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("Synonym");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Synonyms");
            mockRelationship.setEntityTwoPropertyName("Synonyms");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Synonym requestedSynonym = new Synonym();

            requestedSynonym.setDescription(description);

            requestedSynonym.setExpression(expression);

            requestedSynonym.setSteward(steward);

            requestedSynonym.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedSynonym.setStatus(TermRelationshipStatus.values()[0]);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            Synonym returnedSynonym = subjectAreaBeansToAccessOMRS.getSynonymRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedSynonym.getDescription(),returnedSynonym.getDescription());

            assertEquals(requestedSynonym.getExpression(),returnedSynonym.getExpression());

            assertEquals(requestedSynonym.getSteward(),returnedSynonym.getSteward());

            assertEquals(requestedSynonym.getSource(),returnedSynonym.getSource());

            assertEquals(requestedSynonym.getStatus(),returnedSynonym.getStatus());

        }
        @Test
        public void testUpdateSynonym() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateSynonym";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("Synonym");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Synonyms");
            mockRelationship.setEntityTwoPropertyName("Synonyms");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Synonym requestedSynonym = new Synonym();

            requestedSynonym.setDescription(description);

            requestedSynonym.setExpression(expression);

            requestedSynonym.setSteward(steward);

            requestedSynonym.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedSynonym.setStatus(TermRelationshipStatus.values()[0]);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedSynonym.setSystemAttributes(systemAttributes);


            Synonym returnedSynonym = subjectAreaBeansToAccessOMRS.updateSynonymRelationship(testuserid, requestedSynonym);
            assertEquals(requestedSynonym.getDescription(),returnedSynonym.getDescription());

            assertEquals(requestedSynonym.getExpression(),returnedSynonym.getExpression());

            assertEquals(requestedSynonym.getSteward(),returnedSynonym.getSteward());

            assertEquals(requestedSynonym.getSource(),returnedSynonym.getSource());

            assertEquals(requestedSynonym.getStatus(),returnedSynonym.getStatus());

        }

    @Test
        public void testCreateAntonym() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateAntonym";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("Antonym");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Antonyms");
            mockRelationship.setEntityTwoPropertyName("Antonyms");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Antonym requestedAntonym = new Antonym();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAntonym.setSystemAttributes(systemAttributes);

            requestedAntonym.setDescription(description);

            requestedAntonym.setExpression(expression);

            requestedAntonym.setSteward(steward);

            requestedAntonym.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedAntonym.setStatus(TermRelationshipStatus.values()[0]);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            Antonym returnedAntonym = subjectAreaBeansToAccessOMRS.createAntonymRelationship(testuserid, requestedAntonym);
            assertEquals(requestedAntonym.getDescription(),returnedAntonym.getDescription());

            assertEquals(requestedAntonym.getExpression(),returnedAntonym.getExpression());

            assertEquals(requestedAntonym.getSteward(),returnedAntonym.getSteward());

            assertEquals(requestedAntonym.getSource(),returnedAntonym.getSource());

            assertEquals(requestedAntonym.getStatus(),returnedAntonym.getStatus());

        }

        @Test
        public void testGetAntonym() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetAntonym";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("Antonym");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Antonyms");
            mockRelationship.setEntityTwoPropertyName("Antonyms");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Antonym requestedAntonym = new Antonym();

            requestedAntonym.setDescription(description);

            requestedAntonym.setExpression(expression);

            requestedAntonym.setSteward(steward);

            requestedAntonym.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedAntonym.setStatus(TermRelationshipStatus.values()[0]);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            Antonym returnedAntonym = subjectAreaBeansToAccessOMRS.getAntonymRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedAntonym.getDescription(),returnedAntonym.getDescription());

            assertEquals(requestedAntonym.getExpression(),returnedAntonym.getExpression());

            assertEquals(requestedAntonym.getSteward(),returnedAntonym.getSteward());

            assertEquals(requestedAntonym.getSource(),returnedAntonym.getSource());

            assertEquals(requestedAntonym.getStatus(),returnedAntonym.getStatus());

        }
        @Test
        public void testUpdateAntonym() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateAntonym";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("Antonym");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Antonyms");
            mockRelationship.setEntityTwoPropertyName("Antonyms");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Antonym requestedAntonym = new Antonym();

            requestedAntonym.setDescription(description);

            requestedAntonym.setExpression(expression);

            requestedAntonym.setSteward(steward);

            requestedAntonym.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedAntonym.setStatus(TermRelationshipStatus.values()[0]);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAntonym.setSystemAttributes(systemAttributes);


            Antonym returnedAntonym = subjectAreaBeansToAccessOMRS.updateAntonymRelationship(testuserid, requestedAntonym);
            assertEquals(requestedAntonym.getDescription(),returnedAntonym.getDescription());

            assertEquals(requestedAntonym.getExpression(),returnedAntonym.getExpression());

            assertEquals(requestedAntonym.getSteward(),returnedAntonym.getSteward());

            assertEquals(requestedAntonym.getSource(),returnedAntonym.getSource());

            assertEquals(requestedAntonym.getStatus(),returnedAntonym.getStatus());

        }

    @Test
        public void testCreateGraphEdgeLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateGraphEdgeLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GraphEdgeLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Edges");
            mockRelationship.setEntityTwoPropertyName("Vertices");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GraphEdge");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GraphVertex");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GraphEdgeLink requestedGraphEdgeLink = new GraphEdgeLink();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedGraphEdgeLink.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            GraphEdgeLink returnedGraphEdgeLink = subjectAreaBeansToAccessOMRS.createGraphEdgeLinkRelationship(testuserid, requestedGraphEdgeLink);
        }

        @Test
        public void testGetGraphEdgeLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetGraphEdgeLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GraphEdgeLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Edges");
            mockRelationship.setEntityTwoPropertyName("Vertices");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GraphEdge");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GraphVertex");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GraphEdgeLink requestedGraphEdgeLink = new GraphEdgeLink();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            GraphEdgeLink returnedGraphEdgeLink = subjectAreaBeansToAccessOMRS.getGraphEdgeLinkRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateGraphEdgeLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGraphEdgeLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GraphEdgeLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Edges");
            mockRelationship.setEntityTwoPropertyName("Vertices");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GraphEdge");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GraphVertex");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GraphEdgeLink requestedGraphEdgeLink = new GraphEdgeLink();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedGraphEdgeLink.setSystemAttributes(systemAttributes);


            GraphEdgeLink returnedGraphEdgeLink = subjectAreaBeansToAccessOMRS.updateGraphEdgeLinkRelationship(testuserid, requestedGraphEdgeLink);
        }

    @Test
        public void testCreateToDoOnReferenceable() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateToDoOnReferenceable";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ToDoOnReferenceable");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("RelatedReferenceables");
            mockRelationship.setEntityTwoPropertyName("Todos");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ToDo");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ToDoOnReferenceable requestedToDoOnReferenceable = new ToDoOnReferenceable();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedToDoOnReferenceable.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ToDoOnReferenceable returnedToDoOnReferenceable = subjectAreaBeansToAccessOMRS.createToDoOnReferenceableRelationship(testuserid, requestedToDoOnReferenceable);
        }

        @Test
        public void testGetToDoOnReferenceable() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetToDoOnReferenceable";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ToDoOnReferenceable");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("RelatedReferenceables");
            mockRelationship.setEntityTwoPropertyName("Todos");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ToDo");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ToDoOnReferenceable requestedToDoOnReferenceable = new ToDoOnReferenceable();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ToDoOnReferenceable returnedToDoOnReferenceable = subjectAreaBeansToAccessOMRS.getToDoOnReferenceableRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateToDoOnReferenceable() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateToDoOnReferenceable";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ToDoOnReferenceable");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("RelatedReferenceables");
            mockRelationship.setEntityTwoPropertyName("Todos");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ToDo");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ToDoOnReferenceable requestedToDoOnReferenceable = new ToDoOnReferenceable();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedToDoOnReferenceable.setSystemAttributes(systemAttributes);


            ToDoOnReferenceable returnedToDoOnReferenceable = subjectAreaBeansToAccessOMRS.updateToDoOnReferenceableRelationship(testuserid, requestedToDoOnReferenceable);
        }

    @Test
        public void testCreateProjectScope() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateProjectScope";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date scopeDescription = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(scopeDescription);
            instanceProperties.setProperty("scopeDescription", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProjectScope");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ProjectsImpactingAssets");
            mockRelationship.setEntityTwoPropertyName("ProjectScope");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Project");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Collection");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProjectScope requestedProjectScope = new ProjectScope();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedProjectScope.setSystemAttributes(systemAttributes);

            requestedProjectScope.setScopeDescription(scopeDescription);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ProjectScope returnedProjectScope = subjectAreaBeansToAccessOMRS.createProjectScopeRelationship(testuserid, requestedProjectScope);
            assertEquals(requestedProjectScope.getScopeDescription(),returnedProjectScope.getScopeDescription());

        }

        @Test
        public void testGetProjectScope() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetProjectScope";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date scopeDescription = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(scopeDescription);
            instanceProperties.setProperty("scopeDescription", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProjectScope");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ProjectsImpactingAssets");
            mockRelationship.setEntityTwoPropertyName("ProjectScope");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Project");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Collection");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProjectScope requestedProjectScope = new ProjectScope();

            requestedProjectScope.setScopeDescription(scopeDescription);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ProjectScope returnedProjectScope = subjectAreaBeansToAccessOMRS.getProjectScopeRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedProjectScope.getScopeDescription(),returnedProjectScope.getScopeDescription());

        }
        @Test
        public void testUpdateProjectScope() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateProjectScope";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date scopeDescription = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(scopeDescription);
            instanceProperties.setProperty("scopeDescription", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProjectScope");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ProjectsImpactingAssets");
            mockRelationship.setEntityTwoPropertyName("ProjectScope");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Project");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Collection");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProjectScope requestedProjectScope = new ProjectScope();

            requestedProjectScope.setScopeDescription(scopeDescription);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedProjectScope.setSystemAttributes(systemAttributes);


            ProjectScope returnedProjectScope = subjectAreaBeansToAccessOMRS.updateProjectScopeRelationship(testuserid, requestedProjectScope);
            assertEquals(requestedProjectScope.getScopeDescription(),returnedProjectScope.getScopeDescription());

        }

    @Test
        public void testCreateISARelationship() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateISARelationship";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ISARelationship");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Classifies");
            mockRelationship.setEntityTwoPropertyName("IsA");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ISARelationship requestedISARelationship = new ISARelationship();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedISARelationship.setSystemAttributes(systemAttributes);

            requestedISARelationship.setDescription(description);

            requestedISARelationship.setExpression(expression);

            requestedISARelationship.setSteward(steward);

            requestedISARelationship.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedISARelationship.setStatus(TermRelationshipStatus.values()[0]);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ISARelationship returnedISARelationship = subjectAreaBeansToAccessOMRS.createISARelationshipRelationship(testuserid, requestedISARelationship);
            assertEquals(requestedISARelationship.getDescription(),returnedISARelationship.getDescription());

            assertEquals(requestedISARelationship.getExpression(),returnedISARelationship.getExpression());

            assertEquals(requestedISARelationship.getSteward(),returnedISARelationship.getSteward());

            assertEquals(requestedISARelationship.getSource(),returnedISARelationship.getSource());

            assertEquals(requestedISARelationship.getStatus(),returnedISARelationship.getStatus());

        }

        @Test
        public void testGetISARelationship() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetISARelationship";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ISARelationship");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Classifies");
            mockRelationship.setEntityTwoPropertyName("IsA");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ISARelationship requestedISARelationship = new ISARelationship();

            requestedISARelationship.setDescription(description);

            requestedISARelationship.setExpression(expression);

            requestedISARelationship.setSteward(steward);

            requestedISARelationship.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedISARelationship.setStatus(TermRelationshipStatus.values()[0]);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ISARelationship returnedISARelationship = subjectAreaBeansToAccessOMRS.getISARelationshipRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedISARelationship.getDescription(),returnedISARelationship.getDescription());

            assertEquals(requestedISARelationship.getExpression(),returnedISARelationship.getExpression());

            assertEquals(requestedISARelationship.getSteward(),returnedISARelationship.getSteward());

            assertEquals(requestedISARelationship.getSource(),returnedISARelationship.getSource());

            assertEquals(requestedISARelationship.getStatus(),returnedISARelationship.getStatus());

        }
        @Test
        public void testUpdateISARelationship() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateISARelationship";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ISARelationship");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Classifies");
            mockRelationship.setEntityTwoPropertyName("IsA");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ISARelationship requestedISARelationship = new ISARelationship();

            requestedISARelationship.setDescription(description);

            requestedISARelationship.setExpression(expression);

            requestedISARelationship.setSteward(steward);

            requestedISARelationship.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedISARelationship.setStatus(TermRelationshipStatus.values()[0]);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedISARelationship.setSystemAttributes(systemAttributes);


            ISARelationship returnedISARelationship = subjectAreaBeansToAccessOMRS.updateISARelationshipRelationship(testuserid, requestedISARelationship);
            assertEquals(requestedISARelationship.getDescription(),returnedISARelationship.getDescription());

            assertEquals(requestedISARelationship.getExpression(),returnedISARelationship.getExpression());

            assertEquals(requestedISARelationship.getSteward(),returnedISARelationship.getSteward());

            assertEquals(requestedISARelationship.getSource(),returnedISARelationship.getSource());

            assertEquals(requestedISARelationship.getStatus(),returnedISARelationship.getStatus());

        }

    @Test
        public void testCreateTermISATypeOFRelationship() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateTermISATypeOFRelationship";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string1";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string2";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("TermISATypeOFRelationship");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Supertypes");
            mockRelationship.setEntityTwoPropertyName("Subtypes");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            TermISATypeOFRelationship requestedTermISATypeOFRelationship = new TermISATypeOFRelationship();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedTermISATypeOFRelationship.setSystemAttributes(systemAttributes);

            requestedTermISATypeOFRelationship.setDescription(description);

            requestedTermISATypeOFRelationship.setSteward(steward);

            requestedTermISATypeOFRelationship.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedTermISATypeOFRelationship.setStatus(TermRelationshipStatus.values()[0]);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            TermISATypeOFRelationship returnedTermISATypeOFRelationship = subjectAreaBeansToAccessOMRS.createTermISATypeOFRelationshipRelationship(testuserid, requestedTermISATypeOFRelationship);
            assertEquals(requestedTermISATypeOFRelationship.getDescription(),returnedTermISATypeOFRelationship.getDescription());

            assertEquals(requestedTermISATypeOFRelationship.getSteward(),returnedTermISATypeOFRelationship.getSteward());

            assertEquals(requestedTermISATypeOFRelationship.getSource(),returnedTermISATypeOFRelationship.getSource());

            assertEquals(requestedTermISATypeOFRelationship.getStatus(),returnedTermISATypeOFRelationship.getStatus());

        }

        @Test
        public void testGetTermISATypeOFRelationship() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetTermISATypeOFRelationship";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string1";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string2";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("TermISATypeOFRelationship");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Supertypes");
            mockRelationship.setEntityTwoPropertyName("Subtypes");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            TermISATypeOFRelationship requestedTermISATypeOFRelationship = new TermISATypeOFRelationship();

            requestedTermISATypeOFRelationship.setDescription(description);

            requestedTermISATypeOFRelationship.setSteward(steward);

            requestedTermISATypeOFRelationship.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedTermISATypeOFRelationship.setStatus(TermRelationshipStatus.values()[0]);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            TermISATypeOFRelationship returnedTermISATypeOFRelationship = subjectAreaBeansToAccessOMRS.getTermISATypeOFRelationshipRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedTermISATypeOFRelationship.getDescription(),returnedTermISATypeOFRelationship.getDescription());

            assertEquals(requestedTermISATypeOFRelationship.getSteward(),returnedTermISATypeOFRelationship.getSteward());

            assertEquals(requestedTermISATypeOFRelationship.getSource(),returnedTermISATypeOFRelationship.getSource());

            assertEquals(requestedTermISATypeOFRelationship.getStatus(),returnedTermISATypeOFRelationship.getStatus());

        }
        @Test
        public void testUpdateTermISATypeOFRelationship() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateTermISATypeOFRelationship";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string1";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string2";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("TermISATypeOFRelationship");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Supertypes");
            mockRelationship.setEntityTwoPropertyName("Subtypes");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            TermISATypeOFRelationship requestedTermISATypeOFRelationship = new TermISATypeOFRelationship();

            requestedTermISATypeOFRelationship.setDescription(description);

            requestedTermISATypeOFRelationship.setSteward(steward);

            requestedTermISATypeOFRelationship.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedTermISATypeOFRelationship.setStatus(TermRelationshipStatus.values()[0]);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedTermISATypeOFRelationship.setSystemAttributes(systemAttributes);


            TermISATypeOFRelationship returnedTermISATypeOFRelationship = subjectAreaBeansToAccessOMRS.updateTermISATypeOFRelationshipRelationship(testuserid, requestedTermISATypeOFRelationship);
            assertEquals(requestedTermISATypeOFRelationship.getDescription(),returnedTermISATypeOFRelationship.getDescription());

            assertEquals(requestedTermISATypeOFRelationship.getSteward(),returnedTermISATypeOFRelationship.getSteward());

            assertEquals(requestedTermISATypeOFRelationship.getSource(),returnedTermISATypeOFRelationship.getSource());

            assertEquals(requestedTermISATypeOFRelationship.getStatus(),returnedTermISATypeOFRelationship.getStatus());

        }

    @Test
        public void testCreateContributor() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateContributor";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(CrowdSourcingRole.values()[0].name());
            instanceProperties.setProperty("roleType", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("Contributor");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Contributions");
            mockRelationship.setEntityTwoPropertyName("Contributors");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ActorProfile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Contributor requestedContributor = new Contributor();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedContributor.setSystemAttributes(systemAttributes);

            EnumPropertyValue CrowdSourcingRoleEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            CrowdSourcingRoleEnumPropertyValue.setSymbolicName(CrowdSourcingRole.values()[0].name());
            instanceProperties.setProperty("roleType", CrowdSourcingRoleEnumPropertyValue);

            requestedContributor.setRoleType(CrowdSourcingRole.values()[0]);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            Contributor returnedContributor = subjectAreaBeansToAccessOMRS.createContributorRelationship(testuserid, requestedContributor);
            assertEquals(requestedContributor.getRoleType(),returnedContributor.getRoleType());

        }

        @Test
        public void testGetContributor() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetContributor";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(CrowdSourcingRole.values()[0].name());
            instanceProperties.setProperty("roleType", enumPropertyValue);

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("Contributor");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Contributions");
            mockRelationship.setEntityTwoPropertyName("Contributors");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ActorProfile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Contributor requestedContributor = new Contributor();

            EnumPropertyValue CrowdSourcingRoleEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            CrowdSourcingRoleEnumPropertyValue.setSymbolicName(CrowdSourcingRole.values()[0].name());
            instanceProperties.setProperty("roleType", CrowdSourcingRoleEnumPropertyValue);

            requestedContributor.setRoleType(CrowdSourcingRole.values()[0]);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            Contributor returnedContributor = subjectAreaBeansToAccessOMRS.getContributorRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedContributor.getRoleType(),returnedContributor.getRoleType());

        }
        @Test
        public void testUpdateContributor() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateContributor";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(CrowdSourcingRole.values()[0].name());
            instanceProperties.setProperty("roleType", enumPropertyValue);

            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("Contributor");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Contributions");
            mockRelationship.setEntityTwoPropertyName("Contributors");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ActorProfile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            Contributor requestedContributor = new Contributor();

            EnumPropertyValue CrowdSourcingRoleEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            CrowdSourcingRoleEnumPropertyValue.setSymbolicName(CrowdSourcingRole.values()[0].name());
            instanceProperties.setProperty("roleType", CrowdSourcingRoleEnumPropertyValue);

            requestedContributor.setRoleType(CrowdSourcingRole.values()[0]);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedContributor.setSystemAttributes(systemAttributes);


            Contributor returnedContributor = subjectAreaBeansToAccessOMRS.updateContributorRelationship(testuserid, requestedContributor);
            assertEquals(requestedContributor.getRoleType(),returnedContributor.getRoleType());

        }

    @Test
        public void testCreateEmbeddedConnection() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateEmbeddedConnection";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String displayName = "string0";
            primitivePropertyValue.setPrimitiveValue(displayName);
            instanceProperties.setProperty("displayName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mapPropertyValue = new MapPropertyValue();
            PrimitivePropertyValue primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            InstanceProperties mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("Arguments", mapPropertyValue);

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("EmbeddedConnection");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("SupportingVirtualConnections");
            mockRelationship.setEntityTwoPropertyName("EmbeddedConnections");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("VirtualConnection");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Connection");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            EmbeddedConnection requestedEmbeddedConnection = new EmbeddedConnection();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedEmbeddedConnection.setSystemAttributes(systemAttributes);

            requestedEmbeddedConnection.setDisplayName(displayName);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            testMapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("Arguments", testMapPropertyValue);
            EmbeddedConnection returnedEmbeddedConnection = subjectAreaBeansToAccessOMRS.createEmbeddedConnectionRelationship(testuserid, requestedEmbeddedConnection);
            assertEquals(requestedEmbeddedConnection.getDisplayName(),returnedEmbeddedConnection.getDisplayName());

            assertEquals(requestedEmbeddedConnection.getArguments(),returnedEmbeddedConnection.getArguments());

        }

        @Test
        public void testGetEmbeddedConnection() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetEmbeddedConnection";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String displayName = "string0";
            primitivePropertyValue.setPrimitiveValue(displayName);
            instanceProperties.setProperty("displayName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("Arguments", mapPropertyValue);

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("EmbeddedConnection");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("SupportingVirtualConnections");
            mockRelationship.setEntityTwoPropertyName("EmbeddedConnections");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("VirtualConnection");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Connection");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            EmbeddedConnection requestedEmbeddedConnection = new EmbeddedConnection();

            requestedEmbeddedConnection.setDisplayName(displayName);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            testMapPropertyValue = new MapPropertyValue();
            testPrimitivePropertyValueForMap = new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            testMapPropertyValue.setMapValues(testMapValues);
            instanceProperties.setProperty("Arguments", testMapPropertyValue);
            EmbeddedConnection returnedEmbeddedConnection = subjectAreaBeansToAccessOMRS.getEmbeddedConnectionRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedEmbeddedConnection.getDisplayName(),returnedEmbeddedConnection.getDisplayName());

            assertEquals(requestedEmbeddedConnection.getArguments(),returnedEmbeddedConnection.getArguments());

        }
        @Test
        public void testUpdateEmbeddedConnection() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateEmbeddedConnection";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String displayName = "string0";
            primitivePropertyValue.setPrimitiveValue(displayName);
            instanceProperties.setProperty("displayName", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mapPropertyValue = new MapPropertyValue();
            primitivePropertyValueForMap = new PrimitivePropertyValue();
            primitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            primitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            mapValues = new InstanceProperties();
            mapValues.setProperty("a_new_property_name",primitivePropertyValueForMap);
            mapPropertyValue.setMapValues(mapValues);
            instanceProperties.setProperty("Arguments", mapPropertyValue);

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("EmbeddedConnection");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("SupportingVirtualConnections");
            mockRelationship.setEntityTwoPropertyName("EmbeddedConnections");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("VirtualConnection");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Connection");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            EmbeddedConnection requestedEmbeddedConnection = new EmbeddedConnection();

            requestedEmbeddedConnection.setDisplayName(displayName);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            testMapPropertyValue = new MapPropertyValue();

            testPrimitivePropertyValueForMap= new PrimitivePropertyValue();
            testPrimitivePropertyValueForMap.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            testPrimitivePropertyValueForMap.setPrimitiveValue("test string value for map");

            testMapValues = new InstanceProperties();
            testMapValues.setProperty("a_new_property_name",testPrimitivePropertyValueForMap);

            testMapPropertyValue.setMapValues(testMapValues);
            instanceProperties.setProperty("Arguments", testMapPropertyValue);
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedEmbeddedConnection.setSystemAttributes(systemAttributes);


            EmbeddedConnection returnedEmbeddedConnection = subjectAreaBeansToAccessOMRS.updateEmbeddedConnectionRelationship(testuserid, requestedEmbeddedConnection);
            assertEquals(requestedEmbeddedConnection.getDisplayName(),returnedEmbeddedConnection.getDisplayName());

            assertEquals(requestedEmbeddedConnection.getArguments(),returnedEmbeddedConnection.getArguments());

        }

    @Test
        public void testCreateGovernanceControlLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateGovernanceControlLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernanceControlLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LinkingControls");
            mockRelationship.setEntityTwoPropertyName("LinkedControls");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceControl");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GovernanceControl");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceControlLink requestedGovernanceControlLink = new GovernanceControlLink();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedGovernanceControlLink.setSystemAttributes(systemAttributes);

            requestedGovernanceControlLink.setDescription(description);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            GovernanceControlLink returnedGovernanceControlLink = subjectAreaBeansToAccessOMRS.createGovernanceControlLinkRelationship(testuserid, requestedGovernanceControlLink);
            assertEquals(requestedGovernanceControlLink.getDescription(),returnedGovernanceControlLink.getDescription());

        }

        @Test
        public void testGetGovernanceControlLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetGovernanceControlLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernanceControlLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LinkingControls");
            mockRelationship.setEntityTwoPropertyName("LinkedControls");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceControl");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GovernanceControl");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceControlLink requestedGovernanceControlLink = new GovernanceControlLink();

            requestedGovernanceControlLink.setDescription(description);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            GovernanceControlLink returnedGovernanceControlLink = subjectAreaBeansToAccessOMRS.getGovernanceControlLinkRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedGovernanceControlLink.getDescription(),returnedGovernanceControlLink.getDescription());

        }
        @Test
        public void testUpdateGovernanceControlLink() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGovernanceControlLink";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernanceControlLink");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LinkingControls");
            mockRelationship.setEntityTwoPropertyName("LinkedControls");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceControl");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GovernanceControl");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceControlLink requestedGovernanceControlLink = new GovernanceControlLink();

            requestedGovernanceControlLink.setDescription(description);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedGovernanceControlLink.setSystemAttributes(systemAttributes);


            GovernanceControlLink returnedGovernanceControlLink = subjectAreaBeansToAccessOMRS.updateGovernanceControlLinkRelationship(testuserid, requestedGovernanceControlLink);
            assertEquals(requestedGovernanceControlLink.getDescription(),returnedGovernanceControlLink.getDescription());

        }

    @Test
        public void testCreateAttachedRating() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateAttachedRating";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AttachedRating");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("RatedElement");
            mockRelationship.setEntityTwoPropertyName("StarRatings");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Rating");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AttachedRating requestedAttachedRating = new AttachedRating();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAttachedRating.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            AttachedRating returnedAttachedRating = subjectAreaBeansToAccessOMRS.createAttachedRatingRelationship(testuserid, requestedAttachedRating);
        }

        @Test
        public void testGetAttachedRating() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetAttachedRating";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AttachedRating");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("RatedElement");
            mockRelationship.setEntityTwoPropertyName("StarRatings");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Rating");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AttachedRating requestedAttachedRating = new AttachedRating();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            AttachedRating returnedAttachedRating = subjectAreaBeansToAccessOMRS.getAttachedRatingRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateAttachedRating() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateAttachedRating";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AttachedRating");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("RatedElement");
            mockRelationship.setEntityTwoPropertyName("StarRatings");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Rating");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AttachedRating requestedAttachedRating = new AttachedRating();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAttachedRating.setSystemAttributes(systemAttributes);


            AttachedRating returnedAttachedRating = subjectAreaBeansToAccessOMRS.updateAttachedRatingRelationship(testuserid, requestedAttachedRating);
        }

    @Test
        public void testCreateAttachedNoteLog() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateAttachedNoteLog";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AttachedNoteLog");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Describes");
            mockRelationship.setEntityTwoPropertyName("NoteLogs");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("NoteLog");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AttachedNoteLog requestedAttachedNoteLog = new AttachedNoteLog();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAttachedNoteLog.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            AttachedNoteLog returnedAttachedNoteLog = subjectAreaBeansToAccessOMRS.createAttachedNoteLogRelationship(testuserid, requestedAttachedNoteLog);
        }

        @Test
        public void testGetAttachedNoteLog() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetAttachedNoteLog";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AttachedNoteLog");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Describes");
            mockRelationship.setEntityTwoPropertyName("NoteLogs");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("NoteLog");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AttachedNoteLog requestedAttachedNoteLog = new AttachedNoteLog();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            AttachedNoteLog returnedAttachedNoteLog = subjectAreaBeansToAccessOMRS.getAttachedNoteLogRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateAttachedNoteLog() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateAttachedNoteLog";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AttachedNoteLog");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Describes");
            mockRelationship.setEntityTwoPropertyName("NoteLogs");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("NoteLog");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AttachedNoteLog requestedAttachedNoteLog = new AttachedNoteLog();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAttachedNoteLog.setSystemAttributes(systemAttributes);


            AttachedNoteLog returnedAttachedNoteLog = subjectAreaBeansToAccessOMRS.updateAttachedNoteLogRelationship(testuserid, requestedAttachedNoteLog);
        }

    @Test
        public void testCreateConnectionToAsset() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateConnectionToAsset";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String assetSummary = "string0";
            primitivePropertyValue.setPrimitiveValue(assetSummary);
            instanceProperties.setProperty("assetSummary", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ConnectionToAsset");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Connections");
            mockRelationship.setEntityTwoPropertyName("Asset");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Connection");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Asset");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ConnectionToAsset requestedConnectionToAsset = new ConnectionToAsset();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedConnectionToAsset.setSystemAttributes(systemAttributes);

            requestedConnectionToAsset.setAssetSummary(assetSummary);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ConnectionToAsset returnedConnectionToAsset = subjectAreaBeansToAccessOMRS.createConnectionToAssetRelationship(testuserid, requestedConnectionToAsset);
            assertEquals(requestedConnectionToAsset.getAssetSummary(),returnedConnectionToAsset.getAssetSummary());

        }

        @Test
        public void testGetConnectionToAsset() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetConnectionToAsset";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String assetSummary = "string0";
            primitivePropertyValue.setPrimitiveValue(assetSummary);
            instanceProperties.setProperty("assetSummary", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ConnectionToAsset");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Connections");
            mockRelationship.setEntityTwoPropertyName("Asset");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Connection");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Asset");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ConnectionToAsset requestedConnectionToAsset = new ConnectionToAsset();

            requestedConnectionToAsset.setAssetSummary(assetSummary);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ConnectionToAsset returnedConnectionToAsset = subjectAreaBeansToAccessOMRS.getConnectionToAssetRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedConnectionToAsset.getAssetSummary(),returnedConnectionToAsset.getAssetSummary());

        }
        @Test
        public void testUpdateConnectionToAsset() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateConnectionToAsset";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String assetSummary = "string0";
            primitivePropertyValue.setPrimitiveValue(assetSummary);
            instanceProperties.setProperty("assetSummary", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ConnectionToAsset");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Connections");
            mockRelationship.setEntityTwoPropertyName("Asset");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Connection");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Asset");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ConnectionToAsset requestedConnectionToAsset = new ConnectionToAsset();

            requestedConnectionToAsset.setAssetSummary(assetSummary);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedConnectionToAsset.setSystemAttributes(systemAttributes);


            ConnectionToAsset returnedConnectionToAsset = subjectAreaBeansToAccessOMRS.updateConnectionToAssetRelationship(testuserid, requestedConnectionToAsset);
            assertEquals(requestedConnectionToAsset.getAssetSummary(),returnedConnectionToAsset.getAssetSummary());

        }

    @Test
        public void testCreateRegulationCertificationType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateRegulationCertificationType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("RegulationCertificationType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("RelatedRegulations");
            mockRelationship.setEntityTwoPropertyName("RequiredCertifications");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Regulation");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("CertificationType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            RegulationCertificationType requestedRegulationCertificationType = new RegulationCertificationType();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedRegulationCertificationType.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            RegulationCertificationType returnedRegulationCertificationType = subjectAreaBeansToAccessOMRS.createRegulationCertificationTypeRelationship(testuserid, requestedRegulationCertificationType);
        }

        @Test
        public void testGetRegulationCertificationType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetRegulationCertificationType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("RegulationCertificationType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("RelatedRegulations");
            mockRelationship.setEntityTwoPropertyName("RequiredCertifications");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Regulation");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("CertificationType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            RegulationCertificationType requestedRegulationCertificationType = new RegulationCertificationType();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            RegulationCertificationType returnedRegulationCertificationType = subjectAreaBeansToAccessOMRS.getRegulationCertificationTypeRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateRegulationCertificationType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateRegulationCertificationType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("RegulationCertificationType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("RelatedRegulations");
            mockRelationship.setEntityTwoPropertyName("RequiredCertifications");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Regulation");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("CertificationType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            RegulationCertificationType requestedRegulationCertificationType = new RegulationCertificationType();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedRegulationCertificationType.setSystemAttributes(systemAttributes);


            RegulationCertificationType returnedRegulationCertificationType = subjectAreaBeansToAccessOMRS.updateRegulationCertificationTypeRelationship(testuserid, requestedRegulationCertificationType);
        }

    @Test
        public void testCreateLinkedType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateLinkedType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("LinkedType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LinkedBy");
            mockRelationship.setEntityTwoPropertyName("LinkedTypes");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SchemaLinkElement");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            LinkedType requestedLinkedType = new LinkedType();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedLinkedType.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            LinkedType returnedLinkedType = subjectAreaBeansToAccessOMRS.createLinkedTypeRelationship(testuserid, requestedLinkedType);
        }

        @Test
        public void testGetLinkedType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetLinkedType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("LinkedType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LinkedBy");
            mockRelationship.setEntityTwoPropertyName("LinkedTypes");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SchemaLinkElement");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            LinkedType requestedLinkedType = new LinkedType();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            LinkedType returnedLinkedType = subjectAreaBeansToAccessOMRS.getLinkedTypeRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateLinkedType() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateLinkedType";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("LinkedType");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LinkedBy");
            mockRelationship.setEntityTwoPropertyName("LinkedTypes");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SchemaLinkElement");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            LinkedType requestedLinkedType = new LinkedType();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedLinkedType.setSystemAttributes(systemAttributes);


            LinkedType returnedLinkedType = subjectAreaBeansToAccessOMRS.updateLinkedTypeRelationship(testuserid, requestedLinkedType);
        }

    @Test
        public void testCreateGovernanceRuleImplementation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateGovernanceRuleImplementation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String notes = "string0";
            primitivePropertyValue.setPrimitiveValue(notes);
            instanceProperties.setProperty("notes", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernanceRuleImplementation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ImplementsGovernanceRules");
            mockRelationship.setEntityTwoPropertyName("Implementations");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceRule");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DeployedSoftwareComponent");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceRuleImplementation requestedGovernanceRuleImplementation = new GovernanceRuleImplementation();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedGovernanceRuleImplementation.setSystemAttributes(systemAttributes);

            requestedGovernanceRuleImplementation.setNotes(notes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            GovernanceRuleImplementation returnedGovernanceRuleImplementation = subjectAreaBeansToAccessOMRS.createGovernanceRuleImplementationRelationship(testuserid, requestedGovernanceRuleImplementation);
            assertEquals(requestedGovernanceRuleImplementation.getNotes(),returnedGovernanceRuleImplementation.getNotes());

        }

        @Test
        public void testGetGovernanceRuleImplementation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetGovernanceRuleImplementation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String notes = "string0";
            primitivePropertyValue.setPrimitiveValue(notes);
            instanceProperties.setProperty("notes", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernanceRuleImplementation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ImplementsGovernanceRules");
            mockRelationship.setEntityTwoPropertyName("Implementations");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceRule");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DeployedSoftwareComponent");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceRuleImplementation requestedGovernanceRuleImplementation = new GovernanceRuleImplementation();

            requestedGovernanceRuleImplementation.setNotes(notes);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            GovernanceRuleImplementation returnedGovernanceRuleImplementation = subjectAreaBeansToAccessOMRS.getGovernanceRuleImplementationRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedGovernanceRuleImplementation.getNotes(),returnedGovernanceRuleImplementation.getNotes());

        }
        @Test
        public void testUpdateGovernanceRuleImplementation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGovernanceRuleImplementation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String notes = "string0";
            primitivePropertyValue.setPrimitiveValue(notes);
            instanceProperties.setProperty("notes", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernanceRuleImplementation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ImplementsGovernanceRules");
            mockRelationship.setEntityTwoPropertyName("Implementations");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceRule");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DeployedSoftwareComponent");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceRuleImplementation requestedGovernanceRuleImplementation = new GovernanceRuleImplementation();

            requestedGovernanceRuleImplementation.setNotes(notes);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedGovernanceRuleImplementation.setSystemAttributes(systemAttributes);


            GovernanceRuleImplementation returnedGovernanceRuleImplementation = subjectAreaBeansToAccessOMRS.updateGovernanceRuleImplementationRelationship(testuserid, requestedGovernanceRuleImplementation);
            assertEquals(requestedGovernanceRuleImplementation.getNotes(),returnedGovernanceRuleImplementation.getNotes());

        }

    @Test
        public void testCreateAdjacentLocation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateAdjacentLocation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AdjacentLocation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("PeerLocation");
            mockRelationship.setEntityTwoPropertyName("PeerLocation");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Location");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Location");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AdjacentLocation requestedAdjacentLocation = new AdjacentLocation();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAdjacentLocation.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            AdjacentLocation returnedAdjacentLocation = subjectAreaBeansToAccessOMRS.createAdjacentLocationRelationship(testuserid, requestedAdjacentLocation);
        }

        @Test
        public void testGetAdjacentLocation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetAdjacentLocation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AdjacentLocation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("PeerLocation");
            mockRelationship.setEntityTwoPropertyName("PeerLocation");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Location");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Location");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AdjacentLocation requestedAdjacentLocation = new AdjacentLocation();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            AdjacentLocation returnedAdjacentLocation = subjectAreaBeansToAccessOMRS.getAdjacentLocationRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateAdjacentLocation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateAdjacentLocation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AdjacentLocation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("PeerLocation");
            mockRelationship.setEntityTwoPropertyName("PeerLocation");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Location");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Location");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AdjacentLocation requestedAdjacentLocation = new AdjacentLocation();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAdjacentLocation.setSystemAttributes(systemAttributes);


            AdjacentLocation returnedAdjacentLocation = subjectAreaBeansToAccessOMRS.updateAdjacentLocationRelationship(testuserid, requestedAdjacentLocation);
        }

    @Test
        public void testCreateSemanticAssignment() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateSemanticAssignment";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_INT);
            Integer confidence = new Integer(2);
            primitivePropertyValue.setPrimitiveValue(confidence);
            instanceProperties.setProperty("confidence", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string3";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string4";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("SemanticAssignment");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("AssignedElements");
            mockRelationship.setEntityTwoPropertyName("Meaning");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SemanticAssignment requestedSemanticAssignment = new SemanticAssignment();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedSemanticAssignment.setSystemAttributes(systemAttributes);

            requestedSemanticAssignment.setDescription(description);

            requestedSemanticAssignment.setExpression(expression);

            requestedSemanticAssignment.setConfidence(confidence);

            requestedSemanticAssignment.setSteward(steward);

            requestedSemanticAssignment.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedSemanticAssignment.setStatus(TermRelationshipStatus.values()[0]);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            SemanticAssignment returnedSemanticAssignment = subjectAreaBeansToAccessOMRS.createSemanticAssignmentRelationship(testuserid, requestedSemanticAssignment);
            assertEquals(requestedSemanticAssignment.getDescription(),returnedSemanticAssignment.getDescription());

            assertEquals(requestedSemanticAssignment.getExpression(),returnedSemanticAssignment.getExpression());

            assertEquals(requestedSemanticAssignment.getConfidence(),returnedSemanticAssignment.getConfidence());

            assertEquals(requestedSemanticAssignment.getSteward(),returnedSemanticAssignment.getSteward());

            assertEquals(requestedSemanticAssignment.getSource(),returnedSemanticAssignment.getSource());

            assertEquals(requestedSemanticAssignment.getStatus(),returnedSemanticAssignment.getStatus());

        }

        @Test
        public void testGetSemanticAssignment() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetSemanticAssignment";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_INT);
            Integer confidence = new Integer(2);
            primitivePropertyValue.setPrimitiveValue(confidence);
            instanceProperties.setProperty("confidence", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string3";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string4";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("SemanticAssignment");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("AssignedElements");
            mockRelationship.setEntityTwoPropertyName("Meaning");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SemanticAssignment requestedSemanticAssignment = new SemanticAssignment();

            requestedSemanticAssignment.setDescription(description);

            requestedSemanticAssignment.setExpression(expression);

            requestedSemanticAssignment.setConfidence(confidence);

            requestedSemanticAssignment.setSteward(steward);

            requestedSemanticAssignment.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedSemanticAssignment.setStatus(TermRelationshipStatus.values()[0]);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            SemanticAssignment returnedSemanticAssignment = subjectAreaBeansToAccessOMRS.getSemanticAssignmentRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedSemanticAssignment.getDescription(),returnedSemanticAssignment.getDescription());

            assertEquals(requestedSemanticAssignment.getExpression(),returnedSemanticAssignment.getExpression());

            assertEquals(requestedSemanticAssignment.getConfidence(),returnedSemanticAssignment.getConfidence());

            assertEquals(requestedSemanticAssignment.getSteward(),returnedSemanticAssignment.getSteward());

            assertEquals(requestedSemanticAssignment.getSource(),returnedSemanticAssignment.getSource());

            assertEquals(requestedSemanticAssignment.getStatus(),returnedSemanticAssignment.getStatus());

        }
        @Test
        public void testUpdateSemanticAssignment() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateSemanticAssignment";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_INT);
            Integer confidence = new Integer(2);
            primitivePropertyValue.setPrimitiveValue(confidence);
            instanceProperties.setProperty("confidence", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string3";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string4";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("SemanticAssignment");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("AssignedElements");
            mockRelationship.setEntityTwoPropertyName("Meaning");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SemanticAssignment requestedSemanticAssignment = new SemanticAssignment();

            requestedSemanticAssignment.setDescription(description);

            requestedSemanticAssignment.setExpression(expression);

            requestedSemanticAssignment.setConfidence(confidence);

            requestedSemanticAssignment.setSteward(steward);

            requestedSemanticAssignment.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedSemanticAssignment.setStatus(TermRelationshipStatus.values()[0]);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedSemanticAssignment.setSystemAttributes(systemAttributes);


            SemanticAssignment returnedSemanticAssignment = subjectAreaBeansToAccessOMRS.updateSemanticAssignmentRelationship(testuserid, requestedSemanticAssignment);
            assertEquals(requestedSemanticAssignment.getDescription(),returnedSemanticAssignment.getDescription());

            assertEquals(requestedSemanticAssignment.getExpression(),returnedSemanticAssignment.getExpression());

            assertEquals(requestedSemanticAssignment.getConfidence(),returnedSemanticAssignment.getConfidence());

            assertEquals(requestedSemanticAssignment.getSteward(),returnedSemanticAssignment.getSteward());

            assertEquals(requestedSemanticAssignment.getSource(),returnedSemanticAssignment.getSource());

            assertEquals(requestedSemanticAssignment.getStatus(),returnedSemanticAssignment.getStatus());

        }

    @Test
        public void testCreateHostLocation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateHostLocation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("HostLocation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Host");
            mockRelationship.setEntityTwoPropertyName("Locations");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Host");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Location");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            HostLocation requestedHostLocation = new HostLocation();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedHostLocation.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            HostLocation returnedHostLocation = subjectAreaBeansToAccessOMRS.createHostLocationRelationship(testuserid, requestedHostLocation);
        }

        @Test
        public void testGetHostLocation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetHostLocation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("HostLocation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Host");
            mockRelationship.setEntityTwoPropertyName("Locations");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Host");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Location");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            HostLocation requestedHostLocation = new HostLocation();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            HostLocation returnedHostLocation = subjectAreaBeansToAccessOMRS.getHostLocationRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateHostLocation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateHostLocation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("HostLocation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Host");
            mockRelationship.setEntityTwoPropertyName("Locations");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Host");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Location");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            HostLocation requestedHostLocation = new HostLocation();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedHostLocation.setSystemAttributes(systemAttributes);


            HostLocation returnedHostLocation = subjectAreaBeansToAccessOMRS.updateHostLocationRelationship(testuserid, requestedHostLocation);
        }

    @Test
        public void testCreateServerDeployment() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateServerDeployment";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date deploymentTime = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(deploymentTime);
            instanceProperties.setProperty("deploymentTime", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String deployer = "string1";
            primitivePropertyValue.setPrimitiveValue(deployer);
            instanceProperties.setProperty("deployer", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(OperationalStatus.values()[0].name());
            instanceProperties.setProperty("serverCapabilityStatus", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ServerDeployment");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Host");
            mockRelationship.setEntityTwoPropertyName("DeployedServers");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Host");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SoftwareServer");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ServerDeployment requestedServerDeployment = new ServerDeployment();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedServerDeployment.setSystemAttributes(systemAttributes);

            requestedServerDeployment.setDeploymentTime(deploymentTime);

            requestedServerDeployment.setDeployer(deployer);

            EnumPropertyValue OperationalStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            OperationalStatusEnumPropertyValue.setSymbolicName(OperationalStatus.values()[0].name());
            instanceProperties.setProperty("serverCapabilityStatus", OperationalStatusEnumPropertyValue);

            requestedServerDeployment.setServerCapabilityStatus(OperationalStatus.values()[0]);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ServerDeployment returnedServerDeployment = subjectAreaBeansToAccessOMRS.createServerDeploymentRelationship(testuserid, requestedServerDeployment);
            assertEquals(requestedServerDeployment.getDeploymentTime(),returnedServerDeployment.getDeploymentTime());

            assertEquals(requestedServerDeployment.getDeployer(),returnedServerDeployment.getDeployer());

            assertEquals(requestedServerDeployment.getServerCapabilityStatus(),returnedServerDeployment.getServerCapabilityStatus());

        }

        @Test
        public void testGetServerDeployment() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetServerDeployment";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date deploymentTime = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(deploymentTime);
            instanceProperties.setProperty("deploymentTime", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String deployer = "string1";
            primitivePropertyValue.setPrimitiveValue(deployer);
            instanceProperties.setProperty("deployer", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(OperationalStatus.values()[0].name());
            instanceProperties.setProperty("serverCapabilityStatus", enumPropertyValue);

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ServerDeployment");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Host");
            mockRelationship.setEntityTwoPropertyName("DeployedServers");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Host");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SoftwareServer");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ServerDeployment requestedServerDeployment = new ServerDeployment();

            requestedServerDeployment.setDeploymentTime(deploymentTime);

            requestedServerDeployment.setDeployer(deployer);

            EnumPropertyValue OperationalStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            OperationalStatusEnumPropertyValue.setSymbolicName(OperationalStatus.values()[0].name());
            instanceProperties.setProperty("serverCapabilityStatus", OperationalStatusEnumPropertyValue);

            requestedServerDeployment.setServerCapabilityStatus(OperationalStatus.values()[0]);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ServerDeployment returnedServerDeployment = subjectAreaBeansToAccessOMRS.getServerDeploymentRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedServerDeployment.getDeploymentTime(),returnedServerDeployment.getDeploymentTime());

            assertEquals(requestedServerDeployment.getDeployer(),returnedServerDeployment.getDeployer());

            assertEquals(requestedServerDeployment.getServerCapabilityStatus(),returnedServerDeployment.getServerCapabilityStatus());

        }
        @Test
        public void testUpdateServerDeployment() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateServerDeployment";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date deploymentTime = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(deploymentTime);
            instanceProperties.setProperty("deploymentTime", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String deployer = "string1";
            primitivePropertyValue.setPrimitiveValue(deployer);
            instanceProperties.setProperty("deployer", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(OperationalStatus.values()[0].name());
            instanceProperties.setProperty("serverCapabilityStatus", enumPropertyValue);

            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ServerDeployment");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Host");
            mockRelationship.setEntityTwoPropertyName("DeployedServers");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Host");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SoftwareServer");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ServerDeployment requestedServerDeployment = new ServerDeployment();

            requestedServerDeployment.setDeploymentTime(deploymentTime);

            requestedServerDeployment.setDeployer(deployer);

            EnumPropertyValue OperationalStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            OperationalStatusEnumPropertyValue.setSymbolicName(OperationalStatus.values()[0].name());
            instanceProperties.setProperty("serverCapabilityStatus", OperationalStatusEnumPropertyValue);

            requestedServerDeployment.setServerCapabilityStatus(OperationalStatus.values()[0]);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedServerDeployment.setSystemAttributes(systemAttributes);


            ServerDeployment returnedServerDeployment = subjectAreaBeansToAccessOMRS.updateServerDeploymentRelationship(testuserid, requestedServerDeployment);
            assertEquals(requestedServerDeployment.getDeploymentTime(),returnedServerDeployment.getDeploymentTime());

            assertEquals(requestedServerDeployment.getDeployer(),returnedServerDeployment.getDeployer());

            assertEquals(requestedServerDeployment.getServerCapabilityStatus(),returnedServerDeployment.getServerCapabilityStatus());

        }

    @Test
        public void testCreateRelatedTerm() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateRelatedTerm";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("RelatedTerm");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("SeeAlso");
            mockRelationship.setEntityTwoPropertyName("SeeAlso");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            RelatedTerm requestedRelatedTerm = new RelatedTerm();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedRelatedTerm.setSystemAttributes(systemAttributes);

            requestedRelatedTerm.setDescription(description);

            requestedRelatedTerm.setExpression(expression);

            requestedRelatedTerm.setSteward(steward);

            requestedRelatedTerm.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedRelatedTerm.setStatus(TermRelationshipStatus.values()[0]);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            RelatedTerm returnedRelatedTerm = subjectAreaBeansToAccessOMRS.createRelatedTermRelationship(testuserid, requestedRelatedTerm);
            assertEquals(requestedRelatedTerm.getDescription(),returnedRelatedTerm.getDescription());

            assertEquals(requestedRelatedTerm.getExpression(),returnedRelatedTerm.getExpression());

            assertEquals(requestedRelatedTerm.getSteward(),returnedRelatedTerm.getSteward());

            assertEquals(requestedRelatedTerm.getSource(),returnedRelatedTerm.getSource());

            assertEquals(requestedRelatedTerm.getStatus(),returnedRelatedTerm.getStatus());

        }

        @Test
        public void testGetRelatedTerm() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetRelatedTerm";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("RelatedTerm");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("SeeAlso");
            mockRelationship.setEntityTwoPropertyName("SeeAlso");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            RelatedTerm requestedRelatedTerm = new RelatedTerm();

            requestedRelatedTerm.setDescription(description);

            requestedRelatedTerm.setExpression(expression);

            requestedRelatedTerm.setSteward(steward);

            requestedRelatedTerm.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedRelatedTerm.setStatus(TermRelationshipStatus.values()[0]);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            RelatedTerm returnedRelatedTerm = subjectAreaBeansToAccessOMRS.getRelatedTermRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedRelatedTerm.getDescription(),returnedRelatedTerm.getDescription());

            assertEquals(requestedRelatedTerm.getExpression(),returnedRelatedTerm.getExpression());

            assertEquals(requestedRelatedTerm.getSteward(),returnedRelatedTerm.getSteward());

            assertEquals(requestedRelatedTerm.getSource(),returnedRelatedTerm.getSource());

            assertEquals(requestedRelatedTerm.getStatus(),returnedRelatedTerm.getStatus());

        }
        @Test
        public void testUpdateRelatedTerm() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateRelatedTerm";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String expression = "string1";
            primitivePropertyValue.setPrimitiveValue(expression);
            instanceProperties.setProperty("expression", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string2";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string3";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("RelatedTerm");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("SeeAlso");
            mockRelationship.setEntityTwoPropertyName("SeeAlso");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            RelatedTerm requestedRelatedTerm = new RelatedTerm();

            requestedRelatedTerm.setDescription(description);

            requestedRelatedTerm.setExpression(expression);

            requestedRelatedTerm.setSteward(steward);

            requestedRelatedTerm.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedRelatedTerm.setStatus(TermRelationshipStatus.values()[0]);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedRelatedTerm.setSystemAttributes(systemAttributes);


            RelatedTerm returnedRelatedTerm = subjectAreaBeansToAccessOMRS.updateRelatedTermRelationship(testuserid, requestedRelatedTerm);
            assertEquals(requestedRelatedTerm.getDescription(),returnedRelatedTerm.getDescription());

            assertEquals(requestedRelatedTerm.getExpression(),returnedRelatedTerm.getExpression());

            assertEquals(requestedRelatedTerm.getSteward(),returnedRelatedTerm.getSteward());

            assertEquals(requestedRelatedTerm.getSource(),returnedRelatedTerm.getSource());

            assertEquals(requestedRelatedTerm.getStatus(),returnedRelatedTerm.getStatus());

        }

    @Test
        public void testCreateSchemaTypeImplementation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateSchemaTypeImplementation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("SchemaTypeImplementation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("SchemaTypes");
            mockRelationship.setEntityTwoPropertyName("ImplementationSnippets");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SchemaType");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ImplementationSnippet");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SchemaTypeImplementation requestedSchemaTypeImplementation = new SchemaTypeImplementation();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedSchemaTypeImplementation.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            SchemaTypeImplementation returnedSchemaTypeImplementation = subjectAreaBeansToAccessOMRS.createSchemaTypeImplementationRelationship(testuserid, requestedSchemaTypeImplementation);
        }

        @Test
        public void testGetSchemaTypeImplementation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetSchemaTypeImplementation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("SchemaTypeImplementation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("SchemaTypes");
            mockRelationship.setEntityTwoPropertyName("ImplementationSnippets");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SchemaType");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ImplementationSnippet");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SchemaTypeImplementation requestedSchemaTypeImplementation = new SchemaTypeImplementation();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            SchemaTypeImplementation returnedSchemaTypeImplementation = subjectAreaBeansToAccessOMRS.getSchemaTypeImplementationRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateSchemaTypeImplementation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateSchemaTypeImplementation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("SchemaTypeImplementation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("SchemaTypes");
            mockRelationship.setEntityTwoPropertyName("ImplementationSnippets");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SchemaType");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("ImplementationSnippet");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SchemaTypeImplementation requestedSchemaTypeImplementation = new SchemaTypeImplementation();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedSchemaTypeImplementation.setSystemAttributes(systemAttributes);


            SchemaTypeImplementation returnedSchemaTypeImplementation = subjectAreaBeansToAccessOMRS.updateSchemaTypeImplementationRelationship(testuserid, requestedSchemaTypeImplementation);
        }

    @Test
        public void testCreateProcessInput() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateProcessInput";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProcessInput");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ConsumedByProcess");
            mockRelationship.setEntityTwoPropertyName("ProcessInputData");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Process");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DataSet");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProcessInput requestedProcessInput = new ProcessInput();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedProcessInput.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ProcessInput returnedProcessInput = subjectAreaBeansToAccessOMRS.createProcessInputRelationship(testuserid, requestedProcessInput);
        }

        @Test
        public void testGetProcessInput() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetProcessInput";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProcessInput");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ConsumedByProcess");
            mockRelationship.setEntityTwoPropertyName("ProcessInputData");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Process");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DataSet");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProcessInput requestedProcessInput = new ProcessInput();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ProcessInput returnedProcessInput = subjectAreaBeansToAccessOMRS.getProcessInputRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateProcessInput() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateProcessInput";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProcessInput");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ConsumedByProcess");
            mockRelationship.setEntityTwoPropertyName("ProcessInputData");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Process");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DataSet");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProcessInput requestedProcessInput = new ProcessInput();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedProcessInput.setSystemAttributes(systemAttributes);


            ProcessInput returnedProcessInput = subjectAreaBeansToAccessOMRS.updateProcessInputRelationship(testuserid, requestedProcessInput);
        }

    @Test
        public void testCreateAPIHeader() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateAPIHeader";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("APIHeader");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("UsedAsAPIHeader");
            mockRelationship.setEntityTwoPropertyName("ApiHeader");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("APIOperation");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            APIHeader requestedAPIHeader = new APIHeader();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAPIHeader.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            APIHeader returnedAPIHeader = subjectAreaBeansToAccessOMRS.createAPIHeaderRelationship(testuserid, requestedAPIHeader);
        }

        @Test
        public void testGetAPIHeader() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetAPIHeader";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("APIHeader");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("UsedAsAPIHeader");
            mockRelationship.setEntityTwoPropertyName("ApiHeader");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("APIOperation");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            APIHeader requestedAPIHeader = new APIHeader();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            APIHeader returnedAPIHeader = subjectAreaBeansToAccessOMRS.getAPIHeaderRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateAPIHeader() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateAPIHeader";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("APIHeader");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("UsedAsAPIHeader");
            mockRelationship.setEntityTwoPropertyName("ApiHeader");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("APIOperation");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            APIHeader requestedAPIHeader = new APIHeader();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAPIHeader.setSystemAttributes(systemAttributes);


            APIHeader returnedAPIHeader = subjectAreaBeansToAccessOMRS.updateAPIHeaderRelationship(testuserid, requestedAPIHeader);
        }

    @Test
        public void testCreateMeetingOnReferenceable() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateMeetingOnReferenceable";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("MeetingOnReferenceable");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Meetings");
            mockRelationship.setEntityTwoPropertyName("RelatedReferenceables");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Meeting");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Referenceable");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            MeetingOnReferenceable requestedMeetingOnReferenceable = new MeetingOnReferenceable();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedMeetingOnReferenceable.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MeetingOnReferenceable returnedMeetingOnReferenceable = subjectAreaBeansToAccessOMRS.createMeetingOnReferenceableRelationship(testuserid, requestedMeetingOnReferenceable);
        }

        @Test
        public void testGetMeetingOnReferenceable() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetMeetingOnReferenceable";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("MeetingOnReferenceable");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Meetings");
            mockRelationship.setEntityTwoPropertyName("RelatedReferenceables");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Meeting");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Referenceable");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            MeetingOnReferenceable requestedMeetingOnReferenceable = new MeetingOnReferenceable();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            MeetingOnReferenceable returnedMeetingOnReferenceable = subjectAreaBeansToAccessOMRS.getMeetingOnReferenceableRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateMeetingOnReferenceable() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateMeetingOnReferenceable";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("MeetingOnReferenceable");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Meetings");
            mockRelationship.setEntityTwoPropertyName("RelatedReferenceables");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Meeting");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Referenceable");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            MeetingOnReferenceable requestedMeetingOnReferenceable = new MeetingOnReferenceable();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedMeetingOnReferenceable.setSystemAttributes(systemAttributes);


            MeetingOnReferenceable returnedMeetingOnReferenceable = subjectAreaBeansToAccessOMRS.updateMeetingOnReferenceableRelationship(testuserid, requestedMeetingOnReferenceable);
        }

    @Test
        public void testCreateAttachedTag() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateAttachedTag";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AttachedTag");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("TaggedElement");
            mockRelationship.setEntityTwoPropertyName("Tags");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("InformalTag");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AttachedTag requestedAttachedTag = new AttachedTag();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAttachedTag.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            AttachedTag returnedAttachedTag = subjectAreaBeansToAccessOMRS.createAttachedTagRelationship(testuserid, requestedAttachedTag);
        }

        @Test
        public void testGetAttachedTag() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetAttachedTag";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AttachedTag");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("TaggedElement");
            mockRelationship.setEntityTwoPropertyName("Tags");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("InformalTag");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AttachedTag requestedAttachedTag = new AttachedTag();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            AttachedTag returnedAttachedTag = subjectAreaBeansToAccessOMRS.getAttachedTagRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateAttachedTag() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateAttachedTag";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AttachedTag");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("TaggedElement");
            mockRelationship.setEntityTwoPropertyName("Tags");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("InformalTag");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AttachedTag requestedAttachedTag = new AttachedTag();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAttachedTag.setSystemAttributes(systemAttributes);


            AttachedTag returnedAttachedTag = subjectAreaBeansToAccessOMRS.updateAttachedTagRelationship(testuserid, requestedAttachedTag);
        }

    @Test
        public void testCreateTermHASARelationship() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateTermHASARelationship";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string1";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string2";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("TermHASARelationship");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Objects");
            mockRelationship.setEntityTwoPropertyName("Attributes");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            TermHASARelationship requestedTermHASARelationship = new TermHASARelationship();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedTermHASARelationship.setSystemAttributes(systemAttributes);

            requestedTermHASARelationship.setDescription(description);

            requestedTermHASARelationship.setSteward(steward);

            requestedTermHASARelationship.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedTermHASARelationship.setStatus(TermRelationshipStatus.values()[0]);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            TermHASARelationship returnedTermHASARelationship = subjectAreaBeansToAccessOMRS.createTermHASARelationshipRelationship(testuserid, requestedTermHASARelationship);
            assertEquals(requestedTermHASARelationship.getDescription(),returnedTermHASARelationship.getDescription());

            assertEquals(requestedTermHASARelationship.getSteward(),returnedTermHASARelationship.getSteward());

            assertEquals(requestedTermHASARelationship.getSource(),returnedTermHASARelationship.getSource());

            assertEquals(requestedTermHASARelationship.getStatus(),returnedTermHASARelationship.getStatus());

        }

        @Test
        public void testGetTermHASARelationship() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetTermHASARelationship";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string1";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string2";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("TermHASARelationship");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Objects");
            mockRelationship.setEntityTwoPropertyName("Attributes");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            TermHASARelationship requestedTermHASARelationship = new TermHASARelationship();

            requestedTermHASARelationship.setDescription(description);

            requestedTermHASARelationship.setSteward(steward);

            requestedTermHASARelationship.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedTermHASARelationship.setStatus(TermRelationshipStatus.values()[0]);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            TermHASARelationship returnedTermHASARelationship = subjectAreaBeansToAccessOMRS.getTermHASARelationshipRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedTermHASARelationship.getDescription(),returnedTermHASARelationship.getDescription());

            assertEquals(requestedTermHASARelationship.getSteward(),returnedTermHASARelationship.getSteward());

            assertEquals(requestedTermHASARelationship.getSource(),returnedTermHASARelationship.getSource());

            assertEquals(requestedTermHASARelationship.getStatus(),returnedTermHASARelationship.getStatus());

        }
        @Test
        public void testUpdateTermHASARelationship() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateTermHASARelationship";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String description = "string0";
            primitivePropertyValue.setPrimitiveValue(description);
            instanceProperties.setProperty("description", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String steward = "string1";
            primitivePropertyValue.setPrimitiveValue(steward);
            instanceProperties.setProperty("steward", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string2";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            enumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            enumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", enumPropertyValue);

            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("TermHASARelationship");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Objects");
            mockRelationship.setEntityTwoPropertyName("Attributes");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GlossaryTerm");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            TermHASARelationship requestedTermHASARelationship = new TermHASARelationship();

            requestedTermHASARelationship.setDescription(description);

            requestedTermHASARelationship.setSteward(steward);

            requestedTermHASARelationship.setSource(source);

            EnumPropertyValue TermRelationshipStatusEnumPropertyValue = new EnumPropertyValue();
            // get the name of the first enumeration value as a sample data.
            TermRelationshipStatusEnumPropertyValue.setSymbolicName(TermRelationshipStatus.values()[0].name());
            instanceProperties.setProperty("status", TermRelationshipStatusEnumPropertyValue);

            requestedTermHASARelationship.setStatus(TermRelationshipStatus.values()[0]);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedTermHASARelationship.setSystemAttributes(systemAttributes);


            TermHASARelationship returnedTermHASARelationship = subjectAreaBeansToAccessOMRS.updateTermHASARelationshipRelationship(testuserid, requestedTermHASARelationship);
            assertEquals(requestedTermHASARelationship.getDescription(),returnedTermHASARelationship.getDescription());

            assertEquals(requestedTermHASARelationship.getSteward(),returnedTermHASARelationship.getSteward());

            assertEquals(requestedTermHASARelationship.getSource(),returnedTermHASARelationship.getSource());

            assertEquals(requestedTermHASARelationship.getStatus(),returnedTermHASARelationship.getStatus());

        }

    @Test
        public void testCreateGovernanceProcessImplementation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateGovernanceProcessImplementation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String notes = "string0";
            primitivePropertyValue.setPrimitiveValue(notes);
            instanceProperties.setProperty("notes", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernanceProcessImplementation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ImplementsGovernanceProcesses");
            mockRelationship.setEntityTwoPropertyName("Implementations");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceProcess");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Process");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceProcessImplementation requestedGovernanceProcessImplementation = new GovernanceProcessImplementation();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedGovernanceProcessImplementation.setSystemAttributes(systemAttributes);

            requestedGovernanceProcessImplementation.setNotes(notes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            GovernanceProcessImplementation returnedGovernanceProcessImplementation = subjectAreaBeansToAccessOMRS.createGovernanceProcessImplementationRelationship(testuserid, requestedGovernanceProcessImplementation);
            assertEquals(requestedGovernanceProcessImplementation.getNotes(),returnedGovernanceProcessImplementation.getNotes());

        }

        @Test
        public void testGetGovernanceProcessImplementation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetGovernanceProcessImplementation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String notes = "string0";
            primitivePropertyValue.setPrimitiveValue(notes);
            instanceProperties.setProperty("notes", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernanceProcessImplementation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ImplementsGovernanceProcesses");
            mockRelationship.setEntityTwoPropertyName("Implementations");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceProcess");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Process");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceProcessImplementation requestedGovernanceProcessImplementation = new GovernanceProcessImplementation();

            requestedGovernanceProcessImplementation.setNotes(notes);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            GovernanceProcessImplementation returnedGovernanceProcessImplementation = subjectAreaBeansToAccessOMRS.getGovernanceProcessImplementationRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedGovernanceProcessImplementation.getNotes(),returnedGovernanceProcessImplementation.getNotes());

        }
        @Test
        public void testUpdateGovernanceProcessImplementation() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGovernanceProcessImplementation";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String notes = "string0";
            primitivePropertyValue.setPrimitiveValue(notes);
            instanceProperties.setProperty("notes", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernanceProcessImplementation");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ImplementsGovernanceProcesses");
            mockRelationship.setEntityTwoPropertyName("Implementations");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceProcess");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Process");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceProcessImplementation requestedGovernanceProcessImplementation = new GovernanceProcessImplementation();

            requestedGovernanceProcessImplementation.setNotes(notes);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedGovernanceProcessImplementation.setSystemAttributes(systemAttributes);


            GovernanceProcessImplementation returnedGovernanceProcessImplementation = subjectAreaBeansToAccessOMRS.updateGovernanceProcessImplementationRelationship(testuserid, requestedGovernanceProcessImplementation);
            assertEquals(requestedGovernanceProcessImplementation.getNotes(),returnedGovernanceProcessImplementation.getNotes());

        }

    @Test
        public void testCreateGroupedMedia() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateGroupedMedia";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GroupedMedia");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("DataSetMembership");
            mockRelationship.setEntityTwoPropertyName("DataSetMembers");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("MediaCollection");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("MediaFile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GroupedMedia requestedGroupedMedia = new GroupedMedia();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedGroupedMedia.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            GroupedMedia returnedGroupedMedia = subjectAreaBeansToAccessOMRS.createGroupedMediaRelationship(testuserid, requestedGroupedMedia);
        }

        @Test
        public void testGetGroupedMedia() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetGroupedMedia";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GroupedMedia");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("DataSetMembership");
            mockRelationship.setEntityTwoPropertyName("DataSetMembers");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("MediaCollection");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("MediaFile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GroupedMedia requestedGroupedMedia = new GroupedMedia();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            GroupedMedia returnedGroupedMedia = subjectAreaBeansToAccessOMRS.getGroupedMediaRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateGroupedMedia() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGroupedMedia";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GroupedMedia");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("DataSetMembership");
            mockRelationship.setEntityTwoPropertyName("DataSetMembers");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("MediaCollection");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("MediaFile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GroupedMedia requestedGroupedMedia = new GroupedMedia();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedGroupedMedia.setSystemAttributes(systemAttributes);


            GroupedMedia returnedGroupedMedia = subjectAreaBeansToAccessOMRS.updateGroupedMediaRelationship(testuserid, requestedGroupedMedia);
        }

    @Test
        public void testCreateGovernanceResponse() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateGovernanceResponse";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String rationale = "string0";
            primitivePropertyValue.setPrimitiveValue(rationale);
            instanceProperties.setProperty("rationale", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernanceResponse");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Drivers");
            mockRelationship.setEntityTwoPropertyName("Policies");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceDriver");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GovernancePolicy");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceResponse requestedGovernanceResponse = new GovernanceResponse();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedGovernanceResponse.setSystemAttributes(systemAttributes);

            requestedGovernanceResponse.setRationale(rationale);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            GovernanceResponse returnedGovernanceResponse = subjectAreaBeansToAccessOMRS.createGovernanceResponseRelationship(testuserid, requestedGovernanceResponse);
            assertEquals(requestedGovernanceResponse.getRationale(),returnedGovernanceResponse.getRationale());

        }

        @Test
        public void testGetGovernanceResponse() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetGovernanceResponse";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String rationale = "string0";
            primitivePropertyValue.setPrimitiveValue(rationale);
            instanceProperties.setProperty("rationale", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernanceResponse");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Drivers");
            mockRelationship.setEntityTwoPropertyName("Policies");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceDriver");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GovernancePolicy");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceResponse requestedGovernanceResponse = new GovernanceResponse();

            requestedGovernanceResponse.setRationale(rationale);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            GovernanceResponse returnedGovernanceResponse = subjectAreaBeansToAccessOMRS.getGovernanceResponseRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedGovernanceResponse.getRationale(),returnedGovernanceResponse.getRationale());

        }
        @Test
        public void testUpdateGovernanceResponse() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateGovernanceResponse";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String rationale = "string0";
            primitivePropertyValue.setPrimitiveValue(rationale);
            instanceProperties.setProperty("rationale", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("GovernanceResponse");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Drivers");
            mockRelationship.setEntityTwoPropertyName("Policies");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("GovernanceDriver");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GovernancePolicy");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            GovernanceResponse requestedGovernanceResponse = new GovernanceResponse();

            requestedGovernanceResponse.setRationale(rationale);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedGovernanceResponse.setSystemAttributes(systemAttributes);


            GovernanceResponse returnedGovernanceResponse = subjectAreaBeansToAccessOMRS.updateGovernanceResponseRelationship(testuserid, requestedGovernanceResponse);
            assertEquals(requestedGovernanceResponse.getRationale(),returnedGovernanceResponse.getRationale());

        }

    @Test
        public void testCreateNestedFile() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateNestedFile";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("NestedFile");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("HomeFolder");
            mockRelationship.setEntityTwoPropertyName("NestedFiles");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("FileFolder");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DataFile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            NestedFile requestedNestedFile = new NestedFile();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedNestedFile.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            NestedFile returnedNestedFile = subjectAreaBeansToAccessOMRS.createNestedFileRelationship(testuserid, requestedNestedFile);
        }

        @Test
        public void testGetNestedFile() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetNestedFile";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("NestedFile");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("HomeFolder");
            mockRelationship.setEntityTwoPropertyName("NestedFiles");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("FileFolder");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DataFile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            NestedFile requestedNestedFile = new NestedFile();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            NestedFile returnedNestedFile = subjectAreaBeansToAccessOMRS.getNestedFileRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateNestedFile() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateNestedFile";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("NestedFile");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("HomeFolder");
            mockRelationship.setEntityTwoPropertyName("NestedFiles");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("FileFolder");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DataFile");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            NestedFile requestedNestedFile = new NestedFile();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedNestedFile.setSystemAttributes(systemAttributes);


            NestedFile returnedNestedFile = subjectAreaBeansToAccessOMRS.updateNestedFileRelationship(testuserid, requestedNestedFile);
        }

    @Test
        public void testCreateHostOperatingPlatform() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateHostOperatingPlatform";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("HostOperatingPlatform");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Host");
            mockRelationship.setEntityTwoPropertyName("Platform");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Host");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("OperatingPlatform");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            HostOperatingPlatform requestedHostOperatingPlatform = new HostOperatingPlatform();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedHostOperatingPlatform.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            HostOperatingPlatform returnedHostOperatingPlatform = subjectAreaBeansToAccessOMRS.createHostOperatingPlatformRelationship(testuserid, requestedHostOperatingPlatform);
        }

        @Test
        public void testGetHostOperatingPlatform() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetHostOperatingPlatform";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("HostOperatingPlatform");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Host");
            mockRelationship.setEntityTwoPropertyName("Platform");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Host");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("OperatingPlatform");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            HostOperatingPlatform requestedHostOperatingPlatform = new HostOperatingPlatform();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            HostOperatingPlatform returnedHostOperatingPlatform = subjectAreaBeansToAccessOMRS.getHostOperatingPlatformRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateHostOperatingPlatform() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateHostOperatingPlatform";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("HostOperatingPlatform");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Host");
            mockRelationship.setEntityTwoPropertyName("Platform");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Host");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("OperatingPlatform");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            HostOperatingPlatform requestedHostOperatingPlatform = new HostOperatingPlatform();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedHostOperatingPlatform.setSystemAttributes(systemAttributes);


            HostOperatingPlatform returnedHostOperatingPlatform = subjectAreaBeansToAccessOMRS.updateHostOperatingPlatformRelationship(testuserid, requestedHostOperatingPlatform);
        }

    @Test
        public void testCreateActorCollection() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateActorCollection";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String collectionUse = "string0";
            primitivePropertyValue.setPrimitiveValue(collectionUse);
            instanceProperties.setProperty("collectionUse", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ActorCollection");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ConsumingActors");
            mockRelationship.setEntityTwoPropertyName("ActorCollections");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("ActorProfile");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Collection");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ActorCollection requestedActorCollection = new ActorCollection();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedActorCollection.setSystemAttributes(systemAttributes);

            requestedActorCollection.setCollectionUse(collectionUse);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ActorCollection returnedActorCollection = subjectAreaBeansToAccessOMRS.createActorCollectionRelationship(testuserid, requestedActorCollection);
            assertEquals(requestedActorCollection.getCollectionUse(),returnedActorCollection.getCollectionUse());

        }

        @Test
        public void testGetActorCollection() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetActorCollection";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String collectionUse = "string0";
            primitivePropertyValue.setPrimitiveValue(collectionUse);
            instanceProperties.setProperty("collectionUse", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ActorCollection");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ConsumingActors");
            mockRelationship.setEntityTwoPropertyName("ActorCollections");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("ActorProfile");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Collection");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ActorCollection requestedActorCollection = new ActorCollection();

            requestedActorCollection.setCollectionUse(collectionUse);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ActorCollection returnedActorCollection = subjectAreaBeansToAccessOMRS.getActorCollectionRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedActorCollection.getCollectionUse(),returnedActorCollection.getCollectionUse());

        }
        @Test
        public void testUpdateActorCollection() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateActorCollection";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String collectionUse = "string0";
            primitivePropertyValue.setPrimitiveValue(collectionUse);
            instanceProperties.setProperty("collectionUse", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ActorCollection");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ConsumingActors");
            mockRelationship.setEntityTwoPropertyName("ActorCollections");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("ActorProfile");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Collection");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ActorCollection requestedActorCollection = new ActorCollection();

            requestedActorCollection.setCollectionUse(collectionUse);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedActorCollection.setSystemAttributes(systemAttributes);


            ActorCollection returnedActorCollection = subjectAreaBeansToAccessOMRS.updateActorCollectionRelationship(testuserid, requestedActorCollection);
            assertEquals(requestedActorCollection.getCollectionUse(),returnedActorCollection.getCollectionUse());

        }

    @Test
        public void testCreateTermAnchor() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateTermAnchor";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("TermAnchor");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Anchor");
            mockRelationship.setEntityTwoPropertyName("Terms");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Glossary");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            TermAnchor requestedTermAnchor = new TermAnchor();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedTermAnchor.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            TermAnchor returnedTermAnchor = subjectAreaBeansToAccessOMRS.createTermAnchorRelationship(testuserid, requestedTermAnchor);
        }

        @Test
        public void testGetTermAnchor() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetTermAnchor";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("TermAnchor");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Anchor");
            mockRelationship.setEntityTwoPropertyName("Terms");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Glossary");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            TermAnchor requestedTermAnchor = new TermAnchor();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            TermAnchor returnedTermAnchor = subjectAreaBeansToAccessOMRS.getTermAnchorRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateTermAnchor() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateTermAnchor";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("TermAnchor");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("Anchor");
            mockRelationship.setEntityTwoPropertyName("Terms");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Glossary");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("GlossaryTerm");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            TermAnchor requestedTermAnchor = new TermAnchor();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedTermAnchor.setSystemAttributes(systemAttributes);


            TermAnchor returnedTermAnchor = subjectAreaBeansToAccessOMRS.updateTermAnchorRelationship(testuserid, requestedTermAnchor);
        }

    @Test
        public void testCreateProjectResources() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateProjectResources";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date resourceUse = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(resourceUse);
            instanceProperties.setProperty("resourceUse", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProjectResources");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ProjectUse");
            mockRelationship.setEntityTwoPropertyName("SupportingResources");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Project");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Collection");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProjectResources requestedProjectResources = new ProjectResources();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedProjectResources.setSystemAttributes(systemAttributes);

            requestedProjectResources.setResourceUse(resourceUse);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ProjectResources returnedProjectResources = subjectAreaBeansToAccessOMRS.createProjectResourcesRelationship(testuserid, requestedProjectResources);
            assertEquals(requestedProjectResources.getResourceUse(),returnedProjectResources.getResourceUse());

        }

        @Test
        public void testGetProjectResources() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetProjectResources";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date resourceUse = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(resourceUse);
            instanceProperties.setProperty("resourceUse", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProjectResources");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ProjectUse");
            mockRelationship.setEntityTwoPropertyName("SupportingResources");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Project");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Collection");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProjectResources requestedProjectResources = new ProjectResources();

            requestedProjectResources.setResourceUse(resourceUse);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ProjectResources returnedProjectResources = subjectAreaBeansToAccessOMRS.getProjectResourcesRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedProjectResources.getResourceUse(),returnedProjectResources.getResourceUse());

        }
        @Test
        public void testUpdateProjectResources() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateProjectResources";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_DATE);
            java.util.Date resourceUse = new java.util.Date();
            primitivePropertyValue.setPrimitiveValue(resourceUse);
            instanceProperties.setProperty("resourceUse", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ProjectResources");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("ProjectUse");
            mockRelationship.setEntityTwoPropertyName("SupportingResources");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Project");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Collection");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ProjectResources requestedProjectResources = new ProjectResources();

            requestedProjectResources.setResourceUse(resourceUse);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedProjectResources.setSystemAttributes(systemAttributes);


            ProjectResources returnedProjectResources = subjectAreaBeansToAccessOMRS.updateProjectResourcesRelationship(testuserid, requestedProjectResources);
            assertEquals(requestedProjectResources.getResourceUse(),returnedProjectResources.getResourceUse());

        }

    @Test
        public void testCreateAPIRequest() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateAPIRequest";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("APIRequest");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("UsedAsAPIRequest");
            mockRelationship.setEntityTwoPropertyName("ApiRequest");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("APIOperation");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            APIRequest requestedAPIRequest = new APIRequest();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAPIRequest.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            APIRequest returnedAPIRequest = subjectAreaBeansToAccessOMRS.createAPIRequestRelationship(testuserid, requestedAPIRequest);
        }

        @Test
        public void testGetAPIRequest() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetAPIRequest";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("APIRequest");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("UsedAsAPIRequest");
            mockRelationship.setEntityTwoPropertyName("ApiRequest");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("APIOperation");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            APIRequest requestedAPIRequest = new APIRequest();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            APIRequest returnedAPIRequest = subjectAreaBeansToAccessOMRS.getAPIRequestRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateAPIRequest() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateAPIRequest";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("APIRequest");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("UsedAsAPIRequest");
            mockRelationship.setEntityTwoPropertyName("ApiRequest");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("APIOperation");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("SchemaType");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            APIRequest requestedAPIRequest = new APIRequest();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAPIRequest.setSystemAttributes(systemAttributes);


            APIRequest returnedAPIRequest = subjectAreaBeansToAccessOMRS.updateAPIRequestRelationship(testuserid, requestedAPIRequest);
        }

    @Test
        public void testCreateSoftwareComponentDeployment() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateSoftwareComponentDeployment";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String deploymentDate = "string0";
            primitivePropertyValue.setPrimitiveValue(deploymentDate);
            instanceProperties.setProperty("deploymentDate", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String deploymentProcess = "string1";
            primitivePropertyValue.setPrimitiveValue(deploymentProcess);
            instanceProperties.setProperty("deploymentProcess", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("SoftwareComponentDeployment");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("DeploymentLocations");
            mockRelationship.setEntityTwoPropertyName("DeployedComponents");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SoftwareServerCapability");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DeployedSoftwareComponent");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SoftwareComponentDeployment requestedSoftwareComponentDeployment = new SoftwareComponentDeployment();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedSoftwareComponentDeployment.setSystemAttributes(systemAttributes);

            requestedSoftwareComponentDeployment.setDeploymentDate(deploymentDate);

            requestedSoftwareComponentDeployment.setDeploymentProcess(deploymentProcess);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            SoftwareComponentDeployment returnedSoftwareComponentDeployment = subjectAreaBeansToAccessOMRS.createSoftwareComponentDeploymentRelationship(testuserid, requestedSoftwareComponentDeployment);
            assertEquals(requestedSoftwareComponentDeployment.getDeploymentDate(),returnedSoftwareComponentDeployment.getDeploymentDate());

            assertEquals(requestedSoftwareComponentDeployment.getDeploymentProcess(),returnedSoftwareComponentDeployment.getDeploymentProcess());

        }

        @Test
        public void testGetSoftwareComponentDeployment() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetSoftwareComponentDeployment";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String deploymentDate = "string0";
            primitivePropertyValue.setPrimitiveValue(deploymentDate);
            instanceProperties.setProperty("deploymentDate", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String deploymentProcess = "string1";
            primitivePropertyValue.setPrimitiveValue(deploymentProcess);
            instanceProperties.setProperty("deploymentProcess", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("SoftwareComponentDeployment");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("DeploymentLocations");
            mockRelationship.setEntityTwoPropertyName("DeployedComponents");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SoftwareServerCapability");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DeployedSoftwareComponent");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SoftwareComponentDeployment requestedSoftwareComponentDeployment = new SoftwareComponentDeployment();

            requestedSoftwareComponentDeployment.setDeploymentDate(deploymentDate);

            requestedSoftwareComponentDeployment.setDeploymentProcess(deploymentProcess);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            SoftwareComponentDeployment returnedSoftwareComponentDeployment = subjectAreaBeansToAccessOMRS.getSoftwareComponentDeploymentRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedSoftwareComponentDeployment.getDeploymentDate(),returnedSoftwareComponentDeployment.getDeploymentDate());

            assertEquals(requestedSoftwareComponentDeployment.getDeploymentProcess(),returnedSoftwareComponentDeployment.getDeploymentProcess());

        }
        @Test
        public void testUpdateSoftwareComponentDeployment() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateSoftwareComponentDeployment";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String deploymentDate = "string0";
            primitivePropertyValue.setPrimitiveValue(deploymentDate);
            instanceProperties.setProperty("deploymentDate", primitivePropertyValue);
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String deploymentProcess = "string1";
            primitivePropertyValue.setPrimitiveValue(deploymentProcess);
            instanceProperties.setProperty("deploymentProcess", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("SoftwareComponentDeployment");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("DeploymentLocations");
            mockRelationship.setEntityTwoPropertyName("DeployedComponents");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("SoftwareServerCapability");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("DeployedSoftwareComponent");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            SoftwareComponentDeployment requestedSoftwareComponentDeployment = new SoftwareComponentDeployment();

            requestedSoftwareComponentDeployment.setDeploymentDate(deploymentDate);

            requestedSoftwareComponentDeployment.setDeploymentProcess(deploymentProcess);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedSoftwareComponentDeployment.setSystemAttributes(systemAttributes);


            SoftwareComponentDeployment returnedSoftwareComponentDeployment = subjectAreaBeansToAccessOMRS.updateSoftwareComponentDeploymentRelationship(testuserid, requestedSoftwareComponentDeployment);
            assertEquals(requestedSoftwareComponentDeployment.getDeploymentDate(),returnedSoftwareComponentDeployment.getDeploymentDate());

            assertEquals(requestedSoftwareComponentDeployment.getDeploymentProcess(),returnedSoftwareComponentDeployment.getDeploymentProcess());

        }

    @Test
        public void testCreateCohortMemberMetadataCollection() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateCohortMemberMetadataCollection";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("CohortMemberMetadataCollection");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("CohortMember");
            mockRelationship.setEntityTwoPropertyName("LocalMetadataCollection");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("CohortMember");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("MetadataCollection");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            CohortMemberMetadataCollection requestedCohortMemberMetadataCollection = new CohortMemberMetadataCollection();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedCohortMemberMetadataCollection.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            CohortMemberMetadataCollection returnedCohortMemberMetadataCollection = subjectAreaBeansToAccessOMRS.createCohortMemberMetadataCollectionRelationship(testuserid, requestedCohortMemberMetadataCollection);
        }

        @Test
        public void testGetCohortMemberMetadataCollection() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetCohortMemberMetadataCollection";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("CohortMemberMetadataCollection");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("CohortMember");
            mockRelationship.setEntityTwoPropertyName("LocalMetadataCollection");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("CohortMember");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("MetadataCollection");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            CohortMemberMetadataCollection requestedCohortMemberMetadataCollection = new CohortMemberMetadataCollection();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            CohortMemberMetadataCollection returnedCohortMemberMetadataCollection = subjectAreaBeansToAccessOMRS.getCohortMemberMetadataCollectionRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateCohortMemberMetadataCollection() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateCohortMemberMetadataCollection";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("CohortMemberMetadataCollection");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("CohortMember");
            mockRelationship.setEntityTwoPropertyName("LocalMetadataCollection");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("CohortMember");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("MetadataCollection");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            CohortMemberMetadataCollection requestedCohortMemberMetadataCollection = new CohortMemberMetadataCollection();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedCohortMemberMetadataCollection.setSystemAttributes(systemAttributes);


            CohortMemberMetadataCollection returnedCohortMemberMetadataCollection = subjectAreaBeansToAccessOMRS.updateCohortMemberMetadataCollectionRelationship(testuserid, requestedCohortMemberMetadataCollection);
        }

    @Test
        public void testCreateReferenceableFacet() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateReferenceableFacet";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string0";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ReferenceableFacet");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("RelatedEntity");
            mockRelationship.setEntityTwoPropertyName("Facets");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("PropertyFacet");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ReferenceableFacet requestedReferenceableFacet = new ReferenceableFacet();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedReferenceableFacet.setSystemAttributes(systemAttributes);

            requestedReferenceableFacet.setSource(source);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            ReferenceableFacet returnedReferenceableFacet = subjectAreaBeansToAccessOMRS.createReferenceableFacetRelationship(testuserid, requestedReferenceableFacet);
            assertEquals(requestedReferenceableFacet.getSource(),returnedReferenceableFacet.getSource());

        }

        @Test
        public void testGetReferenceableFacet() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetReferenceableFacet";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string0";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ReferenceableFacet");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("RelatedEntity");
            mockRelationship.setEntityTwoPropertyName("Facets");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("PropertyFacet");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ReferenceableFacet requestedReferenceableFacet = new ReferenceableFacet();

            requestedReferenceableFacet.setSource(source);

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            ReferenceableFacet returnedReferenceableFacet = subjectAreaBeansToAccessOMRS.getReferenceableFacetRelationshipByGuid(testuserid, testguid1);
            assertEquals(requestedReferenceableFacet.getSource(),returnedReferenceableFacet.getSource());

        }
        @Test
        public void testUpdateReferenceableFacet() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateReferenceableFacet";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            primitivePropertyValue = new PrimitivePropertyValue();
            primitivePropertyValue.setPrimitiveDefCategory(PrimitiveDefCategory.OM_PRIMITIVE_TYPE_STRING);
            String source = "string0";
            primitivePropertyValue.setPrimitiveValue(source);
            instanceProperties.setProperty("source", primitivePropertyValue);
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("ReferenceableFacet");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("RelatedEntity");
            mockRelationship.setEntityTwoPropertyName("Facets");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("PropertyFacet");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            ReferenceableFacet requestedReferenceableFacet = new ReferenceableFacet();

            requestedReferenceableFacet.setSource(source);

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedReferenceableFacet.setSystemAttributes(systemAttributes);


            ReferenceableFacet returnedReferenceableFacet = subjectAreaBeansToAccessOMRS.updateReferenceableFacetRelationship(testuserid, requestedReferenceableFacet);
            assertEquals(requestedReferenceableFacet.getSource(),returnedReferenceableFacet.getSource());

        }

    @Test
        public void testCreateAttachedLike() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testcreateAttachedLike";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AttachedLike");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LikedElement");
            mockRelationship.setEntityTwoPropertyName("Likes");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Like");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSAddRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AttachedLike requestedAttachedLike = new AttachedLike();
            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAttachedLike.setSystemAttributes(systemAttributes);

            MapPropertyValue testMapPropertyValue = null;
            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            AttachedLike returnedAttachedLike = subjectAreaBeansToAccessOMRS.createAttachedLikeRelationship(testuserid, requestedAttachedLike);
        }

        @Test
        public void testGetAttachedLike() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testGetAttachedLike";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            MapPropertyValue mapPropertyValue = null;
            InstanceProperties mapValues =null;
            PrimitivePropertyValue primitivePropertyValueForMap =null;

            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AttachedLike");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LikedElement");
            mockRelationship.setEntityTwoPropertyName("Likes");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Like");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSGetRelationshipByGuid(anyString(),anyString())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AttachedLike requestedAttachedLike = new AttachedLike();

            InstanceProperties testMapValues =null;
            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            MapPropertyValue testMapPropertyValue = null;

            AttachedLike returnedAttachedLike = subjectAreaBeansToAccessOMRS.getAttachedLikeRelationshipByGuid(testuserid, testguid1);
        }
        @Test
        public void testUpdateAttachedLike() throws Exception {
            String testuserid = "userid1";
            String testguid1 = "testUpdateAttachedLike";
            SubjectAreaBeansToAccessOMRS subjectAreaBeansToAccessOMRS = new SubjectAreaBeansToAccessOMRS();

            Relationship mockRelationship = new Relationship();
            InstanceProperties instanceProperties = new InstanceProperties();

            PrimitivePropertyValue primitivePropertyValue;
            EnumPropertyValue enumPropertyValue;
            MapPropertyValue mapPropertyValue=null;
            PrimitivePropertyValue primitivePropertyValueForMap = null;
            InstanceProperties mapValues =null;

            // In the models we are generating from we only have map<String,String> types, this code assumes those types.
            mockRelationship.setProperties(instanceProperties);
            mockRelationship.setGUID(testguid1);
            mockRelationship.setVersion(1L);
            InstanceType typeOfRelationship = new InstanceType();
            typeOfRelationship.setTypeDefName("AttachedLike");
            mockRelationship.setType(typeOfRelationship);

            mockRelationship.setEntityOnePropertyName("LikedElement");
            mockRelationship.setEntityTwoPropertyName("Likes");
            EntityProxy entityProxy1 = new EntityProxy();
            EntityProxy entityProxy2 = new EntityProxy();
            InstanceType type1 = new InstanceType();
            type1.setTypeDefName("Referenceable");
            InstanceType type2 = new InstanceType();
            type2.setTypeDefName("Like");
            entityProxy1.setType(type1);
            entityProxy2.setType(type2);
            mockRelationship.setEntityOneProxy(entityProxy1);
            mockRelationship.setEntityTwoProxy(entityProxy2);

            when( oMRSAPIHelper.callOMRSUpdateRelationship(anyString(),any())).thenReturn(mockRelationship);
            // set the mock omrs in to the rest file.
            subjectAreaBeansToAccessOMRS.setOMRSAPIHelper(oMRSAPIHelper);
            AttachedLike requestedAttachedLike = new AttachedLike();

            PrimitivePropertyValue testPrimitivePropertyValueForMap=null;
            InstanceProperties testMapValues =null;
            MapPropertyValue testMapPropertyValue = null;

            SystemAttributes systemAttributes = new SystemAttributes();
            systemAttributes.setVersion(1L);
            requestedAttachedLike.setSystemAttributes(systemAttributes);


            AttachedLike returnedAttachedLike = subjectAreaBeansToAccessOMRS.updateAttachedLikeRelationship(testuserid, requestedAttachedLike);
        }
}
